// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/internal"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/predicate"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/team"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/teamapikey"
)

// TeamApiKeyQuery is the builder for querying TeamApiKey entities.
type TeamApiKeyQuery struct {
	config
	ctx        *QueryContext
	order      []teamapikey.OrderOption
	inters     []Interceptor
	predicates []predicate.TeamApiKey
	withTeam   *TeamQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TeamApiKeyQuery builder.
func (takq *TeamApiKeyQuery) Where(ps ...predicate.TeamApiKey) *TeamApiKeyQuery {
	takq.predicates = append(takq.predicates, ps...)
	return takq
}

// Limit the number of records to be returned by this query.
func (takq *TeamApiKeyQuery) Limit(limit int) *TeamApiKeyQuery {
	takq.ctx.Limit = &limit
	return takq
}

// Offset to start from.
func (takq *TeamApiKeyQuery) Offset(offset int) *TeamApiKeyQuery {
	takq.ctx.Offset = &offset
	return takq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (takq *TeamApiKeyQuery) Unique(unique bool) *TeamApiKeyQuery {
	takq.ctx.Unique = &unique
	return takq
}

// Order specifies how the records should be ordered.
func (takq *TeamApiKeyQuery) Order(o ...teamapikey.OrderOption) *TeamApiKeyQuery {
	takq.order = append(takq.order, o...)
	return takq
}

// QueryTeam chains the current query on the "team" edge.
func (takq *TeamApiKeyQuery) QueryTeam() *TeamQuery {
	query := (&TeamClient{config: takq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := takq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := takq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(teamapikey.Table, teamapikey.FieldID, selector),
			sqlgraph.To(team.Table, team.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, teamapikey.TeamTable, teamapikey.TeamColumn),
		)
		schemaConfig := takq.schemaConfig
		step.To.Schema = schemaConfig.Team
		step.Edge.Schema = schemaConfig.Team
		fromU = sqlgraph.SetNeighbors(takq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TeamApiKey entity from the query.
// Returns a *NotFoundError when no TeamApiKey was found.
func (takq *TeamApiKeyQuery) First(ctx context.Context) (*TeamApiKey, error) {
	nodes, err := takq.Limit(1).All(setContextOp(ctx, takq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{teamapikey.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (takq *TeamApiKeyQuery) FirstX(ctx context.Context) *TeamApiKey {
	node, err := takq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TeamApiKey ID from the query.
// Returns a *NotFoundError when no TeamApiKey ID was found.
func (takq *TeamApiKeyQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = takq.Limit(1).IDs(setContextOp(ctx, takq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{teamapikey.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (takq *TeamApiKeyQuery) FirstIDX(ctx context.Context) string {
	id, err := takq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TeamApiKey entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one TeamApiKey entity is found.
// Returns a *NotFoundError when no TeamApiKey entities are found.
func (takq *TeamApiKeyQuery) Only(ctx context.Context) (*TeamApiKey, error) {
	nodes, err := takq.Limit(2).All(setContextOp(ctx, takq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{teamapikey.Label}
	default:
		return nil, &NotSingularError{teamapikey.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (takq *TeamApiKeyQuery) OnlyX(ctx context.Context) *TeamApiKey {
	node, err := takq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TeamApiKey ID in the query.
// Returns a *NotSingularError when more than one TeamApiKey ID is found.
// Returns a *NotFoundError when no entities are found.
func (takq *TeamApiKeyQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = takq.Limit(2).IDs(setContextOp(ctx, takq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{teamapikey.Label}
	default:
		err = &NotSingularError{teamapikey.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (takq *TeamApiKeyQuery) OnlyIDX(ctx context.Context) string {
	id, err := takq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TeamApiKeys.
func (takq *TeamApiKeyQuery) All(ctx context.Context) ([]*TeamApiKey, error) {
	ctx = setContextOp(ctx, takq.ctx, "All")
	if err := takq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*TeamApiKey, *TeamApiKeyQuery]()
	return withInterceptors[[]*TeamApiKey](ctx, takq, qr, takq.inters)
}

// AllX is like All, but panics if an error occurs.
func (takq *TeamApiKeyQuery) AllX(ctx context.Context) []*TeamApiKey {
	nodes, err := takq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TeamApiKey IDs.
func (takq *TeamApiKeyQuery) IDs(ctx context.Context) (ids []string, err error) {
	if takq.ctx.Unique == nil && takq.path != nil {
		takq.Unique(true)
	}
	ctx = setContextOp(ctx, takq.ctx, "IDs")
	if err = takq.Select(teamapikey.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (takq *TeamApiKeyQuery) IDsX(ctx context.Context) []string {
	ids, err := takq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (takq *TeamApiKeyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, takq.ctx, "Count")
	if err := takq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, takq, querierCount[*TeamApiKeyQuery](), takq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (takq *TeamApiKeyQuery) CountX(ctx context.Context) int {
	count, err := takq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (takq *TeamApiKeyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, takq.ctx, "Exist")
	switch _, err := takq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (takq *TeamApiKeyQuery) ExistX(ctx context.Context) bool {
	exist, err := takq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TeamApiKeyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (takq *TeamApiKeyQuery) Clone() *TeamApiKeyQuery {
	if takq == nil {
		return nil
	}
	return &TeamApiKeyQuery{
		config:     takq.config,
		ctx:        takq.ctx.Clone(),
		order:      append([]teamapikey.OrderOption{}, takq.order...),
		inters:     append([]Interceptor{}, takq.inters...),
		predicates: append([]predicate.TeamApiKey{}, takq.predicates...),
		withTeam:   takq.withTeam.Clone(),
		// clone intermediate query.
		sql:  takq.sql.Clone(),
		path: takq.path,
	}
}

// WithTeam tells the query-builder to eager-load the nodes that are connected to
// the "team" edge. The optional arguments are used to configure the query builder of the edge.
func (takq *TeamApiKeyQuery) WithTeam(opts ...func(*TeamQuery)) *TeamApiKeyQuery {
	query := (&TeamClient{config: takq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	takq.withTeam = query
	return takq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TeamApiKey.Query().
//		GroupBy(teamapikey.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (takq *TeamApiKeyQuery) GroupBy(field string, fields ...string) *TeamApiKeyGroupBy {
	takq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &TeamApiKeyGroupBy{build: takq}
	grbuild.flds = &takq.ctx.Fields
	grbuild.label = teamapikey.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.TeamApiKey.Query().
//		Select(teamapikey.FieldCreatedAt).
//		Scan(ctx, &v)
func (takq *TeamApiKeyQuery) Select(fields ...string) *TeamApiKeySelect {
	takq.ctx.Fields = append(takq.ctx.Fields, fields...)
	sbuild := &TeamApiKeySelect{TeamApiKeyQuery: takq}
	sbuild.label = teamapikey.Label
	sbuild.flds, sbuild.scan = &takq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a TeamApiKeySelect configured with the given aggregations.
func (takq *TeamApiKeyQuery) Aggregate(fns ...AggregateFunc) *TeamApiKeySelect {
	return takq.Select().Aggregate(fns...)
}

func (takq *TeamApiKeyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range takq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, takq); err != nil {
				return err
			}
		}
	}
	for _, f := range takq.ctx.Fields {
		if !teamapikey.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if takq.path != nil {
		prev, err := takq.path(ctx)
		if err != nil {
			return err
		}
		takq.sql = prev
	}
	return nil
}

func (takq *TeamApiKeyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*TeamApiKey, error) {
	var (
		nodes       = []*TeamApiKey{}
		_spec       = takq.querySpec()
		loadedTypes = [1]bool{
			takq.withTeam != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*TeamApiKey).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &TeamApiKey{config: takq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = takq.schemaConfig.TeamApiKey
	ctx = internal.NewSchemaConfigContext(ctx, takq.schemaConfig)
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, takq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := takq.withTeam; query != nil {
		if err := takq.loadTeam(ctx, query, nodes,
			func(n *TeamApiKey) { n.Edges.Team = []*Team{} },
			func(n *TeamApiKey, e *Team) { n.Edges.Team = append(n.Edges.Team, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (takq *TeamApiKeyQuery) loadTeam(ctx context.Context, query *TeamQuery, nodes []*TeamApiKey, init func(*TeamApiKey), assign func(*TeamApiKey, *Team)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*TeamApiKey)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Team(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(teamapikey.TeamColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.team_api_key_team
		if fk == nil {
			return fmt.Errorf(`foreign-key "team_api_key_team" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "team_api_key_team" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (takq *TeamApiKeyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := takq.querySpec()
	_spec.Node.Schema = takq.schemaConfig.TeamApiKey
	ctx = internal.NewSchemaConfigContext(ctx, takq.schemaConfig)
	_spec.Node.Columns = takq.ctx.Fields
	if len(takq.ctx.Fields) > 0 {
		_spec.Unique = takq.ctx.Unique != nil && *takq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, takq.driver, _spec)
}

func (takq *TeamApiKeyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(teamapikey.Table, teamapikey.Columns, sqlgraph.NewFieldSpec(teamapikey.FieldID, field.TypeString))
	_spec.From = takq.sql
	if unique := takq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if takq.path != nil {
		_spec.Unique = true
	}
	if fields := takq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamapikey.FieldID)
		for i := range fields {
			if fields[i] != teamapikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := takq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := takq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := takq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := takq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (takq *TeamApiKeyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(takq.driver.Dialect())
	t1 := builder.Table(teamapikey.Table)
	columns := takq.ctx.Fields
	if len(columns) == 0 {
		columns = teamapikey.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if takq.sql != nil {
		selector = takq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if takq.ctx.Unique != nil && *takq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(takq.schemaConfig.TeamApiKey)
	ctx = internal.NewSchemaConfigContext(ctx, takq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range takq.predicates {
		p(selector)
	}
	for _, p := range takq.order {
		p(selector)
	}
	if offset := takq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := takq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TeamApiKeyGroupBy is the group-by builder for TeamApiKey entities.
type TeamApiKeyGroupBy struct {
	selector
	build *TeamApiKeyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (takgb *TeamApiKeyGroupBy) Aggregate(fns ...AggregateFunc) *TeamApiKeyGroupBy {
	takgb.fns = append(takgb.fns, fns...)
	return takgb
}

// Scan applies the selector query and scans the result into the given value.
func (takgb *TeamApiKeyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, takgb.build.ctx, "GroupBy")
	if err := takgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TeamApiKeyQuery, *TeamApiKeyGroupBy](ctx, takgb.build, takgb, takgb.build.inters, v)
}

func (takgb *TeamApiKeyGroupBy) sqlScan(ctx context.Context, root *TeamApiKeyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(takgb.fns))
	for _, fn := range takgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*takgb.flds)+len(takgb.fns))
		for _, f := range *takgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*takgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := takgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// TeamApiKeySelect is the builder for selecting fields of TeamApiKey entities.
type TeamApiKeySelect struct {
	*TeamApiKeyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (taks *TeamApiKeySelect) Aggregate(fns ...AggregateFunc) *TeamApiKeySelect {
	taks.fns = append(taks.fns, fns...)
	return taks
}

// Scan applies the selector query and scans the result into the given value.
func (taks *TeamApiKeySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, taks.ctx, "Select")
	if err := taks.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*TeamApiKeyQuery, *TeamApiKeySelect](ctx, taks.TeamApiKeyQuery, taks, taks.inters, v)
}

func (taks *TeamApiKeySelect) sqlScan(ctx context.Context, root *TeamApiKeyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(taks.fns))
	for _, fn := range taks.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*taks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := taks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
