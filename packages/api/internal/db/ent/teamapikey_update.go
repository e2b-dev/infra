// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/internal"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/predicate"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/team"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/teamapikey"
	"github.com/google/uuid"
)

// TeamApiKeyUpdate is the builder for updating TeamApiKey entities.
type TeamApiKeyUpdate struct {
	config
	hooks    []Hook
	mutation *TeamApiKeyMutation
}

// Where appends a list predicates to the TeamApiKeyUpdate builder.
func (taku *TeamApiKeyUpdate) Where(ps ...predicate.TeamApiKey) *TeamApiKeyUpdate {
	taku.mutation.Where(ps...)
	return taku
}

// SetCreatedAt sets the "created_at" field.
func (taku *TeamApiKeyUpdate) SetCreatedAt(t time.Time) *TeamApiKeyUpdate {
	taku.mutation.SetCreatedAt(t)
	return taku
}

// SetTeamID sets the "team_id" field.
func (taku *TeamApiKeyUpdate) SetTeamID(u uuid.UUID) *TeamApiKeyUpdate {
	taku.mutation.SetTeamID(u)
	return taku
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (taku *TeamApiKeyUpdate) AddTeamIDs(ids ...uuid.UUID) *TeamApiKeyUpdate {
	taku.mutation.AddTeamIDs(ids...)
	return taku
}

// AddTeam adds the "team" edges to the Team entity.
func (taku *TeamApiKeyUpdate) AddTeam(t ...*Team) *TeamApiKeyUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return taku.AddTeamIDs(ids...)
}

// Mutation returns the TeamApiKeyMutation object of the builder.
func (taku *TeamApiKeyUpdate) Mutation() *TeamApiKeyMutation {
	return taku.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (taku *TeamApiKeyUpdate) ClearTeam() *TeamApiKeyUpdate {
	taku.mutation.ClearTeam()
	return taku
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (taku *TeamApiKeyUpdate) RemoveTeamIDs(ids ...uuid.UUID) *TeamApiKeyUpdate {
	taku.mutation.RemoveTeamIDs(ids...)
	return taku
}

// RemoveTeam removes "team" edges to Team entities.
func (taku *TeamApiKeyUpdate) RemoveTeam(t ...*Team) *TeamApiKeyUpdate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return taku.RemoveTeamIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (taku *TeamApiKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, taku.sqlSave, taku.mutation, taku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (taku *TeamApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := taku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (taku *TeamApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := taku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (taku *TeamApiKeyUpdate) ExecX(ctx context.Context) {
	if err := taku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (taku *TeamApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(teamapikey.Table, teamapikey.Columns, sqlgraph.NewFieldSpec(teamapikey.FieldID, field.TypeString))
	if ps := taku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := taku.mutation.CreatedAt(); ok {
		_spec.SetField(teamapikey.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := taku.mutation.TeamID(); ok {
		_spec.SetField(teamapikey.FieldTeamID, field.TypeUUID, value)
	}
	if taku.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = taku.schemaConfig.Team
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := taku.mutation.RemovedTeamIDs(); len(nodes) > 0 && !taku.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = taku.schemaConfig.Team
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := taku.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = taku.schemaConfig.Team
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = taku.schemaConfig.TeamApiKey
	ctx = internal.NewSchemaConfigContext(ctx, taku.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, taku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	taku.mutation.done = true
	return n, nil
}

// TeamApiKeyUpdateOne is the builder for updating a single TeamApiKey entity.
type TeamApiKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamApiKeyMutation
}

// SetCreatedAt sets the "created_at" field.
func (takuo *TeamApiKeyUpdateOne) SetCreatedAt(t time.Time) *TeamApiKeyUpdateOne {
	takuo.mutation.SetCreatedAt(t)
	return takuo
}

// SetTeamID sets the "team_id" field.
func (takuo *TeamApiKeyUpdateOne) SetTeamID(u uuid.UUID) *TeamApiKeyUpdateOne {
	takuo.mutation.SetTeamID(u)
	return takuo
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (takuo *TeamApiKeyUpdateOne) AddTeamIDs(ids ...uuid.UUID) *TeamApiKeyUpdateOne {
	takuo.mutation.AddTeamIDs(ids...)
	return takuo
}

// AddTeam adds the "team" edges to the Team entity.
func (takuo *TeamApiKeyUpdateOne) AddTeam(t ...*Team) *TeamApiKeyUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return takuo.AddTeamIDs(ids...)
}

// Mutation returns the TeamApiKeyMutation object of the builder.
func (takuo *TeamApiKeyUpdateOne) Mutation() *TeamApiKeyMutation {
	return takuo.mutation
}

// ClearTeam clears all "team" edges to the Team entity.
func (takuo *TeamApiKeyUpdateOne) ClearTeam() *TeamApiKeyUpdateOne {
	takuo.mutation.ClearTeam()
	return takuo
}

// RemoveTeamIDs removes the "team" edge to Team entities by IDs.
func (takuo *TeamApiKeyUpdateOne) RemoveTeamIDs(ids ...uuid.UUID) *TeamApiKeyUpdateOne {
	takuo.mutation.RemoveTeamIDs(ids...)
	return takuo
}

// RemoveTeam removes "team" edges to Team entities.
func (takuo *TeamApiKeyUpdateOne) RemoveTeam(t ...*Team) *TeamApiKeyUpdateOne {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return takuo.RemoveTeamIDs(ids...)
}

// Where appends a list predicates to the TeamApiKeyUpdate builder.
func (takuo *TeamApiKeyUpdateOne) Where(ps ...predicate.TeamApiKey) *TeamApiKeyUpdateOne {
	takuo.mutation.Where(ps...)
	return takuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (takuo *TeamApiKeyUpdateOne) Select(field string, fields ...string) *TeamApiKeyUpdateOne {
	takuo.fields = append([]string{field}, fields...)
	return takuo
}

// Save executes the query and returns the updated TeamApiKey entity.
func (takuo *TeamApiKeyUpdateOne) Save(ctx context.Context) (*TeamApiKey, error) {
	return withHooks(ctx, takuo.sqlSave, takuo.mutation, takuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (takuo *TeamApiKeyUpdateOne) SaveX(ctx context.Context) *TeamApiKey {
	node, err := takuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (takuo *TeamApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := takuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (takuo *TeamApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := takuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (takuo *TeamApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *TeamApiKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(teamapikey.Table, teamapikey.Columns, sqlgraph.NewFieldSpec(teamapikey.FieldID, field.TypeString))
	id, ok := takuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TeamApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := takuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, teamapikey.FieldID)
		for _, f := range fields {
			if !teamapikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != teamapikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := takuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := takuo.mutation.CreatedAt(); ok {
		_spec.SetField(teamapikey.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := takuo.mutation.TeamID(); ok {
		_spec.SetField(teamapikey.FieldTeamID, field.TypeUUID, value)
	}
	if takuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = takuo.schemaConfig.Team
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := takuo.mutation.RemovedTeamIDs(); len(nodes) > 0 && !takuo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = takuo.schemaConfig.Team
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := takuo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = takuo.schemaConfig.Team
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = takuo.schemaConfig.TeamApiKey
	ctx = internal.NewSchemaConfigContext(ctx, takuo.schemaConfig)
	_node = &TeamApiKey{config: takuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, takuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{teamapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	takuo.mutation.done = true
	return _node, nil
}
