// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/team"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/user"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/usersteams"
	"github.com/google/uuid"
)

// UsersTeamsCreate is the builder for creating a UsersTeams entity.
type UsersTeamsCreate struct {
	config
	mutation *UsersTeamsMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (utc *UsersTeamsCreate) SetUserID(u uuid.UUID) *UsersTeamsCreate {
	utc.mutation.SetUserID(u)
	return utc
}

// SetTeamID sets the "team_id" field.
func (utc *UsersTeamsCreate) SetTeamID(u uuid.UUID) *UsersTeamsCreate {
	utc.mutation.SetTeamID(u)
	return utc
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (utc *UsersTeamsCreate) SetUsersID(id uuid.UUID) *UsersTeamsCreate {
	utc.mutation.SetUsersID(id)
	return utc
}

// SetUsers sets the "users" edge to the User entity.
func (utc *UsersTeamsCreate) SetUsers(u *User) *UsersTeamsCreate {
	return utc.SetUsersID(u.ID)
}

// SetTeamsID sets the "teams" edge to the Team entity by ID.
func (utc *UsersTeamsCreate) SetTeamsID(id uuid.UUID) *UsersTeamsCreate {
	utc.mutation.SetTeamsID(id)
	return utc
}

// SetTeams sets the "teams" edge to the Team entity.
func (utc *UsersTeamsCreate) SetTeams(t *Team) *UsersTeamsCreate {
	return utc.SetTeamsID(t.ID)
}

// Mutation returns the UsersTeamsMutation object of the builder.
func (utc *UsersTeamsCreate) Mutation() *UsersTeamsMutation {
	return utc.mutation
}

// Save creates the UsersTeams in the database.
func (utc *UsersTeamsCreate) Save(ctx context.Context) (*UsersTeams, error) {
	return withHooks(ctx, utc.sqlSave, utc.mutation, utc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UsersTeamsCreate) SaveX(ctx context.Context) *UsersTeams {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utc *UsersTeamsCreate) Exec(ctx context.Context) error {
	_, err := utc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utc *UsersTeamsCreate) ExecX(ctx context.Context) {
	if err := utc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utc *UsersTeamsCreate) check() error {
	if _, ok := utc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UsersTeams.user_id"`)}
	}
	if _, ok := utc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "UsersTeams.team_id"`)}
	}
	if _, ok := utc.mutation.UsersID(); !ok {
		return &ValidationError{Name: "users", err: errors.New(`ent: missing required edge "UsersTeams.users"`)}
	}
	if _, ok := utc.mutation.TeamsID(); !ok {
		return &ValidationError{Name: "teams", err: errors.New(`ent: missing required edge "UsersTeams.teams"`)}
	}
	return nil
}

func (utc *UsersTeamsCreate) sqlSave(ctx context.Context) (*UsersTeams, error) {
	if err := utc.check(); err != nil {
		return nil, err
	}
	_node, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	utc.mutation.id = &_node.ID
	utc.mutation.done = true
	return _node, nil
}

func (utc *UsersTeamsCreate) createSpec() (*UsersTeams, *sqlgraph.CreateSpec) {
	var (
		_node = &UsersTeams{config: utc.config}
		_spec = sqlgraph.NewCreateSpec(usersteams.Table, sqlgraph.NewFieldSpec(usersteams.FieldID, field.TypeInt))
	)
	_spec.Schema = utc.schemaConfig.UsersTeams
	if nodes := utc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersteams.UsersTable,
			Columns: []string{usersteams.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = utc.schemaConfig.UsersTeams
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := utc.mutation.TeamsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersteams.TeamsTable,
			Columns: []string{usersteams.TeamsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = utc.schemaConfig.UsersTeams
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TeamID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UsersTeamsCreateBulk is the builder for creating many UsersTeams entities in bulk.
type UsersTeamsCreateBulk struct {
	config
	err      error
	builders []*UsersTeamsCreate
}

// Save creates the UsersTeams entities in the database.
func (utcb *UsersTeamsCreateBulk) Save(ctx context.Context) ([]*UsersTeams, error) {
	if utcb.err != nil {
		return nil, utcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(utcb.builders))
	nodes := make([]*UsersTeams, len(utcb.builders))
	mutators := make([]Mutator, len(utcb.builders))
	for i := range utcb.builders {
		func(i int, root context.Context) {
			builder := utcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersTeamsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, utcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, utcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, utcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (utcb *UsersTeamsCreateBulk) SaveX(ctx context.Context) []*UsersTeams {
	v, err := utcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (utcb *UsersTeamsCreateBulk) Exec(ctx context.Context) error {
	_, err := utcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utcb *UsersTeamsCreateBulk) ExecX(ctx context.Context) {
	if err := utcb.Exec(ctx); err != nil {
		panic(err)
	}
}
