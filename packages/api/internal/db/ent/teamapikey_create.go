// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/team"
	"github.com/e2b-dev/infra/packages/api/internal/db/ent/teamapikey"
	"github.com/google/uuid"
)

// TeamApiKeyCreate is the builder for creating a TeamApiKey entity.
type TeamApiKeyCreate struct {
	config
	mutation *TeamApiKeyMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (takc *TeamApiKeyCreate) SetCreatedAt(t time.Time) *TeamApiKeyCreate {
	takc.mutation.SetCreatedAt(t)
	return takc
}

// SetTeamID sets the "team_id" field.
func (takc *TeamApiKeyCreate) SetTeamID(u uuid.UUID) *TeamApiKeyCreate {
	takc.mutation.SetTeamID(u)
	return takc
}

// SetID sets the "id" field.
func (takc *TeamApiKeyCreate) SetID(s string) *TeamApiKeyCreate {
	takc.mutation.SetID(s)
	return takc
}

// AddTeamIDs adds the "team" edge to the Team entity by IDs.
func (takc *TeamApiKeyCreate) AddTeamIDs(ids ...uuid.UUID) *TeamApiKeyCreate {
	takc.mutation.AddTeamIDs(ids...)
	return takc
}

// AddTeam adds the "team" edges to the Team entity.
func (takc *TeamApiKeyCreate) AddTeam(t ...*Team) *TeamApiKeyCreate {
	ids := make([]uuid.UUID, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return takc.AddTeamIDs(ids...)
}

// Mutation returns the TeamApiKeyMutation object of the builder.
func (takc *TeamApiKeyCreate) Mutation() *TeamApiKeyMutation {
	return takc.mutation
}

// Save creates the TeamApiKey in the database.
func (takc *TeamApiKeyCreate) Save(ctx context.Context) (*TeamApiKey, error) {
	return withHooks(ctx, takc.sqlSave, takc.mutation, takc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (takc *TeamApiKeyCreate) SaveX(ctx context.Context) *TeamApiKey {
	v, err := takc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (takc *TeamApiKeyCreate) Exec(ctx context.Context) error {
	_, err := takc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (takc *TeamApiKeyCreate) ExecX(ctx context.Context) {
	if err := takc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (takc *TeamApiKeyCreate) check() error {
	if _, ok := takc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TeamApiKey.created_at"`)}
	}
	if _, ok := takc.mutation.TeamID(); !ok {
		return &ValidationError{Name: "team_id", err: errors.New(`ent: missing required field "TeamApiKey.team_id"`)}
	}
	return nil
}

func (takc *TeamApiKeyCreate) sqlSave(ctx context.Context) (*TeamApiKey, error) {
	if err := takc.check(); err != nil {
		return nil, err
	}
	_node, _spec := takc.createSpec()
	if err := sqlgraph.CreateNode(ctx, takc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TeamApiKey.ID type: %T", _spec.ID.Value)
		}
	}
	takc.mutation.id = &_node.ID
	takc.mutation.done = true
	return _node, nil
}

func (takc *TeamApiKeyCreate) createSpec() (*TeamApiKey, *sqlgraph.CreateSpec) {
	var (
		_node = &TeamApiKey{config: takc.config}
		_spec = sqlgraph.NewCreateSpec(teamapikey.Table, sqlgraph.NewFieldSpec(teamapikey.FieldID, field.TypeString))
	)
	_spec.Schema = takc.schemaConfig.TeamApiKey
	if id, ok := takc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := takc.mutation.CreatedAt(); ok {
		_spec.SetField(teamapikey.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := takc.mutation.TeamID(); ok {
		_spec.SetField(teamapikey.FieldTeamID, field.TypeUUID, value)
		_node.TeamID = value
	}
	if nodes := takc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   teamapikey.TeamTable,
			Columns: []string{teamapikey.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeUUID),
			},
		}
		edge.Schema = takc.schemaConfig.Team
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TeamApiKeyCreateBulk is the builder for creating many TeamApiKey entities in bulk.
type TeamApiKeyCreateBulk struct {
	config
	err      error
	builders []*TeamApiKeyCreate
}

// Save creates the TeamApiKey entities in the database.
func (takcb *TeamApiKeyCreateBulk) Save(ctx context.Context) ([]*TeamApiKey, error) {
	if takcb.err != nil {
		return nil, takcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(takcb.builders))
	nodes := make([]*TeamApiKey, len(takcb.builders))
	mutators := make([]Mutator, len(takcb.builders))
	for i := range takcb.builders {
		func(i int, root context.Context) {
			builder := takcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TeamApiKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, takcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, takcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, takcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (takcb *TeamApiKeyCreateBulk) SaveX(ctx context.Context) []*TeamApiKey {
	v, err := takcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (takcb *TeamApiKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := takcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (takcb *TeamApiKeyCreateBulk) ExecX(ctx context.Context) {
	if err := takcb.Exec(ctx); err != nil {
		panic(err)
	}
}
