// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"Sv/v2o0Q/gtXYLq8XP5/AAAA///5gCMAWH0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
