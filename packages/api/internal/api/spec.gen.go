// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
