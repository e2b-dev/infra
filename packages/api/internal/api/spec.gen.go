// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
