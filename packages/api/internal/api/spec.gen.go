// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"u1HO2/5gqoPeX93/XwAAAP//0CO3RgnHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
