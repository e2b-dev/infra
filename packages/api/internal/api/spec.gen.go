// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
