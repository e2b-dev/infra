// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
