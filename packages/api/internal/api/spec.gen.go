// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
