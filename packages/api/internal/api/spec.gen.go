// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
