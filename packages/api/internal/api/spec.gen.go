// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
