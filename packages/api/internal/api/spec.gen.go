// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
