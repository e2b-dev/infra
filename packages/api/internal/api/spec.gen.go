// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
