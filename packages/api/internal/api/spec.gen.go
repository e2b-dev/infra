// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
