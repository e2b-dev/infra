// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
