// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PfwPrkB4fbX+/wAAAP//fN1e17uBAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
