// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
