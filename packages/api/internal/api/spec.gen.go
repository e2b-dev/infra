// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
