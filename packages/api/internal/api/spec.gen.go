// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYQW/jNhP9KwS/76hYTja96JZs0q2xRRtkcygQBAUtjSJuJFIlR84Khv57MaRkSbYc",
	"x9tNUPRkWRzOcOY9Pg615rEuSq1AoeXRmpfCiAIQjPsHarW4ogepeMRLgRkPuBIF8KgdC7iBvyppIOER",
	"mgoCbuMMCkGTsC7J0KKR6pE3TcClsihUDHudDgyO8dyQsS21suDWfT6f00+sFYJCehRlmctYoNQq/Gq1",
	"one9v/8bSHnE/xf2xQj9qA2vjdHGx0jAxkaW5IRH/FIkjJYIFnkT8PP56dvHvKgwA4WtVwbejoKfv33w",
	"3zSyVFcqoYg/vUeJv4BZgenSbDoKOIyv1UoarYo2eml0CQYljIm7xZSAWxRYtTZVwaN7vqxkntAokUgk",
	"NQ+4D/gQTFC4J+X9Zgu0Ph+agPtUdtYT6wTod5yeM2ZuLOCpNoVAtwfwwxnfxJYK4REcygVYKx73OeKH",
	"ltsG6rzQchftfptYcS5BoS/iONgiIQamEgzTKcMMmLfdjR/0OBxyAT2aLDW6YM+ZjDMmrRvtZIHFBgRC",
	"MhVqrC2H4nXW/LUYj5RpU5wHR0qIKyOx/kLk9NW7iGOw9k4/gaItS6+WIAyYnzuUhbP4E8mEt8SmZXiz",
	"flkZYknpXZTyM9SdMyedGYjEmbbi+cfJxc3i5DPU/WzhZvmtJVWq3ZaQmNPY9dklu7hZ8ICvwFhfqPns",
	"dDancLoEJUrJI/5hNp/NeeCE2uUWglq5h0fA3VL/Ki0ykedDRC13Do3ThkXCI/4J8Jq8bOn22ZGiIhEK",
	"N1Hk+e8pj+4P6MxAMhqif1clY0Q9qT+VQymt8rxmBrAyCpLd7Hr1n4q+yTAko146X7YloyG5XHI7tLp/",
	"aEilxKNtuepVqNR2ApqPbvMwwRQ8DxPYQedG2x4ed8Bd6qTeQqaocpSlMBiScp0kAoVX1Vg7NSXKk7J+",
	"pCnfcDD7ruNmD62OEfDEogFRDIR+V5a2XY4zvNLxExjmjFjcWg2kdSmVMPWUeiRuZipz2OeVxliX/xFS",
	"dzUhcQHTKq9ZacCS4MldDbSZrvKELYEZoHTwoFCNKjNKqD/H9PIrxNg1TMPuqvmHO/HV2+6/ssmawAth",
	"uHbAN3sF8RPgCFknw3v08Lo9bIZd+B5N601Czzxa478Lwi1OH4tg29Mesj1/L7QzELk/fSdx/sUNsziD",
	"+GkKXz++58Qbu7r1osuehWV2U9rj6udQCruuxd/tXjwVVN9luQZsG72pQ2Kxcf/SSfEDaXdItM5+WOhN",
	"ZzxB97sM2jMmI4RQGOpJHTzz18Azf0cxG7SNY2b31HgYUyVc971uExpIDdjsJQbdepNxpw7fEBQ1Akyi",
	"ZSgLYKhZLlfwMpMWm9i3m8jHCuKgV59QxfPdDLb0y8dNxheF71Ovt70f+wtku2BX6678J0z1t/XvJIWb",
	"RhdwX/TK5Dzia/+qCVendHMQRopl7kvrR3x1U1Hl2F5fbBSGopQzOFvOElhRIn3I9fanHzrp14OPTJZa",
	"9b8DAAD//2fJHW+nEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
