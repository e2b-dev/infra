// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ri/W/w4AAP//+Nvj+cx/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
