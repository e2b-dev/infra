// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
