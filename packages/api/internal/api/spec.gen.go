// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//81jfgAKFMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
