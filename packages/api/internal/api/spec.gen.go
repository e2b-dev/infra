// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
