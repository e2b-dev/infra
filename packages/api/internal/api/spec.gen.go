// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"CLxAmQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
