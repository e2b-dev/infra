// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UP/vWkcw/4VrMLK6Wv1fAAAA//8Sr8JmeJcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
