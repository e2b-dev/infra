// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
