// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
