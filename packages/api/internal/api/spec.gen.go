// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//TFTBENIYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
