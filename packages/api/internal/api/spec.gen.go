// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
