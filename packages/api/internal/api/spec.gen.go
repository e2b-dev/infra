// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
