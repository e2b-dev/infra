// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
