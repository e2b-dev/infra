// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"EcJ/4QpM15fr/w8AAP//9Lx+BI54AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
