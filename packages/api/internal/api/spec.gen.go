// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x9bW/bOrLwXyH0PB/uBdwkTbsHdwPshzRtd4uTng2apHuBnuCAlsY2NxKpQ1JJvIH/",
	"+wXfJEqiXuzYSZr2UxuJGpLzxpnhzPg+ilmWMwpUiujoPsoxxxlI4PovHMcgxAW7BvrpvXpAaHQU5Vgu",
	"oklEcQbRUWPMJOLwZ0E4JNGR5AVMIhEvIMPqY7nM1QdCckLn0Wo1iXBOfoVlN2j3ej2o04KkSSdQ93Y9",
	"mJQl0AnSvlwPosA0mbK7TqDV+/XgSsBZJ1D7cl2IWZ5iCT1QywHrQF6pwSJnVIDmtrcHB+qfmFEJVGr+",
	"y/OUxFgSRvf/LRhVzyp4/5/DLDqK/t9+xcL75q3Y/8A542aOBETMSa6AREfRO5wgtUQQMlpNorcHr3c/",
	"53EhF0ClhYrAjFOTv9n95B8Zn5IkAWpmfLv7GX9jEs1YQRMz4193P+MJo7OUxJqif3kMLjoHfgPcUXLl",
	"uFyz8TulYE7Z/AOVfKl1Kmc5cEkMl6dwA+nQxKdsfqrHrSZRBkLgOahP6os4ZXNkXyK33UlTyiaRJBkI",
	"ibO8DeHCvUJshuQCUMrmCPS6J9GM8QzL6ChKsIRXCkob+sqX92/eVNWyJ3bHV6tJdHJ2ecIKQ5UGBc8u",
	"Ucw4CDRjXC/F6j9/IYTKN4cKNKEkK7Lo6HW5IEIlzEFL1QkHLCE5rs6lNhFiO0YO4MQcbkgqKEh/pAaN",
	"w80kIkkb/KdEaYIZAe5w7s/hgy4KkoSgZlhcD/FPNctnLK4Jnb8HiUkq1PdGaTfX9RvOoGNFbY5ySG1g",
	"bgFoVqTpEln0DgBqMI/erV6cm8HudeKR66oi8AXg7Pjs06+w3Jy+x2ef0DUs1yetneCdnhun6T9n0dG3",
	"fpqo9V4KxaNXk4gWaYqnKZhTcjSv2PWOYZNrg5c6xC/4Ft3gtIA2wBaAFAt5KSCwrlMsJFKYQXJBRInE",
	"WyxQoT7oQGJ9z0/C2Z3bDfGiGWhZ0DJmnRPfE3F9Tv4Dn9+1p1XvkCD/gaZGQ4Siz+Rdr2I7CCm2D/Tm",
	"K7aGeZIQNQ9Oz2p8X1/CB3pDOKMZUIluMCcK+SEF28bFB3qTfAUuCAvIuX3hcAr0JkG8oJTQudpbL+xJ",
	"ZM7UtsSyJEA7PRjpdwF0tVHUeVaaWYfIbidyUBSJO/mttQPFKJB8VdJ1xmFG7tqrMM+1kChMmS/QTR2f",
	"5rBhvEsuvXnOi1lwHvP8gfPk/ZuQCywRcdgRLZBIAwzA1frnFOhcLgKqRT/vX2JJ7wb17ILrM0wCdAnh",
	"UNH6lAgJybnl3RaBcUpwQMqO1eNyxdYVCp4ZKQEqjReVQM4hVqrEacMh1W++DsLNi9Kq6lOdpfWlzNma",
	"5ur7ytNxq0kEtPNQRbcLqEk/uiVpiuAuJxxGH6xQ1zy91rk3VMt+xvhyeEOf3Tj9jcQJloOOgOWJz254",
	"038fIl6PPhQS8x5TJYBVLJD9aDRWhVQ8OW6T53psy+8f2qIbjWacZeh2QeIFIqK2cnt4DrsRfjzBj4OU",
	"EuSjzRMAjwlqLO741iGizmZa9J3D1dal6os2HYGqc/pblMC0mEeTiNAZiybRLebKiDSO4VWAEp89Lq1P",
	"ZN5sYi28Pvyf0GH4G9z2OkEPdQQaVNPgrsy8PTo0Zbd/qEVyCvIPM0FIp6bstkSBZOVKFoDcx9WCpoyl",
	"gLUSwIVkZ7gQdmMzXKQyOprhVEAgKsMyLEmMlcuSq4/q7IpnEgwtlFixIjwjVFbZgLLSwx6odCAueIBo",
	"5/o5wmmKxFJIyFDMsqygLuR0S+SirYS8Xawn647svcedQ5pPiNd/mYR0nGQoJTdBS1lAzGgi9tY1l7tV",
	"imXRPvdxe45EJRTWvm2Lg7YCTs4uAxMW2dQgvRyHykDJOIO4/NDqHRJQPMeZUp71aYwe7VE+7anitBAS",
	"+DgOsoOD5gzLMhIKEennDgDj8QKE5Fgy3u2gf3Smehdi60cTmunxvndNqPzlbXi/+pPzQmsmWGcWUX4z",
	"bqbq8mEIrdQ4MO3z3yygI/jWWiiI0qFj1Ac8gg1EaUVwSeh8eEo7EJ27uRvzhGeRWBaDSlcJ3bkZqRyP",
	"kQ5tP2s1Bdzd/VTsX66ugfdJXdyDwtlmqzord+C32lwpP07pGH814HDjeAGJDlYHeFe5QgofZhTSl2YC",
	"kaTBD0RCJgJ3OyXWMOd4+VM7fBfaAXr4YEgxlIzQe6tR868DTPJ9SbURTl+MhqW3U0zPy6233Y9CNCjo",
	"nA8OOFE2SMIxUUTRYCmFWJo/CroAnMrFsu2KTKK7VwrMqxvMlZEiFLxqIV8s5OrJ+2qO6uGJP1v1+LKa",
	"t7a9kwWm84AZtD7dG/SyANRsX0AUWV8U59E9hCc2hFeT6LsLaSUswyQg0++wAGReotsFcKhhSXI8m5EY",
	"EWH9RTJNR108AL1p3hc2EOLfA+qwqqKQjnzXHK3tRrS2FWJ61oGcZiTG8mqX2fIzCPsE0vEIMd9nKH4/",
	"A8o/A8obB5Tt3k/ZPJy4o7NsTFyuzJpBmCYoJVTBayQNqYdBOOrNM8z+0Quu46EjH2pGwHqgXZfaXb4l",
	"m/4bTM7Xj5JTZfbp51ZZ7NUxHbicTg3+g2kC55IXsSw4JGqtoq1iRjl3TUIH3LvULq2F8ofP2Z6ugUY9",
	"98THg4ezz57WHpda4b4Y1Me1STiJg6A4iddUCL650RVXWDNUHOfFpYDkLO5Izyu0UOTAY6DScp+DOksZ",
	"9gSF6jU4E+eCSRy4WNOPUaLTZHIcg3JypkvZWm5H2EN9GE5P0pk3LvdhDYgZZL1LrWLi6wENr9Je922w",
	"znWUT+Yx18P1j3cuetxSbdLDoUcgnws8oTt3JsRa9602/KQEAutks9AlaxlK/heRCyNfAZ1YC3t1if04",
	"I04J9qoVlCjhq11fAM4C7owucQhYvDanzgUCpPo6lGIq3ruQQhPEvxYgF1B97ownG4NogPTiFcO3X12r",
	"qWoPho27EISW2WarFWzynUWWv2uH2Z+JoJ2JoD98HqflnmAusaJF18Gs3jkFWj+X28cxo3HBOVB53h1L",
	"v1gAouXpXH3iBdcb4r7mdduXoEIN3e5ZZ0ed5jawOOo0f8KTJ4DgwOYdSbV4tZQBZDak1MgNVY/dsgsR",
	"vncaJ5b26wGZDDGpWZtZv41ehWNf0BX9glD8a/wFnb7iG7QpNU3q7rlSF+pjOY5hveq8IWwqzeWuw2ZF",
	"am4htYzMyQ3Q/jjfBvG4gcOiipzU9l4FIZ7oxNg8l3PTyJgizHmOb+nayNIk7Ttc2ofJBlG4vJimIY1e",
	"N4nssohAZjxiHDGaLr3wKJouA+aKZysJhYVNpaaJhx6Tf6PIWQidRZ5swOOGbObTDZW5H4KranBHRNos",
	"MX3x9LfhC1STM2v0qam4dsDOqV19ldvWvWuoLT00aIk1gjDWcP921SpS1YpOB2NEGZwZGxSp1x/2hmFG",
	"LGCtM4QDFqGr+M82omasKOXXmVttM36C7NGeLhGHnJl0IC2JOsyva0DKy/dgKHr45tyTCedKajoZX/IW",
	"E3uJ7a7UuzN4tyWL4wSk3Hc4gFXj2o8khcs8ZTjAvzkHAXTATZyRVOtDnGo0IPuRq+rRuQ5BNVjwgF11",
	"yVPvGkrDFgtWpAmaAir0OiFBkg2ixq29teEvtpB7+7eEm9zmsfgauNpmICRVvvNM/O7pNznzNMVOsoCZ",
	"qnM5ULyA+Fpfl2GqsI7gDuJCgiNuqe+rpIZORabdh+Bc2hTf0ixbjiZ49OlipK+Hz4OVNqH/lrFltt1C",
	"lKZvCE0zxuMRKTW+trldsNSS31MMGpBmHV5QxGGOeZKCKHHdrYRmnGWfsuC1jn6sYBYCEBYIoykWbVns",
	"5kUF23fMmpEC+/0DZnh58isk5EOGRplfqMb2zedmGWUCOXqcS8iDN0OtG8TaFwGsQB5eEco50yUszYgQ",
	"5oNG1jGfF5lad5XupWZfx+BS2kz8A4tAJaV66mRGDyuvGryZ2ny+vhgrUFuRX/OkJVvLvLoOCK66aUip",
	"t77iutS+Qqet8FjOolqnWcoGpSdwi9SbklPWrD9xpUNELs+VjJi5vJyb48JU404Bc+AfnX9nNveHKwDT",
	"8qU3pYdVsy+k1IJ2nGSE1gDqdkELwIkebhsG/e8rPfDVRb2wzMb3FRz9vyEYZ59e/erjoPr+vMix0r+v",
	"x6zFDe5ejhtxqCk3FlqNDRwwRQpdK6jEm0hlLEYfDt8pgnrpwUfRwd7rvQM1N8uB4pxER9GbvYO9A33x",
	"JReafvuGPK80eQwvMxG6vTWJ5RhRuG3W9Cne0zcen5LoKDpjQnpcIWw/JxDyHUuWW+ur06hMbNyc2bBW",
	"rTfU4Rb7NAUaxISaNrVav0DiBSPTpdc+KjRbufx9NahqTNQ/Vg3ypVWHBkPc/O1qpZxTPNeJ23VG0PJe",
	"Z479+1qftpVhkhRC1sx7/Rxh2s8rZpjPLceNVnB+M7mOCGc1ZL/eSE7trsEBbwcSA81+HkYk2yBraOzb",
	"JyFoTl5dw1JjYw6yo1gDp6m57rVHhGgR7u8gjX414l3D8Xq9s0YaY+Vp1zbF2p21POIhDrLgFJLApp5Y",
	"+IJnQoOEjlzKFhmhmP39hRWzR7Sd6GSfUk+ikpsLCNzH1i7qn5lGXo8pfJHev3e9Lkdp5n5esYrZcMtx",
	"1UNzTXXsPhyniWvE+d418drSjWUccMGMtT9ErjP18ZaptX310PJcRmmIgwFGsdc4PwijKIk3hXGdR/g/",
	"9GsT7Akd3OZ9NAbR1uE16f0lftfDribyPmUJjLA6zLDAon+zL7Zja4y7Mtf9FlZXD7I4zIYe7VBpOs8N",
	"PlJvLRPphe3fmyrVVSdl/g5S7wHZ5jRhwvzmal3X0zi2RDZwOmyv/6pXvz6acGWZ7LNUI+No3Gkv6vpZ",
	"d3vKZspyNBXBbWtxa7TdganZLAhetZtBh40MS1uHAZ1+o0F8D0fIePmuZSb3K11Xju/XpLfk3M+Za3BC",
	"R1nDnwW45HTJ0IykLtpf5RD+F+zN99DvUSGA/w1P49+Lg4PDX3Ce/y3nLPk9+u899AHHC33OY5qYvqMC",
	"ZYWQaAro8sspAhqzBJI93T8rOor0rFUwrSym6+sifvW450qjh8HDDpg28TQzHoxhxoNHPJi8aOy3q9Xk",
	"AdZQPSd+wCt2ZX66ALBxz9pWeD6T78hBLsn+uN5xbdq2RvTrOLvd4h+EqWrqcz+raj+61agd5CWWjlOm",
	"rrBkQKeesCzDrwSoQYo0ab2lCvr0Xl98zqG2kmgSwV2e6q5h9goupCItkD9IInp/e6H7SjHDd5/My9cH",
	"Bw1lNokKSv4swA7QfL5Tgy9YuPMwlWqSzhwj/LiicF/WPfeGmH4laVqp3o7YUkmmc6+Wej0Ts6rCHhlf",
	"aii6a5Km34fVt6vDs9Plqw7O6RLp4oJuHbYjAm5dI2ziBYqq0dQPwxadMr/vsn472cYxjU00HcEzp2bk",
	"xnwzCWYfKe0tA0X0wrQcrzJNSmITijKSpsS2SOrwJnTSU82VaCXe9zcUbTlL+E6N9mq6+lbZsaqUZKS+",
	"qqpH1IE6kNdr9vQIoqipvokgGs76KY1KGocMU18gs9LOHCGTnUbpA8TykpI7TySrbDXMy46LuivzDU4n",
	"Xq+yiR5qOrdUJYE7lM8QWNC1jb54jdga0GSzja235KvHuH9vVKlvGq/wBfkRrOkXKve56zwYDn3oxoSN",
	"zgc9kY5S6k1Dw8e2wU0HhpoNriN9Mabm5NOdGHdJefvrckNj//qdcQmHGQexgJ6cvi9mSE0s4U4CTfTP",
	"8EhhC/tNQ8mRbPSlnPehrLRZ+K2eCpsUZsGBPAj7pqGGHR4q4+sacomwbqlZaW/dC+DOaOU3vygba6CR",
	"fCNbfORlRUONGsw+kmfyDDhYyX4f+6r3G2g68+ET8WffMdvoO/t8Q8RWLT9a6OSF6mivq2+Yxc9B+q2B",
	"mz1999BFuG0munOKyrv4IFXvE8u8e+gEp6l2lhdEKJNswRKUFakkeQq25JzdAL/lRNrq84uL0wkCHJtW",
	"JqgQ5nNwBbh+5zFR2fhqVM6Ies9QBlgUtqbTbc1p6r2RQnxRdkt++lOm1p25WQ6vNlcdHBU9fHzZUqjO",
	"Y6jdDHWT3y+xq7zaymkkLGuWrWEt9B/NRpeAs5Hp1EH3+8K+eMwLaF1W8sB7Z7Ohx7vfaNYZ9ZGxlhOh",
	"nnmk2r83Va7j4if+vZ5XlxWm4oUGvGn0xBbf/gydvKzQidcd7EFxE1l1Ettx0OTNmLFvno1Crgm4ye0Y",
	"pY/d0KA0Vy8bQhzi8bLHYBebj66fv3rsc8Dmwjz4LHD4ev7nQbXW0TU1PQlDPqfswiMMtioZ5Rcebn0N",
	"XY6hKWJXbiGOY8ilC9c9uxSJbbBMTc0oW8J13BlbdNPBTGZEyU4Xfiefde2I8tPxIdlap65tlN48vWT3",
	"1tN0C7X6bCdk2J1yqDcn2LioptVarrOw5kVK9qQzzGgUHKYjj4Lvg2m+xxPlBZwS++ZnEPfvbXu2VU/w",
	"Tzt4fnucUUxnfkfuXdn9bXMOnAyOdj3mAgfNYVjDGNIuvJ+LebGU3a+6CnbGFxqdgLqKrIbIfO46/D0K",
	"sVsRik80gbuqwY4N905dA8jOpKuyl6PfbTiU4MTm4p+zmYCOLKe1U5w6ghXut1HGabHqx2B2mjJVbyq6",
	"ZszA6dlnGZQNy+PY0MAGEqp7WO3fL7BY9Fc8YmqbS6KU0GsdbsJIYm46UCqymh+ydDyOl2DeiZHS+7Fs",
	"uvVAmdVsnGNdz2u5eGHAdifyDzT5GhWXeL0b/vbaj3bYBj5dbGdQ5h5qnrdUegGJRbuTj5vDdeoDe0tZ",
	"vh6+5MrA1lH30Sy2Wuh0iRgFxDjKGDdVpRoToypv7A+/bZaNV/0mXusnkJe6J5g6EwOn9UnBBeMK86K0",
	"MHVB0YyzrANZFO7khd/BbRy22unNeoO6s58+qPSvR+Tml6C2lNrs0nLM+9IMeL3LC4CfdZ9PcPN6c1gP",
	"+D80lvv18CmiuV8Pn6/3bXHwompBB47FR/HaPU57Dn77jhnd9Xsez+bPK2zwUMbSAPmNI6Tuc6+7nYqj",
	"/X2ckz04nO7hPI88CPfV3WJ1tXbfqNitP9T3oP7ftfZ//gvXTWh1tfq/AAAA//9t4MC9vJ8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
