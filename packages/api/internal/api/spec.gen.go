// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
