// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
