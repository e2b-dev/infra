// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
