// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vLgsNI23AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
