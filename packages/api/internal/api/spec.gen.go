// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
