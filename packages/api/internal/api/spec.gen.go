// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"tSNZXa3+EwAA///cLFmKJJUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
