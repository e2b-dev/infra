// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9W1PcOLp/ReVzHnaqHCAkO3WGqn0gJJllBzIUDZlTlaFSavvrbi2+jSQDvRT/fUs3",
	"W7Yl2900lyQ8JbRlXb77TZ9vgyhPizyDjLNg7zYoMMUpcKDyLxxFwNhZfgnZ4XvxA8mCvaDAfBGEQYZT",
	"CPZaY8KAwl8loRAHe5yWEAYsWkCKxct8WYgXGKckmwd3d2GAC/IbLP1Tm8erzTotSRJ7JzVPV5szy2Pw",
	"TqkfrjYjw1k8zW+8k9bPV5uXA069k+qHq86YFgnm0DNrNWCVme/EYFbkGQNJbW93dsQ/UZ5xyLikv6JI",
	"SIQ5ybPtf7M8E7/V8/0vhVmwF/zPdk3C2+op2/5AaU7VGjGwiJJCTBLsBe9wjMQWgfHgLgze7rx++DX3",
	"S76AjOtZEahxYvE3D7/4x5xOSRxDplZ8+/Arfso5muVlFqsVf3n4FQ/ybJaQSGL0749BRROgV0ANJu8M",
	"lUsy3v9jcgpzwjhdSolK8wIoJ4rG8TXblwJTCLZY/NIilT8mSA1Av8ESHb5Hs5yiDwenCDeIKAjb7BSK",
	"ucXC6oDdadUzdL0ACogvQM5K9U4RYSjJI8wh9kw9gYgCrzbvXkMNsk8wfvvqh/asZ8sCUD6rN9qZCLIy",
	"Dfa+iD0GF6FDftUS6Yt6GrbR4DygDdB63nz6b1CE9k4okqN8/iFzYjqBK0iGCOwonx/JcXdhkAJjeO4A",
	"wVE+R/ohMmTtgB/jUHRfnnAoEMkkwqXqQwXNJXYoCJkdI57Lh0k+RyCP4sINSYFxnDoWODOPBJbaE81y",
	"mmIe7AUx5vBKzBIMYqhaqgZJqKF5YcA+4ZiX7BSwZucW6BVS9F8xzHCZ8GDvy0XogCyokW1wMLkComqJ",
	"MCAcUjaEziZJVDQdYErxshfHxxq/14QvuuuHKCophYwnS0ShyCkn2RzlWaL4S4oh/caKlMEXmKMZJomL",
	"71uYMZsXWDg4OT/ISyVfW7L45BxFOQUmtyaPoiwZmxxIxt/sCgSTjKSCfV9Xi5OMwxykfjzIswwiPtHv",
	"d/AsSCUvuZsm85ILumcQ5VnM0IzmqdyNhiQSLyM840DR9YJEC3uriC3yMokR3BSEQu/Gd7obdxC02KVL",
	"hhxQEES3X9vQ3VNGegwf4D1liCMuZkHyJSUfx/BgGBCHMjqMhaCdEaCGt+017KnLkjj1RorZ5RDT1Ksc",
	"Y3ZJsvl74JgkTLyvDMz2vj7hFDw76kouA9QW5BaAZmWSLJEG78BELZzK08rNmRX0WUMLXRc1gs8Ap/sn",
	"h1pvroff/ZNDdAnL1VGrF3gn18ZJ8vss2PvSjxOx33MmiPkiDLIySfA0AWXRj6YVvd8xZHLpsidO8TW6",
	"wkkJ3Qk7EySY8XMGjn0dYaZ5nS8Iq4B4jRkqmRR6TiA2z/wklO09rosW1UBNgpowm5T4nrDLY+CURKxL",
	"gzFckcixn/fyd2QovQ2EGUmALRmH9MxpvH2sniPxLvobbM23QgQ3/G2IbmbsJ6fMEHrlJCcu5XIsnqFC",
	"PDRgiok8s4PxOU7eLbk5YIOvxDPEChyB0BFTOcqmU5Lxn98GLp0kiMYzqyDAdSZtq9n6/KFBTAfU9kYa",
	"ZzWonpD/wPE7B0YJu0SM/Afa6lns+Zi8W1XZhcGH7Ooz1vGiOCZiHZyctMjL3sKH7IrQPEuFFr7ClAg+",
	"c1kLXbL/kF3Fn4Eyp4+jHxi6gOwqRrTMMmEqaQPYO3cYKFevK5zz2EHXcjCSzxzg6oLIa/apVYc4XC9k",
	"218faZ4epngOtqsZEzF3SjLM1VlSXBRiQuV4+sSU7bCGwTwqfAN/PTixBtJqZc9oyIDipHrjLjSwXX7S",
	"cSNx6rswyDMYoZPsbd6F/WPtnQ6Obe9TwNeeoEMUDKjgyv0oEqz6L+aixokag/Qg9K/J758kjf96cPII",
	"zrDA4lhn2HEcl63ahlMHLAVm7DqnDiV8op8I56pkteihNTVtHALV3BeOyUsG1K2Bz/WT8Vt1A7VaIazh",
	"4oKq10bogFcod4g/C4vohMKM3DjgLH+Xho0QeeoNdNUUjMpByKnPlrLWmZQz5zrq93uuU/QfQnqmxECH",
	"daZEGtCdeaXNeATZnC8c5qD8vX+LPsWsN9xcIXTgxQVDIVSOCOMQe91ZnBDsUJf74udqxzrU7rTzEwIZ",
	"V1H6GAoKKpynLdghc1297Zy3KCtfv0+QVjGBu1CoIssE6XvLMlbuBPd6HSF0vYCGGkfXJEkcPnqvMwRN",
	"E6I3+msNlUo8zely+EDHZpx8h+MY88FAs6aJYzO8nR8aQl6PYcM4pj3upQOqmCH90mioMi5octwhJ3Js",
	"J680dEQzWkVyVMiGsMbOtcMzLKLtfJWdZ6s4yAabxQAWETRI3NCtAUSTzCTrm0CvIwwnDtXBo1FjMUzL",
	"eRAGJJvlQRhcYyqVnLQbXZrtGN8I5115eg6UA05RKh/qWKMVbu1G16yYb7886USB9RqrBIKtMPN55tIM",
	"vYsIRSReU87+30zcj5EsAgRFHi1+ahnrHg9PSnd3xCjFN8IRaoYldDYRYrMd7WzMyRVkSExMr3BSL5WV",
	"6dQTJjSIaMLBbEnQ0XFU9DhanTzV8cEJivJsRuYlVcnHrpvlCXXUJsqxJfjaUWvxZB1P8vXu/7lg/wmu",
	"e2Oh940HtmAup7tQ6/ao5SS//irxmAH/qhZwqekkv65AwPNqJwtA5uV6Q9M8TwBLvYJLnp/gkkEjWTHD",
	"CQNHIjlPsTB2k2SJCvFSUwKqeLYUlzrq7FoRao99QP/JYUKPKbLrVXtRcV+NB1FJweVKid8RThKkg0lR",
	"nqZlZvLpUo51NKB13tUUjSGQXlurkXrQKHv9d5dUFKSQkCtnvEULqa37Zhjq82li7os3by7yWLOPjpK0",
	"YidJyTjQcVDXg532Z56mxJVpkr+bCXIaLYBxKmMf3ij4R+NbtU4vZbKYqmlLyNTY2NCgemVSSr6HVVZh",
	"1TvjVhoXgM9U2Kjr4NVR4D4OFUg1AeNGBdTqvkWWpzj27kcDw5NP7AANWBXWyzP7oA3IeSJxrLJBZQ51",
	"eE09EE3M4i1eda+iIiqHGeM4i5xyx8SHiB5Tu7qD+NOJ3hHoU2lyadSMjJr2c1Gb/03dm0xBdA8dWiKg",
	"2nYL3zU5dhmoybQe5NVnqySFEUkqlOIQTDhaQCyT9Q4uFV66AIcapYomGCJxi9qqggBP5KpO+r/IwRc5",
	"uIIchB6aHBKBo6pUmmEoB8G+iK8R4kvJJ1uSDAuwjqSqidDILCtF266qjI3Dyzq+uvBRJCUenJz38Vs1",
	"DlVlOiMVZ/Wm8vk8KdB9mbxsrqRCJqvmWe2goyt5m1VnqguOVjcHoqI8ARqB0wgQABeTl7Iyq1DjVDna",
	"mLljwi6ZK6XOZbmVwaWq4MLRQmayt9M6wz2Wn+3MvrPmTMD/bDAdnikCWwdZ6q1zf2r8kzW3yRqsnSBv",
	"ELuHMhuo7W7QEdOzAGRwZ3hyUkmsbuiuZC15V+efcCxcqJhiIiS1ZHpZz6b+KLMF4IQvHAmqMLh5JaZ5",
	"dYVlDomJ+eqNnOqZ61/e12vUPx7Yq9U/n9frNo53sMDZfHNe3GDNz+pqoEUGegJxilNgZdqXWWmGWPrV",
	"9oaCLE8cIbgLg28u0RTnKSYOJf8OM0DqoVW+XoXaKJ7NSIQI0yE3Mk1GlXBBdtWuvGwBxK6olGJLyurs",
	"Km5GoDabZ9pU4udZp1fa+RFNqz6P7SU1+gTc8QiZ2GfIfi9p3pc079ppXn32o3zuvsajMpXNxCvCWYwS",
	"kkHHq5M/OucRT/ruAj3RfR254SYcPLejZgR08M1XM+oLq9V5yUe/YfVUUJX7t29Daeg1Ic2GL0I1nRda",
	"RrykEIu9sq6IGeV7thHt8D8TvbUOyO+/Zne5Fhjl2qENBwtmx5bUHle5bN4YlMeNRZyFGMd26cJYgeAP",
	"inzqhkPGlSZHRSnc4pPIc5WrL/gxS3LMu4UNSmZKf9oXa4hlFbq3VN4faRAvui96yMJ2b2yhN3bRu9We",
	"iEjvpO5dHg/EQPxT/pjlOCsUyVjq2yLqGhcWqi06sonVkg0TY+msVKylg/Ky5lfeLnJVaFWZxD8IX3hv",
	"5DSSAT7pNM7WFPLnrhM9qeYXpz4DnDq8Ltl/w2GY60tUJl7BxduuO4XsvYl8tKf4YwF8AfXrxsbToZLW",
	"lFZYZbh6wbebujHGsA3qmqFjXepWGrrKWwPLPrWB7MvNP28U8Ie/uKepx3l5dEOFnFGe6UvPE3+G8WwB",
	"Vk6lfsVKObbYfYRxYSfsT50C1VXdoX0yYXTo+Ocoo+NFQQ4pSAcdOHBkKE9KgY7MglQH6FoX2cTP5pgl",
	"cxcwjJMe+u0B0eHiJbU3tX8dC3RHEsEXSwRXNHF8pYesFRm00CVemsEOIdXEy3wcX1kdroagKQSsqauY",
	"lYnuASJYWdUn90VNp3WrjSGJaQBudedYNz46oBXrSFYDenVQ6IlU4/o3XtaNVArUTgp8na0MLEkU99Oi",
	"a0RJi3KauFRZ0xbU2yQMqfEop6rTSR2+RtOlw06zjEQmoLIuH7bh0uOSrRXZdFFjWcRr0LxCo3p1zTCT",
	"HSKtO+ONiIRqZNrsah/DZrA2pTbw0xCaTW4IK2HdFEW2gJfypivlVxCQcqjTNB3bRUjuQQXRWBVU21jL",
	"oDp8NmIDK2krWrVPGtxgo9/S6OS9Rylsim3G0XJVt+WOBTb2+JEkcF4kOXaQVEGBOeuEbPE1I4kUXTiR",
	"5R9Iv2SuBMlyMafEKqnDqDqniZXRk3PrxkRTQKXcp2xYNQgas/fOgU91J8TNJ1zXSYzm0SVQcUxHdK96",
	"Zrkh/uXXUU8SYwepw0aVBTcoWkB0KTOPOJM32eEGopKDQW4lmuv6EK9skS6Ocy1ph29olQ1HPCz8+Ajp",
	"8+7zIKV18L9haKljdwAl8esC0yyn0YgrYLa0uV7kienqVwsGOZEkHVpmiMIc0zgBVsHaL4RmpqmIAwji",
	"Z9MTATOE0RSzLi/6aXHmaljSh5puhxM9i+3btWMiehf32Of3JwUYh2KwEaKpLxdj+9Yzq4yybQw+JhwK",
	"Z6quk9J1WQwDZZedrZlgvPxbReOvMdF1kKYq03+BurHp3naazZVNX81ubTYdNOD26bxMBejqEkCx+irG",
	"nOwP9U/MHD0vxK8GWnJYlX6yVuoy7OrySEy1EUHU3/vFv2tXKxZbAp9L/8Rr9DyWgyr2qbayxj1NuJbt",
	"2CpKWfGyprlnS/hyIthUrWXVYe2Xqm/KFDAF+tH4lOpwX829asni8lByWL36gnPJ6/txSrLGhLJx+AJw",
	"LIfr1uH//0oOfHXWvK+tkyliHvm/oTlODl/9ZsOgfn9SFliogNdj9mIG+7djRuxKzI2drUEGZjKBCtnV",
	"QfZa4MLqDT7svhMIta6K7AU7W6+3dmSbrAIyXJBgL3iztbO1I7OMfCHxt63Q80qiR9FyzlwZfXXPCqMM",
	"rttX5QXtyfTSYRzsBSc54xZVMN3ZHRh/l8fLjXXYbl34b6UpdWit0SV+d4Md2x3tV13t2zuNVSG2QqrJ",
	"0mok71qt2v62GFS3KO8fKwbZ3CrDky5q/nJxJ/QYnstrAk1CkPzeJI7t28YXG+4UkSTAne0fxe8IZ/20",
	"oobZ1LLf+iiE/VkJT5S1HrLd/KSEOF2LAt4OFIuq89wPSbpV/tDYt0+C0IK8uoSlhMYcuOe+IE4SlVvX",
	"KoJ1EPcrcCVfFXs3YLxaF/2R9mCl7brWYLfHvoU8RIGXNIPYcagnZj6nTmih0KBL2CIjBLN9PrdgtpD2",
	"IDLZxtSTiOT2BhzJ70ZVxDOTyKsRhc3S27fmqzejJHM/rWjBrKhlv/6azori2Lw4ThI3kPOtS+KVuRvz",
	"yOGCKWt/CF0n4uUNY2vz4qHjuYySEDsDhKJTRz8IoQiOV9cwvSr8n/Kxije5FLd6HowBtHZ41ZWPCr6r",
	"QVcieTvLYxhhdahhjk1/0g82Y2uMS9vL5kSyqe/6Foc60KMplbbz3KIj8VQTkdzY9q1qZXDnxcyvwNX9",
	"bt1G0I2YT6YhwmoSR/dRuAtXuR8sfea/SpDVVtplbrRbqNA9VAh0cU9yGqIdfSdxNL1Ud8GfpfQaR1pe",
	"M1VeEjcfp8lnwmBV1967RuomSOqBVFjn1vtd92t0bttG49ZAQFYeySm+Bc01Xqw0qs/7Zb1pRGO3RemI",
	"F7vgsEUJnhs2UjSoQDXP0YwkJs9R14nKr0mgP2Wr7X/gafRnubOz+zMuin8UNI//DH7aQh9wtJDmBc5i",
	"1bWTobRkHE0BnZ8eIciiPIZ4yyOQqnudfZ8xvHhcddbq3nM/vdZFniTGnTHEuPOI+tAKAn+5EIpmbSOs",
	"ee9hwBk3N06rj0dZeequwLOJ/IH88grtj+uUN5btSkT7SrHfG/9BiKohPretHmN+MWp3AlJVueOE6XHd",
	"DapPph7kaYpfMRCDBGqSZjMxdPhepnzn0NhJEAZwUySys6fO/LlEpJ7kK4lZ78df/ZnMFN8cqoevd3Za",
	"wiwMyoz8VYIeIOn8QQ0+5+Ws+4lUdT0jrRs0/aCscFtdwe+NbP1GkqQWvZ6QVoWmiXWtfzUTs24IMDKs",
	"1RJ0lyRJvg2r76GUp9fTrBXndImkz+aXYQ+EwI1LhHW8QFa3WPxhyMLL89u6+5k/OX0qYccq4onVpbst",
	"dDhrtsViqitXHCLCVeuZKSCqeoBtobOzIzFElmTADYdMG/g9BltFhLpn2r1pcfPGX+tbqONjro9tAJrS",
	"Z3MX+i58KlNUU8SjmaLfKd+aCwhecW9grgvsR8j6IzVybR4LnfWSwurijj4sTH1Lqi5Mq4Q0yVBKkoTo",
	"y5eeKIAs03SHJM3doP5m/Z0gh/6MSH3ftm+Xnl0lRDWQrXdVtxncEYb0av0CH0GFSqyvo0AVZb1wo+DG",
	"IYfSZsi6W/AInvQ6k/dgy+p+s2LJurgV06pfuflATmi1uwzl0Pqz3PVBHog/XdOCvHdus9eIo0EWr3ew",
	"1bZ88RjlOq0OIuvGGW1GfgQv+Dvl+8K0r3XbzrK7basrzRiDV3XFfWzfWZnvDcNMRugjnFmm/ENi/u3O",
	"L2PG/vKNUQmFGQW2ANbnZckhDbZUbpL8UDJnuumK6kk8koxOq3WfxnNqfc1cf+zMUTZlfwatFsMGDrXx",
	"dQkFR1h2Za6lt+zTcqOk8pufhY018JGm1v2WkUnGlhhVkH2kiMIzoGDB+03y7W/lopp/ryH71IvP0Ndv",
	"tTN/vskev4f9IrVXoHmrVbxbZk+A2/3m243it9CZuxczujGiy0phkrT96cotdICTRLrPC8KEkbbIY5SW",
	"CSdFArpPRn4F9JoSrltmnJ0dheqzFXLCkqnXAZm+UVY7S1Zb/WKU/LiFUDApYFbq2+3maEZ2j43YnVUt",
	"+J9e7zRa/rd7eIjD1aqkxocNL32d06uYuh221/laoN7lxUb0E9OkWfUb17P/aFY7B5yOvI/hdMjP9IPH",
	"LCWR99LuWUGiDvR4mcr2RcU+NDaqm8RvFqq2b9V9/3ERFTtDb13sdGPxTE68bjxFtyF4CaZ8X8EUq5fj",
	"vSIpvO77+MBhlDdjxr55NgJ5kMG3U3zTy+Tc+sK3i+G9H/YeIQaO8c2LJHj2kiD0dGnnuWBCSuAKGlSi",
	"vgOviqU89aNUNknz10WZbhV1c86vrNud86tExlcq+3M+bgn8Mb6xZdeLrNq0rFIVpaNsRzPUKXLqhy0x",
	"46LMqnu1jxFHdz26eGybVVfg3ttuNfB6wiq7ta3ZevejrxT3FC7btPMQ8Sxny7lRUa3dje/BF9ZSPXxk",
	"AUsUQcFN+uHZlWpugmQagkcYSqZz4tg7xx5iUiMqcjqzOzKuavtUr45PMTWao27i5vFz5PXeC8Z+Nhev",
	"PQhiHk5cNLs1rX3LuNPf13vT+PmXZT+owjgFJQRxNlJdfBtk9C1qne9Ak2zLs7HtW92K964nvSEdV7uJ",
	"4SiiU59df1d1+l2fAsPB0aafsEMZ7bpljkLtwvrK4neL2e26HbQ/uNJslui7hz6E5onp5vwoyO7eaM9i",
	"uKl7EOqE1tT03/YWmqovtLQ+K+Eq6szn7PfZjIGnsnPlsk5PEMZ8UnCcFKu/ofigkYZmT/cVIw1Gzj7L",
	"tJObH8cGFNbgUNnmc/t2gdmivykEznQjcZSQ7FKG0TDimKpu4wKt6svyhsbxEtQzNpJ7P1Z9Se/Js5KM",
	"CyxbnmgqXqhp/cG1gT6oo6IZrx+Gvq1W8x7bwMaL7gKfmx8lzWssfQfFlA/HH1e7q/Qy6L12+3n3e+5i",
	"0FF1H9Vm641OlyjPAOUUpTlVHTAkJEbdEtbfS16vArn+lHSr6THjS9k2VehEh7Y+KCnLqYA8qyxMefl5",
	"RvPUA6wMbviZ3eR2HLS6VzrkAXXmoKSZ/JpZoT6guvp1jj61//ohU5ovPSmeoJbkareZFrhvfPfz7lNE",
	"eD/vPl9vW8Pgu+pTMaAGH8VLtyjtOfjpD0zo5lse48n8eYUJ7ktYckJ6ZRApv2EkG8Czve1tXJAt2J1u",
	"4aIIrBlu6wxknYC7bXUTaf4os6X2342OyPYD02Dx7uLuvwEAAP//SYcEz9m8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
