// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"v3DFqOvL9b8DAAD//wnCkGUmgQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
