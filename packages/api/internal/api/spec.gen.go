// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9f+utab0H7hOV/eX9/8fAAD//wtIOMQsqAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
