// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
