// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
