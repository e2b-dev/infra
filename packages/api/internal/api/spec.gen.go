// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
