// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
