// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"BK+AAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
