// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTW/jNhD9K8S0R8VysulFt2QTtMZegmwOBQIfaGlksSuRLDly1jX03wuS+rSVeANk",
	"95SIHM7Hm8c39AFSVWklUZKF5ACaG14hofFfQlriMsXVXfiCBDSnAiKQvEJIxgYRGPy3FgYzSMjUGIFN",
	"C6y4O0l77awtGSG30DSNM7ZaSYs+zvVy6f6kShJKcv9yrUuRchJKxv9YJd3a4O93gzkk8Fs8JB+HXRvf",
	"G6NMiJGhTY3QzgkkcMsz5lJES9BEcL28/Pkxb2oqUFLrlWGwi+CPX1HwVzQ7NF3QpmuIR/xe7oRRsmqj",
	"a6M0GhKhHSh3oePHfRv3+Lk1WzfR2NuTuq1FmZ063bjlz67g7z7kNNc7lX5Dw7wRS1urCHJlKk6QwEZI",
	"bvYQHacUQeZP5qLE17y6PdZBPeOhL3d6eHXHVM6oQIZDeRFTstwzbdCiJCZODJgtVF1mbIPMoCtnJuQR",
	"jh0yudjCpB4Pre/eCZqpymbq9cbM742wE5I+XQ1ZCEm4RU/DCq3l29ccnU28DdR5cemuWkGYybgUKGkW",
	"6MxdkVyg6QAPtu/p1YmLcUtyoyr2Uoi0YML63U63WGqQE2Zzoabidy5eZ30WtFBBNJXOHpy1v6eY1kbQ",
	"/qu7rwG9Gy2+4N7JSa/EBfIMzaDFf1/cPKwuvuDolnB/KmiDkLnyd1qQuypwf3XLbh5WEMEOjQ1lLReX",
	"i6WrXWmUXAtI4NNiuVhC5HXfZxKj3IVRoezMRf7sAWWcSXwZNwG8U+MFbpVBAg/K0r1zFeBBS7cq2x+p",
	"YlWXJDQ3FDs2X2SceBCoVGUO3BldaU8/dQgMsrr9T+iRDp7V1VNRa6bNdGPueJRdfaSyj+Cb0/c6TdHa",
	"vC7LPTNItZGYMV6WY9ztaNbNxeqTj53RMJretnVGLiHiW9uS2gbuxgXyMrB0izP8+Mtvs7TA9NsJJ/5E",
	"Cvswj+rU1WOgDXvhltkei/fV62GNu7v4A7yWg3Z4WTnSmlmar3r3b3H9A3lyjqJXHxa61/sZfj4V2A70",
	"wnWIuHFK69uz/JH2LH8JdYfer6dciA+DRDexwdygLd6iyGMwmQ4Y/E4onVYxQZaRqJCRYqXY4dtUWfWx",
	"H/vI0eR5/jxf6WASj0ZMsz4hwfVpBUeKEuJm0/n2zp5chzg/96Ub3j1twh7rDv4LJhWxXNUye73ro5Hr",
	"YR0P2+e1g876p3QAvTYlJHAIS028u3QjlBvBN2WANuwEdHNel+4NVhBpm8Qx12KBV5tFhjtXyLrP6HD8",
	"k8oJd7/o9bVZN/8HAAD//wlc0ryvDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
