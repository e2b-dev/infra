// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
