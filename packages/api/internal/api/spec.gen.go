// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
