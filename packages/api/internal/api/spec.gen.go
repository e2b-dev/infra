// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"OJkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
