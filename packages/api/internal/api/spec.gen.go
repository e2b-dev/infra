// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/4hMiWXuWgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
