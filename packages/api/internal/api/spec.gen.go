// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
