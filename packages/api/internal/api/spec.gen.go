// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
