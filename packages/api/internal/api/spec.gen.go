// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
