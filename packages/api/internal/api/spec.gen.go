// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/6kQSE78eQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
