// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cJqkgpkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
