// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
