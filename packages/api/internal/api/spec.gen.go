// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
