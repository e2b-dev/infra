// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYUW/jNgz+K4K2RzfO9boXv/Xuultww1a0BTagKAbFpmtdbcmT6PSCwP99oGTHduw0",
	"TXcthj3FsShSJD9+pLzhsS5KrUCh5dGGl8KIAhCM+wdqtfhED1LxiJcCMx5wJQrgUbMWcAN/V9JAwiM0",
	"FQTcxhkUgjbhuiRBi0aqe17XAZfKolAx7FXaEzhGc03CttTKgjv32XxOP7FWCArpUZRlLmOBUqvwq9WK",
	"3nX6fjSQ8oj/EHbBCP2qDS+M0cbbSMDGRpakhEf8g0gYHREs8jrgZ/N3r2/zvMIMFDZaGXg5Mn72+sZ/",
	"08hSXamELP70FiG+BrMC07pZtxBwOb5QK2m0KhrrpdElGJQwBO5Q3yKh4KUSDNMpwwwY9LQEu7gKeFkt",
	"cxmPFf2RAWZgdlUwaZnfwrRhWuVrJuIYrJXLHNhy7eQRRNHZWmqdg1BkzKLAyo6NXbv30ycGVRU8uuXL",
	"SuYJHZoqQSRrWnJRuwsm6rCrrNttHTfWtz7f1QH3iRlFN9YJjI/phJlbC3iqTSHQVTS+P+3clQrhHhxm",
	"C7BW3O9TxA+duzHUaqHjLhr2mDhxLkHh8yDhZafQ8BJUsdTogj1mMs4IHbTakhyLDQiEZMrUkCkP2Wul",
	"+XOTPeDZbXDuXIlBXBmJ62sqNR+9c4fhG/0AigiIXi1BGDA/t1n2KP8LSYQ3ZerQ7cS6Y2WIJbl3Xsov",
	"sG6VuUaQgUicaNMK/jw5v1ycfIF1t1u4XZ4opEq1awUSc1q7OP3Azi8XPOArMNYHaj57N5uTOV2CEqXk",
	"EX8/m8/mBHKBmfMtBLVyD/eA41D/Ki0ykef9jFKNELYc0y0SHvHPgBekZacLnR5JkRKhcBtFnv+e8uj2",
	"AGv2iKAm+LdRMkasJ9m0cllKqzxfMwNYGQXJ2Luul01Z33oYklDXCJ6WJaE+uJxzI1jd3tVEV+LeNli1",
	"rqxLbSdS89EVDxNMweMOKQ6zc6ltlx7Xrj/oZL2TmaLKUZbCYEjMdZIIFL6PxNrRKkGeKPYjbfmGvd03",
	"LTa71OoYAU8sGmL6rm2NaWlX5dDDTzp+AMOcEIsbqR61LqUSZj3FHonbmcoc9mmlNdb6fwTVfZqguMB3",
	"utKAdT1wzIE201WesCUwA+QOHiSqQWQGDnUNTS+/Qozt+NefFet/WYnPLrv/S5HVgSfCcOMSX+8lxM+A",
	"w4GHaHgPH140zaZ/p9jDaZ1I6JFHZ/xvpXB39joyg82Efkj27K2ynYHIffedzPMvbpnFGcQPU/n163s6",
	"3lDVlSdd9igss9vQHhc/l6WwnVr8TfXJrqC6KcsNYOPJedwkFlv1T3WK7wi7Q6R1+t1MbyfjCbjfZND0",
	"mIwyhMLQTOrSM39OeuZvSGa9sXGI7A4ad0OohJtu1q1DA6kBmz2FoCsvMpzU4RuCokGASbQMZQEMNcvl",
	"Cp5G0mJr+2pr+VhC7M3qE6x4NnFfHPKXt5sMLwovY6/Xve37C2RzYBfrNvwnTHXfHl4ICrfNrNqgVybn",
	"Ed/4V3W4ekc3B2GkWOY+tH7FRzcVVY7N9cVGYShKOYPT5SyBFTnSmdzsfsiiTr/pfTKzNKr/EwAA//9E",
	"BAAsdRMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
