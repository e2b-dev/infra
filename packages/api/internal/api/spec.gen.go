// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
