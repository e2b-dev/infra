// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"9+9Wj1T3gW25dnN6898AAAD//yuTxj3LtgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
