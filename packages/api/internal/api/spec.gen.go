// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
