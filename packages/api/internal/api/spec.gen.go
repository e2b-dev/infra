// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
