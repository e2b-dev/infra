// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RUvdvxt9VN0Hti3b7dntfwMAAP//OKg1a++2AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
