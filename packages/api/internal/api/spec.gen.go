// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"b2mg1vxp8eZDEzOvr9b/CwAA//8aBvPPXF0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
