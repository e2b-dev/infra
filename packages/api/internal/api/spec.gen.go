// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DgAA///Y9ezuTIEAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
