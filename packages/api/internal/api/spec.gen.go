// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
