// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
