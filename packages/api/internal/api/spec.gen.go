// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
