// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaX2/juBH/KgTbR2/szaZF4bdk97oNdnMXJClaIAgKWhpZvFCkjqSSGIG/e0FSov5R",
	"tuw42WzRp82Kw+H8+c1wZuhnHIksFxy4Vnj+jHMiSQYapP3foqAsPv9i/qQcz3FOdIonmJMM8NyvTrCE",
	"PwoqIcZzLQuYYBWlkBGzTa9yQ6q0pHyJ1+sJVoTHC/E0yLVe342vhixnRMMg4wbBLpzXhljlgiuwNjmZ",
	"zcw/keAauDZ/kjxnNCKaCj79XQluvtX8/iwhwXP8p2lt6KlbVdNfpBTSnRGDiiTNDRM8x2ckRkZEUBqv",
	"J/hk9vH1zzwtdApcl1wRODpz+MnrH/6r0CgRBY/NiX95CxNfg3wAWam5riBgfew2mXCQIgepqXN9JGIw",
	"/7YZWWJk1yY4ETIjGs8x5frTMZ5UcKJcwxKsPTNQiiyHGNVbGtiu0XqLy4MqLnfrCf4VHq9d1PRlzkCT",
	"mOitdioZXFTkvYhqy3oeG6gkFCQSCdIpoEpGVG3bqkmDv9HiquCc8mUpiJO+rQth1PmnA1zzuRJj+PQJ",
	"jhgFrsep42iDXPLisygcLttcPl/+E0VCgkKJkJZLmcwGcJAJubo46/O5sCuI0YzqLitEObo4G2C4t6tb",
	"SXmbaXpK1bZRmkgN8WnAODc0A/SYAm9p80gUKjc1oycmGj5omgXduBsuK2qUSJGhx5RGKaKqJUQkgTgB",
	"RgN20rqnPLCaFmggpeFsg/TBYH0fAD8UGN6xnxpe+C6WffG+iyUCruUKPVKdIoNEpUmWI8JjxCg31m+7",
	"zn4M8jErqLrLQmaqmIdjxp1bGolVco0Mlq5h/FETJ3DbDoGUy8qvPbVUHwBUQ6ZGJh9j9bUXl0hJVj1p",
	"7dkNCS8a+Y3EMTXCEHbZkrebSN2OrWBdT/BNFVfhqIShuIRQZHpT9L3d0njSLLG3RQgjSiNVRBEolRQM",
	"2a32fljSB5NXN2WG93pp5cWC0ajP7l8p6BRkOzVQhRw9EhIJzlaIWGvQBQO0WJXEJKtPWgjBgPD909Fu",
	"yaZuiUK539wOQpIlfDV/l5rfNbB3Zrb3AbgDRixpCAB1ICekYBrPb+96TYfFkyXcBcFKE10EouPafg/Y",
	"E3iRGctZWQ1TY1ASm5zmqvG7g10m+3ovoZyq1F41Pgu1nHRVNmeHv8J3CNQGn4xymhmzfgwFWSyie5AJ",
	"ZYEr6otfC/HtybdjAqhDt8wAtaDHfwuJauunz1kcxJPUKBJZZi5hLRA8QVQ41q2jSKLLxDEQDR0MNKxz",
	"ZxtBiApJ9eraXFnOq6c2zdyIe+CmTbZBCUSC/Ht1CbtE9B9tSHDZTNoEZMlqGVKtc6PnaU6/wapiZscV",
	"KZDYkpYDi39/OL08//ANVvVuYne5dpbyRNgApdr4Ff9yfIZOL8/xBD+AVM5ms6OPRzNznMiBk5ziOf50",
	"NDuamfRDdGp1m6ZAmBNjCQHc/cMuoyiF6B5bTtI24ucxnuOvoN067oxJjl0P32ZVRo2r+v1F1phwhCoH",
	"z3ZqiNZW96lqdolBsb9TpRFhDEnXV6J6S0CJ68ZiSI/RswifNwljvyV4fru5HOo1veu7flnUn11427EV",
	"kqALySEeUNYadzbGuLPdHOHnNJtpDVEzqqxJmui/vVubhE/M/XSLa8GNIXKhQpnQ9gGI+PLCtgydzNV2",
	"8aVQHR9bJJ6JeHWwUVNjDLNu5xgtC1j3gHW4mV7r2E4L0Wm2yx6qEX5s9TNjpJUMps++21s72DDQgTvv",
	"G2Wshk8PLF/sNg+X60YH2ZyPD4R2TTKte08jfsf9J4F+r+Ose8pY0Ffj7V9Ob7fRnvxQX02r6jSYyb+C",
	"9lYpq9Ph/O2d9d1R7u2wSbD+MLlVB7pyhXRKNFKpKFiMFuCzsimlze4/CrBde/XKYZjhwLuDL4X6AlyQ",
	"J1M6IV5kC1fq7nGwLc9aB/uO4ONsNuuXZAHkzg6duKyvRt9zzcbS4uF/MiQkJBJUWs7Bg/fglSNpGQSe",
	"NHDTVSGqlYWqKZUZfdhyJ/q4ufLnvjTb7XfDttupuHACB/qWcsW2Gm5c2LRDHRD3kJtCkD7YTkFBJHhs",
	"lMtcOOH5p78a3PvGJBQD/pNY/A6RLqvQ7Qm9A2Bn2RaCXw+8+wOyqqJGFNc1aSAp3zQW37Ko9qO8FxbT",
	"tXJvV/R0G822p2qJRlTHHB43F8Rt/xy+IA5OTEaVxscHl2GoNnZDVFNsmQ4+1xC/S2e3wnL6XI+tNta5",
	"rpBFZBgGjsID4aY5Dtst+zcmaeOLXT+zMQ5wWrys3P2hkXcFDk2Ej4y7Q5r7/+H7U4bv1Gqgps/l8Hk9",
	"XO65AWhzrjkKWtZ96szPtvfH2WQrdTVBD2SA43AGcA5MGz8D+Mn953vZsBNP4xiRUmsmlns5ca/W9iWO",
	"PEQlT3J6DZEMVZOnl+emLjdrG16uxr5Idab79bnVW06gmB85rNtQOJI4BufR1yzoX4rN+q1ucNLir2SH",
	"UfvKsKm2H8Coe/17K5T2ZiXnPIYn/+xfTW582A0NTcqfe3Qe80NjFLFUvyWJgoFZylsPUtovyDuNUrym",
	"73OMskOStnvlQwW1QrLywU3Np1OS0yM4XhzF8IAbHJ67Pw9WFk3tHyO7d5n/BgAA//8Mn42iLC0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
