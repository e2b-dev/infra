// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
