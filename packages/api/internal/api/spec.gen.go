// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
