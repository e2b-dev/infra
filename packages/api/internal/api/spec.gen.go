// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xZXW/bOg/+K4Le99Kts67nJnfp1rMTbNiKdcA5QBEcKDYda3MkT6LTBYX/+wElf8bO",
	"17YOu1oaUaRIPnxIZk880utcK1Bo+fSJ58KINSAY99eykFk8f00fpeJTngtMecCVWAOfNqcBN/C1kAZi",
	"PkVTQMBtlMJa0DXc5iRq0Ui14mUZcFCbvRr92Xn6pLIoVAR7lXYEztFckrDNtbLgYnE9mdA/kVYICumj",
	"yPNMRgKlVuFnqxV91+r7v4GET/n/wjbAoT+14a0x2ngbMdjIyJyU8Cm/ETGjJ4JFXgb8evLi+W3OCkxB",
	"YaWVgZcj49fPb/y9RpboQsVk8Y9fEeJ7MBswtZtlDQGX41u1kUardWU9NzoHgxJ2i6GvcR5T+BIJhumE",
	"YQosExaZLaIIrE2KjLmrLNGGreQGFIOOnWAXeZ0SOWbniJ68WGYyGir6OwVMweyqYNIyf4Vpw7TKtkw4",
	"F+QyA7bcOnkEsW5tLbXOQCjuq6UurYemkFuKqN6yKINulG/o/IdC7USfM4iZXlmvJhFFhnz6sBhUrUuv",
	"Ewy4RFjbEUJpVAtjxJb+tiiwsMMn3rvvx58HqlhTgJ3bpJfiLuItHTlEL4IRjjycmkQqaVOgKDofXI6c",
	"skFiIh3D8MFOmLmzgCfarAU63sWXV21EpUJYgWOWNVgrVvsU8WMeVIZqLfTcecXxIy/OJCg8DQle9meB",
	"iSVGr9ljKqOUKotO61bEIgMCYRS3/X52zF4tzU9Ne68bNsGhGL6Hx/1hPDkAtc3DZTX6uIVjY4gKI3F7",
	"T6zsbc8cCX3SX0BRr3IEAcKA+bOGmqepf5FEeMXojp6cWGs+RcwpxrNcvoVtrczNDCmI2IlWU8M/F7O7",
	"+cVb2La3hbvle4pUiXZFLjGjs9urGza7m/OAb8BYH5zJ5YvLCZnTOSiRSz7lLy8nlxNiQ4Gp8y0EtXEf",
	"VoDD8L6TFpnIsm4wiWMoM64pzmM+5W8Ab0nLzsBydWY3bYhLZNmHhE8fjjTYTn7LxYDeRhpv0w+zLTOA",
	"hVEQD71rx54x642HIQm1M8NhWRLqgss5N4DVw6Ik9hTE9w6TngpzbUdS88pVMBNMweMO1vvZudO2TY+b",
	"7G50vN3JzLrIUObCYEj0eRELFL7qIu1Yvu6Jr+jKN+zc/lRjs02tjhDwwqKhVt1OOHvabEdl38PXOvoC",
	"pppdokqqw+9LqYTZjlFY7G4mMoN9WumM1f6fwbevR3g28KNKbsC6IWZIxDbVRRazJbETuXOckHqR6TnU",
	"9le9/AwR1ptCd60oB5V49fPm2m7ZDYvsUz0SsVRYZlEYajO/WU2Vgee98MnluQzdi234VM0k5V5CfAPY",
	"y6x31ZHxHla8JQtuQLM37TDa2XL30FwrEnowlsFRwXqkItEd4KoYvtXYdVmRalW9PtMrhqnow7Rix0eJ",
	"6cgU6DrW1wJc+VUNi0a3D0liAXm34puxdTKcxCg1P9QyTgSqn/JPbgm7/p6J3mpvPSZ7/VsgPazXi/Eu",
	"M4tjJlqc7G0uQ5S/89vIcyN9cairHQZPvxeJXN5DZMaKfnY3Z9afHdjPTt27dpi+tVtvP99F8C9G1rgu",
	"uEUcg0/hs6G5HEVfCiLzY+4oof7ljlmUQvRljEL9+Z7Rsq/qo8cBe6TG0/h+nr8u1mG9oxwojHr8Uu1O",
	"5datIVcOC2beqP9+8B5ivu4idTp4forpvt3haNAEi5JULaGdZGVbn67JKema/MKxorOv9Xm2hcqiD53w",
	"qd10y9BAYsCmhxD10Yv093T4hqBoAmcSLUO5BoaaZXIDh5E1b2x/bCyfS8adTX2kUV8fIZza47j/M8Fz",
	"ss/3pMxdM5s6JIXJqjXdTsNQ5PISrpaXMWx4R8PT7i/71rWs9v8QLC2k/wUAAP//3+M2/NoYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
