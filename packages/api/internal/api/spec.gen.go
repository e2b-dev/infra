// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
