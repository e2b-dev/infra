// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
