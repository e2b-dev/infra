// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYX2/bRgz/KofbHpXISbMXvzlt1hkduqApsAGBMZwl2rpWulPvKKeGoe8+8E5/LdlO",
	"0qbrUxwdRR7JH38kteORznKtQKHl0x3PhREZIBj3H6jN/A39kIpPeS4w4QFXIgM+rc4CbuBLIQ3EfIqm",
	"gIDbKIFM0Eu4zUnQopFqzcsy4FJZFCqCg0o7Ak/RXJKwzbWy4O59NZnQn0grBIX0U+R5KiOBUqvwk9WK",
	"nrX6fjWw4lP+S9gGI/SnNrwxRhtvIwYbGZmTEj7l1yJmdEWwyMuAX00uXt7mrMAEFFZaGXg5Mn718sbf",
	"a2QrXaiYLP72I0J8B2YDpnazrCHgcnyjNtJolVXWc6NzMCihD9y+vnlMwVtJMEyvGCbAoKMl2MdVwFO9",
	"tl7NShQp8un9YgCDQqYxc4IBlwiZHUFoo1oYI7b0f14sUxkNr/h3ApiA2b8ck5b5V5g2TKt0y0QUgbVy",
	"mQJbbp08gshaL5ZapyAUGbMosLBDY3fu+XgsQBUZn97zJflHTlCNiXhLRy4fi2CkwtuavW8YorLe+FyF",
	"dVEG3Gd+kL5IxzC8rRNm7izgK20ygY4y8NVl67VUCGtwRZGBtWJ9SBE/df3KUK2Frjuv6GnkxqkEhY/D",
	"nJcdg9tzYMtWRmfsIZFRQiCh05pFWWRAIMRjpvpUfMpeLc0fm/MekTfBoRi+h4fDYXx0AGqbxwt49HIL",
	"RyQQFUbi9o4IxdueuXr6qD+DIpqlR0sQBszvNdR8xf2LJMIrMnKV5sRa8wliTjGe5fIdbGtlrt0lIGIn",
	"WjW8f85mt/Ozd7Bt3xbuLU+HUq20oxOJKZ3dXF6z2e2cB3wDxvrgTM4vzidkTuegRC75lL86n5xPqOAE",
	"Js63ENTG/VgDDsP7p7TIRJp2g0n1SplxfD6P+ZS/BbwhLXu99vKJjaChSJGmf6349P5Eb+jkt1wMiHSk",
	"ZxQuS6siTbfMABZGQTz0ru3YY9YbD0MSatvdcVkS6oLLOTeA1f2iJOoU1FkcJj0V5tqOpOa1q2AmmIKH",
	"Paz3s3OrbZseN5Rc63i7l5msSFHmwmBI9HkWCxS+6iLtKJ4gT3T/ml75ip23P9bYbFOrIwQ8s2io67TN",
	"eVjU+yr7Hr7R0WcwzAmxqJLq8PtSKmG2YxQWuzdXMoVDWumM1f4/gW/fjPBs4LtubsC6fjwkYpvoIo3Z",
	"ktiJ3DlNSL3I9Bxqm6tefoII6yG3OxGXg0q8/H4jWbfshkX2MYEqY4mwzKIw1GZ+spoqA8974c7luTzI",
	"f28B+7MWse4B+rupGlx3UTpAYa1I6IFWBgOkqRi+1mBzYZRqXUU21WuGiejjqqKzB4nJyMzmWsyXAly9",
	"VB2mmkzbtDez7GQ4NFEUv4ndvwFT48S97+QTMVYtRqdkr/4PPIYuzzbcub8VQMfbwCyOmWhxcZD9HTrd",
	"RmKvvdLvB9WGFN01arT19/dlY/Tk8r6HuUMt6zjc+o1G5PIOIjNW4rPbObP+7Mia99j1bY/GW7tO1TPJ",
	"+2JkP+uWhIhj8Nl/Xg287KrulzMR0xzRhSo7q36r9utBOVoaCYjUT8qjJP2HO2ZRAtHnMXL25wem076q",
	"Dx5t7IF6VxPip4XVhSCs1xx7uHTrCU61a5nb2IbsPSzpeaP++SVyLJvdXezxGP0upvt2h9NFEyxKUrXH",
	"dpKVbn26Jo9J1+QHTiadla/fBFqoLPrQCXftslyGBlYGbHIMUR+8SH/Vh68IyhWfRMtQZsBQs1Ru4Diy",
	"5o3tD43lp7aMzrI/MkBcneC12uO4/6Xh5yW56sIu1nX4z/b47TmgcK+ZTR30wqR8ynf+URluLmjrF0aK",
	"ZepD6096I5379GCnYShyeQ6Xy/MYNuRIa3K3/6ndul7fftS3tGb/FwAA//+Kj4zGFxgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
