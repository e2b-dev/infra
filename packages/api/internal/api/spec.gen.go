// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
