// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/3M00pEo0QAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
