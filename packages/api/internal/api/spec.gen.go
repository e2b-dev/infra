// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
