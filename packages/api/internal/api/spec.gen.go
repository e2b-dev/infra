// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4YpR1xfrfwcAAP//n2O0FcN/AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
