// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9XVPcOrJ/ReV7H+5WTYCQ7NZdqvaBkORs9kCWYiDnVmWpU8LumdFiyz6SDMxS/Pdb",
	"+rJlW7I9wwyQj6eEsdyS+kvdre72fRTnWZFToIJHB/dRgRnOQABTf+E4Bs7P82ugn97LHwiNDqICi0U0",
	"iSjOIDpojZlEDP4oCYMkOhCshEnE4wVkWL4sloV8gQtG6Dx6eJhEuCC/wjIM2j5eDepVSdIkCNQ+XQ0m",
	"zRMIgjQPV4PIMU2u8rsg0Pr5anAF4CwI1DxcFWJWpFhAD9RqwCqQH+RgXuSUg+K2t3t78p84pwKoUPxX",
	"FCmJsSA53f03z6n8rYb33wxm0UH0X7s1C+/qp3z3A2M503MkwGNGCgkkOoje4QTJJQIX0cMkerv3evtz",
	"HpZiAVQYqAj0ODn5m+1P/jFnVyRJgOoZ325/xs+5QLO8pIme8a/bn/Eop7OUxIqif34KLpoCuwFmKflg",
	"uVyx8eFv0zOYEy7YUmlUlhfABNE8jm/5oVKYUrEl8pcWq/w2RXoA+hWW6NN7NMsZ+nB0hnCDiaJJW5wm",
	"EracWG+wC1Y/Q7cLYIDEAhRUZlaKCEdpHmMBSQD0FGIGolq8fw49yN3B+OXrH9pQz5cFoHxWL7QDCGiZ",
	"RQdf5Rqjy4lHf9Ua6at+OmmTwbtBF6E13Pzq36AZ7Z08SI7z+QfqpXQKN5AOMdhxPj9W4x4mUQac47kH",
	"Bcf5HJmHyLK1D38kAy5wVniQaB9JTErSp/kcgVr3JJrlLMMiOogSLOCVhBINYrGaql72xOz40qJmKrAo",
	"+RlgI3JN9AR3e2J2ekvEQq2VKziIKUATFJeMARXpEjEociYInaOcpprTlECaN3w44gI86JkKKJBYYIFm",
	"mKQ+CWjt3y5e7vXo9OIoL7WmaWml0wsU5wy4Wpraij7TXaQTKt7sSzQSSjLJyK+ryQkVMAd1UhwxkKJ5",
	"WNtaXYzGZowYoL822JCQUJB6ScvRGD6YRMSjtD4lUiBnBJjlL3cOF3RZEq9+yTC/HpKVepYTzK8Jnb8H",
	"gUnK5fvaEGmv6zPOILCirvRYpLYwtwA0K9N0iQx6BwC1GEXtVi3OzmD2OnHIdVkT+Bxwdnj6yejX9eh7",
	"ePoJXcNyddKaCd6puXGa/nMWHXztp4lc7wWXPHo5iWiZpvgqBW35jeYVs94xbHLtO3fO8C26wWkJXYAd",
	"ACnm4oKDZ13HmAskMYPEgvAKibeYo5IrleBFYnPPz8LZwe36eFEPNCxoGLPJie8Jvz4BwUjMuzyYwA2J",
	"Pet5r35HltPbSJiRFPiSC8jOvYf8x+o5ku+i/4Gd+c4EwZ14O0F3M/4nr86QWvc0Jz7VeyKfoUI+tGhK",
	"iNqzR/AFTt8thd1gQ67kM8QLHAMiFF2pUS6fEir+8jbyaWzJNAGokgHXAdo+hOr9TyxhOqh2F9LYqyX1",
	"lPwHTt55KEr4NeLkP9A+vOSaT8i73jNsz4eRD/TmCzZxhSQhch6cnrbYy13CB3pDWE4zoALdYEaknPnO",
	"0i7bf6A3yRdg3GsLmweWL4DeJIiVlEpDgtB+2JNIuwRd5ZwnHr5Wg5F65kFXF0VBo0jPOiThZiLXOvnI",
	"8uxThufguiQJkbAzQrHQe8lwUUiA2kEJqSnXsZlE87gIDfzl6NQZyKqZA6OBAsNp9cbDxOJ2+dnEF+Su",
	"HyZRTmHEmeQu82HSP9Zd6eDY9jolfl0AHabgwKRUHsaxFNV/cB83TvUYZAahf0z/+Vnx+C9Hp0/gNEkq",
	"jnWaPNvx+UVtPHXQUmDOb3PmOYRPzRMkcnnqVrLOam7aOAYq2Jce4CUH5j+BL8yT8Uv1I7WaYVLjxYfV",
	"oI3Q9awwv4bki7SIThnMyJ0Hz+p3ZdhIlaffQDdNxagdhJyFbClnnmk5886jf3/kPEX/JpTfRix2eAck",
	"MojuwFU24zHQuVh4zEH1e/8SQwezWXBzhomHLj4cSqVyTLiAZGoOoW4MKSXYc1weyp+rFZuQrNfOTwlQ",
	"oaO5CRQMdNjHWLBD5rp+2wu3KCtPuE+RVh7zw0QeRY4J0veWY6w8SOkNOkLodgGNYxzdkjRFcFcQBqOd",
	"IWiaEL1RQmeoOsSznC2HN3Rix6l3BE6wGAxIGp44scPb9whDxOsxbLjArMe99GAVc2ReGo1VLiRPjtvk",
	"VI3t3D8MbdGORjOWZ+h2QeIFIryxcuPwDKto917DvY+pJMhFmyMADhM0WNzyrUVEk82U6NuAoCdIJTfV",
	"oaM9xhK4KufRJCJ0lkeT6BYzdcgpu9F3sp04XNoOwMkn65j9r/f/12fVfobb3sDVY4M3LaopcJd63h4d",
	"mua3v8tFMgridz2BT6em+W2FApFXK1lI302/XC/oKs9TwEoJ4FLkp7jkZmMzXKYiOpjhlIPndijPsLRM",
	"0nSJCvlSk13xTICmhRSrvPTPCLV7NaCs1LBHKh2ISwY+a1b+jnCaIuPPx3mWldRefamgbkcJObtYTdYt",
	"2XuPO4s0lxCv/zzx6TiRo5TceF1eDnFOE76zqt8bVimGRftCfpsL/tRCYRzVlvuallwAG4d1M9hrAuRZ",
	"RnyhcPW7BZCzeAFcMOV+BgORH61529p9mV3ptTTVuYrdj43O6FempZJmWGUWXr0zbqZxMVCqPfeujV0H",
	"4vokVBLVxuwayQqrm3c0z3ASXI9BRuDCo4M04FVkJafuRhuYCwRDeGUGqEue4TnNQDS1k7dk1T+Ldmo/",
	"US4wjb16x7roxIypvY1B+pmbqBHk07dlyi8ZGbjql6K2/NsUFRUF7m564qiAatktetfs2BWgptAGiFfv",
	"rdIUViVpb9ajmHC8gETdJ3qkVDpKEh16FFKpPRyRpMVtREDGPRkoFdIwY3ipXaOfevCnHhytB6GHJ4dU",
	"YMWUvfkBjUiAh2F/qq8R6kvrJ1eTDCuwjqaqmdDqLOeWrJ0AlQCqdWXX81CceHR60Sdv1ThU5RGMPDir",
	"N7UnF7iFOlT3R82ZtNe66lWXG/fx3Z/Rak91RsTq5kBclKfAYvAaARLhEnipUkcKPU5npYyBLV107rvV",
	"FCofxNJSp5jgeKEuE3ez+pJxrDy7l6seadb4Px+8kaSawdYhln7rInw7+dmBbQO3a99RNpg9wJkN0nYX",
	"6AmrOAiytLMyOa00Vjd6UvKWvquvAHAiXaiEYSI1tRJ6SiEW+o+SLgCnYuG5I5hEd68kmFc3WIXxuYRX",
	"L+TMQK5/eV/PUf945M5W/3xRz9vY3tEC07nHi1tdXbfIZQDI2c6Al1lfELoZ4Og/XjcU4nhmT/5hEn1z",
	"MfkkzzDxHMbvMAekHzoZoVWgi+HZjMSIcBPwIlfpqGwXoDftJLUWQtzkM6VelE6lN0kzUrTZkPymYuQv",
	"OhLdDiUbXg15Vj9vkZ5BOp7g0uoFit/PG7GfN2Jr34iZvR/nc39mvEpjN9niVRospglKCYWO96V+9MKR",
	"T15ger1acBMPgYKDGQETJAul14XCX3WWyY9StKD36RYvGOw1Me3Jrkk1/r0Ji1PByliUDBK5Vt5VMaN8",
	"xDahPX5iapbWQfnj5+xO10Kjmnvi4sHB2Ymjtccledo3BvVxYxJGYi8oRuIVFUI4ePG5G7YYl8UZF6V0",
	"X0/jQE1IX5BilubYERQdOrEmjvJ7QzGBRCXsBrOKwxEB+aI/J17lAAdjAL0xht6l9kQueoH6V3kyEKsI",
	"g1xF+WQOcz1e/zjnosMt9SYdHDoEcrnAEbqpNSFWShgxUWmVd6gqHHxZItVV2m9ELIJVAY1oeEjsxxlx",
	"UrAfOmGJCr7c9TngzOPOqFpxj8VrCjlsIEDIt311Tfy9DSm0Qfy2ALGA+nVrPJkYRAukE68Yvr4PraYu",
	"4h427nwQOmabKfs2maYGWe6uLWZ/Vh8Fq49++OIhwz3eAjZJi9DBLJ9ZBdo8l7vHcU5Ngec0fMV2vgDn",
	"UqF+xblza4n7iFPbvbE+8ypUX3qDcXbkaW4Ci6NO82c8eTwI9mzeklSJV0cZQGZCSq0qFfmzXXbJ/Vfj",
	"48TSvD0gkz4m1WvT6zfRK3/sC0LRL/DFv8bnEKgshEGbUtGk6Z5LdSFfFuMY1mlzMoRNqbnsjf2sTHWi",
	"hJKRObkB2h/nWyMeN3BY1JGTxt7rIMQznRjrJ6OvGxmThJkW+JaujCxF0r7DxZNDsXoUriivUp9Gb5pE",
	"ZlmEIz0e5UyX5NfhUXS19Jgrjq3EJRbWlZo2HnpM/rUiZz50lkWyBo9rsulX11TmbgiubmY0ItJmiOmK",
	"p7sNV6DanNmgT0PFdQN2Vu2qVIuu7l1BbamhXkusFYQxhvvXy063H6XoVDCGV8GZsUGRZoOP3jDMiAWs",
	"dIawqmvG4AIbbTYaOTt9N+AOZ1uHUGFbe4S3mJjLaHs1Hi4k2JREjWPzKrXHH4Zq8N5HksJFkebYw4UF",
	"A+5NJXE124ykSqvhVKEBmZdslbDKKPIqs5J5rKMLljqXSQo2X+RlmqArQKVaJyRI5IOosWvvbPjM9LXa",
	"/F3fOndyeXwNTG7TE1iqnjmGenj6dU4uRbGjzGNsqpwMFC8gvlaXXpiqelO4g7gUYIlbae06NSGojpQT",
	"4J1LGdQbmmXDMQGHPiFG+rL/MlhpHfpvGFt62x1EKfr60DTLWTyi9sfVNreLPDXkdxSDAqRYh5UUMZhj",
	"lqTAK1yHldDMlv57kCB/tpXLmCOMrjDvymKYF2e+tgJ9pOn2ITBQXCetHTUwq3jEOr8/LcAFFENGR5WC",
	"LMf2zWdnGWUOWXpMBRTeW6LObWLjDX/XLe+KUMFyVY/XyZ1lgwbXIZuXmVx3nfolZ1/F+FItVP6Ouacs",
	"XP5qJU8Nq64dnJm60rK6MpCgNqIF+tsjhFft61bgqr8L5TcELY6nchzlOvVS1qijg1vVsajilBWL6Wwd",
	"JBHLqZQRPZeTf3NY6tYCV4AZsI/W19Ob+91Wsyr5UptSw+rZF0IoQTtMMkIbAFUP1gXgRA03XVj/75Ua",
	"+Oq8WSVrYv0SjvrfEIzTT69+dXFQvz8tCyz17+sxa7GDw8uxI/YV5cZCa7CBBSZJoQqfpXgTIU3O6MP+",
	"O0lQJ5X/INrbeb2zpzrJFEBxQaKD6M3O3s6eugQTC0W/XU2eV4o8mpdz7rvJ1XUwGFG4bRcoS95Ttx+f",
	"kuggOs25cLiCmya5wMW7PFlurFlpq8y6dYtmQlyNhrv7G2x+6+lQ6OuE2+k9CIkTmEyXTk9e32zV8nfl",
	"oLrba/9YOciVVhUm9HHz18sH6eLiuUrjbjKCkvcmc+zeN5pfP2gmSUF4O6TJ3xGm/byih7ncctjqr+12",
	"6A5EO+shu83u3HJ3LQ54O5AkqPfzOCKZrsNDY98+C0EL8uoalgobcxCBei6cpvrq1xwRvEO4X0Bo/arF",
	"u4Hj1RoSjzTGqtOua4p12xU7xEMMRMkoJJ5NPbPwec+EFgktuaQtMkIxu/vzK2aHaFvRyS6lnkUltxfg",
	"uZttXNq/MI28GlO4Ir17bz8gMEoz9/OKUcyaWw7rDxOsqI7ti+M0cYM437omXlm6sYg9Lpi29ofIdSpf",
	"3jC1Nq8eOp7LKA2xN8Ao5krnB2EUKfG6TC54hP9dPdbBHt/BrZ9HYxBtHF6d6l/hdzXsKiLv0jyBEVaH",
	"HuZZ9GfzYDO2xrjrc9U8RvW9XN/i0Bt6skOl7Ty3+Eg+NUykFrZ7r0vNH4KU+QWErr81nbb8hPlsC9ZX",
	"0zimzv1hskr3CeUz/1GCSg8yLnOjHD74BZbLR7LPEK+Y2rPR/FHV5r5IbTWOlYJmqSratV8zyGfSQNVl",
	"yF2jdBMstKUjq1OF/ND9kI/fljG0tRhQGT8KxLdwUo1XI41k6H7dbhuDuG0qOurETdNrcUKgkkKpAh2Y",
	"FjmakdReKtRpi6rBOvqX6j77N3wV/6vc29v/Cy6KvxUsT/4V/WkHfcDxQpkTmCa6vz5HWckFugJ0cXaM",
	"gMZ5AslOQAFV9Xvb1D8rHl+tbiqPO8e6xFPMuDeGGfee8Pxzgr5fL+XBsrbR1UzDH3C+bWWhqjlsXQp3",
	"FZ7L5FvywyuyP60T3pi2qxHd0tGw9/2DMFVDfe46PZ/CatTtzKJzWccp05O6O0+fTj3Kswy/4iAHSdKk",
	"zeZO6NN7db86h8ZKokkEd0WqOi2amz6fijRAficJ7/1uXvjmMsN3n/TD13t7LWU2iUpK/ijBDFB8vlWD",
	"z1sr9DiVqqsFsrphzg8qCvdVqXVvJOtXkqa16g2EsCoyTZ3y7dVMzLrwe2QYq6XorkmafhtW37YOz6Bn",
	"WR+cV0uk6hnCOmxLBNy4RljHC+R1y7sfhi2CMr9rE42DbGOZxmTFjuCZYz1ybb6ZeJOcpPYWnrp9rj/T",
	"UCe0VMQmFGUkTYnpyhTwJlRuVcOV6OT69zdh7jhL+E6OdsrI+lYZWFVKdGPAelV1W6o9eSCv1l/qCURR",
	"UX0dQdSc9VMapTQOGaauQNZdIEfIZNAofYRYXlBy54hknRSHWdWHVnWyv8HpxGmPNlFDdbOYugpxi/Lp",
	"AwuqnNIVrxFbA5qst7HVlnz5FNf8rcL4deMVriA/gTX9ncp9Ydsd+kMfqhtiq9lCT6SjknrdRfGpbXDd",
	"9KFhg6tIX4ypPvlU+8dtUt58GXxo7F+/MS5hMGPAF9CTOnimhzTEEu4E0ER9g1Bw00tA97AcyUZn1byP",
	"ZaX1wm+tD4WWesGedAvzpKWGLR5q4+saCoGw6uJZa2/VfuBOa+U3f5E21sDHN1pJ6SMvK1pqVGP2iTyT",
	"F8DBUvb72Fc+X0PT6RefiT/7jtlWs9uXGyI2avnJQiffqY52Ggn7WXwKwu1G3G4jvIPO/Z060Z1VVM7F",
	"B6nbrRjm3UFHOE2Vs7wgXJpkizxBWZkKUqRgqtzzG2C3jAhT8H5+fjzRzccVwJLr18F+EN9tdsZrG1+O",
	"0t9BFjnKAPPSFKDarVlNvTNSiM+rBs3Pf8o0GkK3K/Dl5uqDo6aHiy9TcRU8hrr9V9f55pNZ5eVGTiNu",
	"WLPqRmug/2g2ugCcjcza9rrf5+bBU15Aq+qVR9476w093f1Gu5ypj4yNnAj5m0Oq3XtdkjsufuLe6znl",
	"X34qnivA60ZPTKXwz9DJ9xU6cRqSPSpuIurmZVsOmrwZM/bNi1HIDQHXuR2j9LEd6pXm+mFLiH08XrU1",
	"DLH56GL/y6c+B0wuzKPPAouvl38e1GsdXbrTkzDkcso2PEJvX5VRfuH+xtcQcgx1rbx0C3EcQyFsuO7F",
	"pUhsgmUaakbaErY90NjangAz6REVO527bYdWtSOqV8eHZBvNwTZR4bPJo2FTst5byBMWc/naVgizPXXR",
	"7IqwdjVPp79dsKLnu5T1STDwqFUepiMPh2+Dab7FM+Y7ODd29edid+9Nd7mHnnCgcvncvjyjmE5/bPJd",
	"1bxufQ6cDI62LfI8R8++X8No0i6cb9Z8t5TdrZsiBiMOrRZEoequITJPbYPCJyF2t06MJnBXd/YxAeAr",
	"24UymIal23K3Wh77Up7yOf/nbMYhkPe0ctJTIHxhP9AyTovVX6TZahJVs7PpilEEq2dfZJjWL49jgwVr",
	"SKhqnrV7v8B80V9qianpjYlSQq9VAAojgZluoCnJqr+naXkcL0E/4yOl92PV7euRMqvYuMCqkNhw8UKD",
	"Daf2D3QXGxWpeL0d/na6pwZsA5cuprFpbn9UPG+o9B2kGm1PPm72V6kY7C1u+bL/PdcKdo66j3qx9UKv",
	"liingHKGspzpOlOFiVG1OObrc+vl59Uf5mt/nl0sVTMyeSZ6TuujkvGcSczzysJUJUYzlmcBZFG4E+du",
	"67hx2OomPKsNqpaC6qBSn7Ao9OeoVk927jv2X2/zCuBn5ecz3L3e7DdD/o+N5n7Zf4547pf9l+ttGxx8",
	"V9WgA8fgk3jpDqe9BD99y4xu21OPZ/OXFSZ4LGMpgOzGElK15VdtVfnB7i4uyA7sX+3googcCPf17WJ9",
	"uXbfqtlt/qhuQt2/G30G3Qe2bdHD5cP/BwAA///OwLKpeq0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
