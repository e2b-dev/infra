// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/1bgMv2sggAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
