// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wH23AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
