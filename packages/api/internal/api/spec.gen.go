// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
