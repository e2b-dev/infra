// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+w9a2/curF/hdC9H24BxXactLg10A+Ok5ymJ06NrJ1zgdQ4oKXZXdYSpUNStreG//sF",
	"XxIlkZJ2vX7k8SnxihqS8+LMcGZ0GyVFXhYUqODRwW1UYoZzEMDUXzhJgPPT4hLoh7fyB0Kjg6jEYhnF",
	"EcU5RAedMXHE4I+KMEijA8EqiCOeLCHH8mWxKuULXDBCF9HdXRzhkvwKqzBo+3g9qBcVydIgUPt0PZi0",
	"SCEI0jxcDyLHNL0oboJAm+frwRWA8yBQ83BdiHmZYQEDUOsB60C+k4N5WVAOitte7+3Jf5KCCqBC8V9Z",
	"ZiTBghR099+8oPK3Bt5/M5hHB9F/7TYsvKuf8t13jBVMz5ECTxgpJZDoIHqDUySXCFxEd3H0eu/lw895",
	"WIklUGGgItDj5OSvHn7y9wW7IGkKVM/4+uFn/FQINC8qmuoZ//rwMx4VdJ6RRFH0z4/BRTNgV8AsJe8s",
	"lys2Pvxt9hkWhAu2UhqVFSUwQTSP42t+qBSmVGyp/KXDKr/NkB6AfoUV+vAWzQuG3h19RrjFRFHcFadY",
	"wpYT6w32wepn6HoJDJBYgoLKzEoR4SgrEiwgDYCeQcJA1Iv3z6EHuTuYvnz9Qxfq6aoEVMybhfYAAa3y",
	"6OCrXGN0Hnv0V6ORvuqncZcM3g26CG3gFhf/Bs1ob+RB8rFYvKNeSmdwBdkYg30sFh/VuLs4yoFzvPCg",
	"4GOxQOYhsmztwx/JgQuclx4k2kcSk5L0WbFAoNYdR/OC5VhEB1GKBbyQUKJRLNZTNcuOzY7PLWpmAouK",
	"fwZsRK6NnuBuj81Or4lYqrVyBQcxBShGScUYUJGtEIOyYILQBSpopjlNCaR5w4cjLsCDnpmAEoklFmiO",
	"SeaTgM7+7eLlXo9Ozo6KSmuajlY6OUNJwYCrpamt6DPdRTqh4tW+RCOhJJeM/LKenFABC1AnxREDKZqH",
	"ja3Vx2hixogR+muDDQkJBamXtBxN4YM4Ih6l9SGVAjknwCx/uXO4oKuKePVLjvnlmKw0sxxjfkno4i0I",
	"TDIu39eGSHddn3AOgRX1pccitYO5JaB5lWUrZNA7AqjDKGq3anF2BrPX2CHXeUPgU8D54ckHo183o+/h",
	"yQd0Cav1SWsmeKPmxln2z3l08HWYJnK9Z1zy6Hkc0SrL8EUG2vKbzCtmvVPY5NJ37nzG1+gKZxX0AfYA",
	"ZJiLMw6edX3EXCCJGSSWhNdIvMYcVVypBC8S23t+Es4ObtfHi3qgYUHDmG1OfEv45TEIRhLe58EUrkji",
	"Wc9b9TuynN5FwpxkwFdcQH7qPeTf18+RfBf9D+wsdmIEN+J1jG7m/E9enSG17klBfKr3WD5DpXxo0ZQS",
	"tWeP4AucvVkJu8GWXMlniJc4AUQoulCjXD4lVPzldeTT2JJpAlAlA24CtHsINfuPLWF6qHYX0tqrJfWM",
	"/AeO33goSvgl4uQ/0D285JqPyZvBM2zPh5F39OoLNnGFNCVyHpyddNjLXcI7ekVYQXOgAl1hRqSc+c7S",
	"Ptu/o1fpF2DcawubB5YvgF6liFWUSkOC0GHYcaRdgr5yLlIPX6vBSD3zoKuPoqBRpGcdk3AzkWudvGdF",
	"/iHHC3BdkpRI2DmhWOi95LgsJUDtoITUlOvYxNEiKUMDfzk6cQayeubAaKDAcFa/cRdb3K4+mfiC3PVd",
	"HBUUJpxJ7jLv4uGx7kpHx3bXKfHrAugxBQcmpfIwSaSo/oP7uHGmxyAzCP1j9s9Pisd/OTp5BKdJUnGq",
	"0+TZjs8v6uKph5YSc35dMM8hfGKeIFHIU7eWddZw09YxUMM+9wCvODD/CXxmnkxfqh+p9QxxgxcfVoM2",
	"Qt+zwvwS0i/SIjphMCc3Hjyr35VhI1WefgNdtRWjdhAKFrKlnHlm1dw7j/79nvOUw5tQfhux2OE9kMgg",
	"ugdX2YwfgS7E0mMOqt+Hlxg6mM2C2zPEHrr4cCiVykfCBaQzcwj1Y0gZwZ7j8lD+XK/YhGS9dn5GgAod",
	"zU2hZKDDPsaCHTPX9dteuGVVe8JDirT2mO9ieRQ5JsjQW46xcielN+gIoesltI5xdE2yDMFNSRhMdoag",
	"bUIMRgmdoeoQzwu2Gt/QsR2n3hE4xWI0IGl44tgO794jjBFvwLDhArMB99KDVcyReWkyVrmQPDltkzM1",
	"tnf/MLZFOxrNWZGj6yVJlojw1sqNwzOuot17Dfc+ppYgF22OADhM0GJxy7cWEW02U6JvA4KeIJXcVI+O",
	"9hhL4aJaRHFE6LyI4ugaM3XIKbvRd7IdO1zaDcDJJ5uY/S/3/9dn1X6C68HA1X2DNx2qKXDnet4BHZoV",
	"17/LRTIK4nc9gU+nZsV1jQJR1CtZSt9Nv9ws6KIoMsBKCeBKFCe44mZjc1xlIjqY44yD53aoyLG0TLJs",
	"hUr5Uptd8VyApoUUq6LyzwiNezWirNSweyodSCoGPmtW/o5wliHjzydFnlfUXn2poG5PCTm7WE/WLdkH",
	"jzuLNJcQL/8c+3ScKFBGrrwuL4ekoCnfWdfvDasUw6JDIb/tBX8aoTCOasd9zSougE3DuhnsNQGKPCe+",
	"ULj63QIoWLIELphyP4OByPfWvO3svsov9Fra6lzF7qdGZ/Qrs0pJM6wzC6/fmTbTtBgo1Z5738ZuAnFD",
	"EiqJamN2rWSF9c07WuQ4Da7HICNw4dFDGvA6slJQd6MtzAWCIbw2A9Qlz/icZiCa2ck7suqfRTu1HygX",
	"mCZevWNddGLGNN7GKP3MTdQE8unbMuWXTAxcDUtRV/5tioqKAvc3HTsqoF52h94NO/YFqC20AeI1e6s1",
	"hVVJ2pv1KCacLCFV94keKZWOkkSHHoVUag9HJO1wGxGQc08GSo00zBheadfopx78qQcn60EY4MkxFVgz",
	"5WB+QCsS4GHYn+prgvrS+snVJOMKrKepGia0Osu5JesmQKWAGl3Z9zwUJx6dnA3JWz0O1XkEEw/O+k3t",
	"yQVuoQ7V/VF7Ju21rnvV5cZ9fPdntN5TkxGxvjmQlNUJsAS8RoBEuAReqdSRUo/TWSlTYEsXnftuNYXK",
	"B7G01CkmOFmqy8TdvLlknCrP7uWqR5o1/k9HbySpZrBNiKXfOgvfTn5yYNvA7cZ3lC1mD3Bmi7T9BXrC",
	"Kg6CLO2sTM5qjdWPnlS8o++aKwCcShcqZZhITa2EnlJIhP6jokvAmVh67gji6OaFBPPiCqswPpfwmoV8",
	"NpCbX942czQ/HrmzNT+fNfO2tne0xHTh8eLWV9cdchkAcrbPwKt8KAjdDnAMH69bCnE8sSd/F0ffXEw+",
	"LXJMPIfxG8wB6YdORmgd6GJ4PicJItwEvMhFNinbBehVN0mtgxA3+UypF6VT6VXajhRtNyS/rRj5s45E",
	"d0PJhldDntXPW6QnkI5HuLR6huL380bs543YxjdiZu8fi4U/M16lsZts8ToNFtMUZYRCz/tSP3rhyCfP",
	"ML1eLbiNh0DBwZyACZKF0utC4a8my+RHKVrQ+3SLFwz22pj2ZNdkGv/ehMWZYFUiKgapXCvvq5hJPmKX",
	"0B4/MTNL66H8/nP2p+ugUc0du3hwcHbsaO1pSZ72jVF93JqEkcQLipFkTYUQDl586octpmVxJmUl3deT",
	"JFATMhSkmGcFdgRFh06siaP83lBMIFUJu8Gs4nBEQL7oz4lXOcDBGMBgjGFwqQORi0Gg/lUej8QqwiDX",
	"UT65w1z31z/OuehwS7NJB4cOgVwucIRuZk2ItRJGTFRa5R2qCgdflkh9lfYbEctgVUArGh4S+2lGnBTs",
	"u15YooYvd30KOPe4M6pW3GPxmkIOGwgQ8m1fXRN/a0MKXRC/LUEsoXndGk8mBtEB6cQrxq/vQ6tpirjH",
	"jTsfhJ7ZZsq+TaapQZa7a4vZn9VHweqjH754yHCPt4BN0iJ0MMtnVoG2z+X+cVxQU+A5C1+xnS7BuVRo",
	"XnHu3DriPuHUdm+sP3sVqi+9wTg78jQ3gcVJp/kTnjweBHs2b0mqxKunDCA3IaVOlYr82S674v6r8Wli",
	"ad4ekUkfk+q16fWb6JU/9gWh6Bf44l/TcwhUFsKoTalo0nbPpbqQL4tpDOu0ORnDptRc9sZ+XmU6UULJ",
	"yIJcAR2O820Qjxs5LJrISWvvTRDiiU6MzZPRN42MScLMSnxN10aWIun9DpcNonJldZH5NHzbRDLLJBzp",
	"8ahgukS/CZeii5XHfHFsJy6xsqkUdfEy4AJsFEnzcWNVphvwvCajfnVD5e6G5JrmRhMib4aYrri623AF",
	"rMupLfq0VF5bGuJa1boKWSVh9LXyGgpNDfXaaJ3wjDHpv573+gApFajCNLwO20wNl7RbfwwGaCYsYK3T",
	"hdX9NEYX2GrA0crmGbobd3jcuooK29pXvMbEXFPbS/NwicG2ZGsaw9dJP/4AVYv33pMMzsqswB4uLBlw",
	"b5KJq+PmJFP6DWcKDci8ZOuHVa6RV61VzGM3nbHMuWZSsPmyqLIUXQCq1DohRaIYRY1de2/Dn03Hq+3f",
	"Am5yW1ckl8DkNj0hp/qZY8KHp9/kDFMUO8o9ZqjK1kDJEpJLdR2GqapEhRtIKgGWuLX+bpIWgupIuQfe",
	"uZSpvaVZthwtcOgTYqQv+8+DlTah/5axpbfdQ5Sirw9N84IlE6qCXG1zvSwyQ35HMShAinVYRRGDBWZp",
	"BrzGdVgJzW1TAA8S5M+2phlzhNEF5n1ZDPPi3NdwYIg0/Q4FBorrvnXjCWYV91jn96cFuIByzOiok5Pl",
	"2KH57CyTzCFLj5mA0nt/1LtnbL3h78flXREqWaEq9XpZtWzU4DpkiyqX626SwuTs6xhfqrnK3zH3FIzL",
	"X63kqWH1hYQzU19a1lcGEtRWtMBw44Twqn19DFz1d6Y8iKDF8VgupFynXsoGFXZwrXoZ1ZyyZpmdrZAk",
	"YjWTMqLncjJzDivddOACMAP23np9enO/2zpXJV9qU2pYM/tSCCVoh2lOaAug6s66BJyq4aY/6/+9UANf",
	"nLbrZ80tgISj/jcG4+TDi19dHDTvz6oSS/37cspa7ODwcuyIfUW5qdBabGCBSVKokmgp3kRIkzN6t/9G",
	"EtRJ8j+I9nZe7uypHjMlUFyS6CB6tbO3s6eux8RS0W9Xk+eFIo/m5YL77nh1hQxGFK67pcuS99S9yIc0",
	"OohOCi4cruCmfS5w8aZIV1trY9opwO7cr5ngV6sV7/4W2+J6ehf6euT2uhJC6oQss5XTrdc3W738XTmo",
	"6QM7PFYOcqVVBRB93Pz1/E66uHihErzbjKDkvc0cu7ettth3mkkyEN7eafJ3hOkwr+hhLrccdjpvu727",
	"A3HQZshuu2+33F2HA16PpA/q/dyPSKYf8djY109C0JK8uISVwsYCRKDSC2eZvhQ2RwTvEe4XEFq/avFu",
	"4Xi9VsUTjbH6tOubYv1Gxg7xEANRMQqpZ1NPLHzeM6FDQksuaYtMUMzu/vyK2SHag+hkl1JPopK7C/Dc",
	"2rau85+ZRl6PKVyR3r21nxaYpJmHecUoZs0th80nC9ZUx/bFaZq4RZxvXROvLd1YJB4XTFv7Y+Q6kS9v",
	"mVrbVw89z2WShtgbYRRzufODMIqUeF1AFzzC/64e62CP7+DWz6MpiDYOry4CqPG7HnYVkXdpkcIEq0MP",
	"8yz6k3mwHVtj2sW6aiujOmJubnHoDT3aodJ1njt8JJ8aJlIL273VReh3Qcr8AkJX5poeXH7CfLKl7Otp",
	"HFMBfxev05dC+cx/VKASh4zL3CqUD36b5fye7DPGK6YqbTJ/1FW7z1JbTWOloFmqynntdw6KuTRQdYFy",
	"3yjdBgs90JHVq0++63/ix2/LGNpaDKhcIAXiWzippquRVpr0sG63LUPcBhY9deIm8HU4IVBjoVSBDkyL",
	"As1JZi8VmoRG1Xod/Uv1pf0bvkj+Ve3t7f8Fl+XfSlak/4r+tIPe4WSpzAlMU915n6O84gJdADr7/BEB",
	"TYoU0p2AAqor+x5S/6x5fHX6rNzvHOsTTzHj3hRm3HvE888J+n49lwfLxkZXO0F/xPm2NYeqGrFzKdxX",
	"eC6TP5AfXpP9cZ3w1rR9jegWlYa97x+EqVrqc9fpBhVWo27PFp3lOk2ZHjd9e4Z06lGR5/gFBzlIkiZr",
	"t31CH96q+9UFtFYSxRHclJnqwWhu+nwq0gD5naR88It64ZvLHN980A9f7u11lFkcVZT8UYEZoPj8QQ0+",
	"bxXR/VSqriPIm1Y6P6go3NZF2IORrF9JljWqNxDCqsk0cwq71zMxm5LwiWGsjqK7JFn2bVh9D3V4Bj3L",
	"5uC8WCFV6RDWYQ9EwK1rhE28QN40w/th2CIo87s20TjINpZpTFbsBJ75qEduzDexN8lJam/hqejn+gMO",
	"TUJLTWxCUU6yjJh+TQFvQuVWtVyJXtb/cHvmnrOEb+Rop8BsaJWBVWVEtwxsVtU0rNqTB/J6naceQRQV",
	"1TcRRM1ZP6VRSuOYYeoKZNMfcoJMBo3Se4jlGSU3jkg2SXGY1R1qVY/7K5zFTuO0WA3VbWSa+sQHlE8f",
	"WFCFlq54Tdga0HSzja235PPHuObvlMxvGq9wBfkRrOnvVO5L2wjRH/pQfRI7bRgGIh211Ov+io9tg+t2",
	"EC0bXEX6Ekz1yacaQz4k5c03w8fG/vUb4xIGcwZ8CQOpg5/1kJZYwo0AmqqvEwpuugzo7pYT2ehzPe99",
	"WWmz8FvnE6KVXrAn3cI86ahhi4fG+LqEUiCs+ns22ls1JrjRWvnVX6SNNfJZjk5S+sTLio4a1Zh9JM/k",
	"GXCwlP0h9pXPN9B0+sUn4s+hY7bTBvf5hoiNWn600Ml3qqOdFsN+Fp+BcPsUdxsM76BTfw9PdGMVlXPx",
	"QZpGLIZ5d9ARzjLlLC8JlybZskhRXmWClBmYevfiCtg1I8KUvp+efox1W3IFsOL6dbCfynfboPHGxpej",
	"9BeSRYFywLwyBah2a1ZT70wU4tO6dfPTnzKtVtHdWny5uebgaOjh4stUXAWPoX5n1k2+BmVWeb6V04gb",
	"1qz71BroP5qNLgDnE7O2ve73qXnwmBfQqnrlnvfOekOPd7/RLWcaImMrJ0L+5pBq91aX5E6Ln7j3ek75",
	"l5+KpwrwptETUyn8M3TyfYVOnFZl94qbiKat2QMHTV5NGfvq2SjkloDr3I5J+tgO9Upz87AjxD4erxse",
	"hth8crH/+WOfAyYX5t5ngcXX8z8PmrVOLt0ZSBhyOeUhPEJvX5VJfuH+1tcQcgx1rbx0C3GSQClsuO7Z",
	"pUhsg2VaakbaErY90NTangAz6RE1O526bYfWtSPqV6eHZFttwrZR4bPNo2Fbsj5YyBMWc/nagxDm4dRF",
	"uyvCxtU8vU53wYqe71LW42DgUas8TCceDt8G03yLZ8x3cG7s6g/J7t6a7nJ3A+FA5fK5fXkmMZ3+DOWb",
	"unnd5hwYj462LfI8R8++X8No0i6dr9l8t5TdbZoiBiMOnRZEoequMTLPbIPCRyF2v06MpnDTdPYxAeAL",
	"24UymIalG3Z3miH7Up6KBf/nfM4hkPe0dtJTIHxhP90yTYs136p50CSqdmfTNaMIVs8+yzCtXx6nBgs2",
	"kFDVPGv3don5crjUElPTGxNlhF6qABRGAjPdQFOSVX9p0/I4XoF+xidK7/u629c9ZVaxcYlVIbHh4qUG",
	"G07tH+kuNilS8fJh+NvpnhqwDVy6mMamhf1R8byh0neQavRw8nG1v07F4GBxy5f977lWsHfUvdeLbRZ6",
	"sUIFBVQwlBdM15kqTEyqxTHfpdssP6/5ZF/3w+1ipZqRyTPRc1ofVYwXTGKe1xamKjGasyIPIIvCjTh1",
	"W8dNw1Y/4VltULUUVAeV+rhFqT9UtX6y89Cx//IhrwB+Vn4+wd3r1X475H/faO6X/aeI537Zf77etsHB",
	"d1UNOnIMPoqX7nDac/DTH5jRbXvq6Wz+vMIE92UsBZBdWUKqtvyqrSo/2N3FJdmB/YsdXJaRA+G2uV1s",
	"LtduOzW77R/VTaj7d6vPoPvAti26O7/7/wAAAP//Rv7e/5StAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
