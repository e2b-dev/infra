// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZnpxdJkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
