// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"q6vV/wUAAP//E2ocZMKTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
