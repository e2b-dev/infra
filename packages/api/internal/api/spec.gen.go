// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.15.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
