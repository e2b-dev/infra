// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VLxdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
