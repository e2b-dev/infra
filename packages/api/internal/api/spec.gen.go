// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
