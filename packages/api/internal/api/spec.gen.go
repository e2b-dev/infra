// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"TO1Ve0STkH5x/98AAAD//xBu6+esxQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
