// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
