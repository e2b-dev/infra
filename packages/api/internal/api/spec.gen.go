// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
