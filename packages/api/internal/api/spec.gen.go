// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
