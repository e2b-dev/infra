// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
