// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"S92/G31U3Qe2Ldvt2e1/AwAA///zg27DLbgAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
