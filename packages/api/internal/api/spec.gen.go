// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"t6b+37X+Yf4L145kdbX6TwAAAP//gh+hxm2VAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
