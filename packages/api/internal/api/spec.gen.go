// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ebH8dwAAAP//jF77Ys+BAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
