// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"f42WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
