// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
