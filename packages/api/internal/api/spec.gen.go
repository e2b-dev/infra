// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
