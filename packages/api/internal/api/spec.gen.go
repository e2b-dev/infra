// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
