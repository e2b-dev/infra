// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
