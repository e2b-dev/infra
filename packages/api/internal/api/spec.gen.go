// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
