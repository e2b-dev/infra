// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package legacy

import (
	"context"

	"connectrpc.com/connect"
	"github.com/e2b-dev/infra/packages/envd/internal/services/spec/filesystem"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFilesystemHandler creates a new instance of MockFilesystemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFilesystemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFilesystemHandler {
	mock := &MockFilesystemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFilesystemHandler is an autogenerated mock type for the FilesystemHandler type
type MockFilesystemHandler struct {
	mock.Mock
}

type MockFilesystemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFilesystemHandler) EXPECT() *MockFilesystemHandler_Expecter {
	return &MockFilesystemHandler_Expecter{mock: &_m.Mock}
}

// CreateWatcher provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) CreateWatcher(context1 context.Context, request *connect.Request[filesystem.CreateWatcherRequest]) (*connect.Response[filesystem.CreateWatcherResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateWatcher")
	}

	var r0 *connect.Response[filesystem.CreateWatcherResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.CreateWatcherRequest]) (*connect.Response[filesystem.CreateWatcherResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.CreateWatcherRequest]) *connect.Response[filesystem.CreateWatcherResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.CreateWatcherResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.CreateWatcherRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_CreateWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWatcher'
type MockFilesystemHandler_CreateWatcher_Call struct {
	*mock.Call
}

// CreateWatcher is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.CreateWatcherRequest]
func (_e *MockFilesystemHandler_Expecter) CreateWatcher(context1 interface{}, request interface{}) *MockFilesystemHandler_CreateWatcher_Call {
	return &MockFilesystemHandler_CreateWatcher_Call{Call: _e.mock.On("CreateWatcher", context1, request)}
}

func (_c *MockFilesystemHandler_CreateWatcher_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.CreateWatcherRequest])) *MockFilesystemHandler_CreateWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.CreateWatcherRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.CreateWatcherRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_CreateWatcher_Call) Return(response *connect.Response[filesystem.CreateWatcherResponse], err error) *MockFilesystemHandler_CreateWatcher_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_CreateWatcher_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.CreateWatcherRequest]) (*connect.Response[filesystem.CreateWatcherResponse], error)) *MockFilesystemHandler_CreateWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// GetWatcherEvents provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) GetWatcherEvents(context1 context.Context, request *connect.Request[filesystem.GetWatcherEventsRequest]) (*connect.Response[filesystem.GetWatcherEventsResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for GetWatcherEvents")
	}

	var r0 *connect.Response[filesystem.GetWatcherEventsResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.GetWatcherEventsRequest]) (*connect.Response[filesystem.GetWatcherEventsResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.GetWatcherEventsRequest]) *connect.Response[filesystem.GetWatcherEventsResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.GetWatcherEventsResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.GetWatcherEventsRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_GetWatcherEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWatcherEvents'
type MockFilesystemHandler_GetWatcherEvents_Call struct {
	*mock.Call
}

// GetWatcherEvents is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.GetWatcherEventsRequest]
func (_e *MockFilesystemHandler_Expecter) GetWatcherEvents(context1 interface{}, request interface{}) *MockFilesystemHandler_GetWatcherEvents_Call {
	return &MockFilesystemHandler_GetWatcherEvents_Call{Call: _e.mock.On("GetWatcherEvents", context1, request)}
}

func (_c *MockFilesystemHandler_GetWatcherEvents_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.GetWatcherEventsRequest])) *MockFilesystemHandler_GetWatcherEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.GetWatcherEventsRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.GetWatcherEventsRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_GetWatcherEvents_Call) Return(response *connect.Response[filesystem.GetWatcherEventsResponse], err error) *MockFilesystemHandler_GetWatcherEvents_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_GetWatcherEvents_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.GetWatcherEventsRequest]) (*connect.Response[filesystem.GetWatcherEventsResponse], error)) *MockFilesystemHandler_GetWatcherEvents_Call {
	_c.Call.Return(run)
	return _c
}

// ListDir provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) ListDir(context1 context.Context, request *connect.Request[filesystem.ListDirRequest]) (*connect.Response[filesystem.ListDirResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for ListDir")
	}

	var r0 *connect.Response[filesystem.ListDirResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.ListDirRequest]) (*connect.Response[filesystem.ListDirResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.ListDirRequest]) *connect.Response[filesystem.ListDirResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.ListDirResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.ListDirRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_ListDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListDir'
type MockFilesystemHandler_ListDir_Call struct {
	*mock.Call
}

// ListDir is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.ListDirRequest]
func (_e *MockFilesystemHandler_Expecter) ListDir(context1 interface{}, request interface{}) *MockFilesystemHandler_ListDir_Call {
	return &MockFilesystemHandler_ListDir_Call{Call: _e.mock.On("ListDir", context1, request)}
}

func (_c *MockFilesystemHandler_ListDir_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.ListDirRequest])) *MockFilesystemHandler_ListDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.ListDirRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.ListDirRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_ListDir_Call) Return(response *connect.Response[filesystem.ListDirResponse], err error) *MockFilesystemHandler_ListDir_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_ListDir_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.ListDirRequest]) (*connect.Response[filesystem.ListDirResponse], error)) *MockFilesystemHandler_ListDir_Call {
	_c.Call.Return(run)
	return _c
}

// MakeDir provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) MakeDir(context1 context.Context, request *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for MakeDir")
	}

	var r0 *connect.Response[filesystem.MakeDirResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.MakeDirRequest]) *connect.Response[filesystem.MakeDirResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.MakeDirResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.MakeDirRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_MakeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MakeDir'
type MockFilesystemHandler_MakeDir_Call struct {
	*mock.Call
}

// MakeDir is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.MakeDirRequest]
func (_e *MockFilesystemHandler_Expecter) MakeDir(context1 interface{}, request interface{}) *MockFilesystemHandler_MakeDir_Call {
	return &MockFilesystemHandler_MakeDir_Call{Call: _e.mock.On("MakeDir", context1, request)}
}

func (_c *MockFilesystemHandler_MakeDir_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.MakeDirRequest])) *MockFilesystemHandler_MakeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.MakeDirRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.MakeDirRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_MakeDir_Call) Return(response *connect.Response[filesystem.MakeDirResponse], err error) *MockFilesystemHandler_MakeDir_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_MakeDir_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.MakeDirRequest]) (*connect.Response[filesystem.MakeDirResponse], error)) *MockFilesystemHandler_MakeDir_Call {
	_c.Call.Return(run)
	return _c
}

// Move provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) Move(context1 context.Context, request *connect.Request[filesystem.MoveRequest]) (*connect.Response[filesystem.MoveResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Move")
	}

	var r0 *connect.Response[filesystem.MoveResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.MoveRequest]) (*connect.Response[filesystem.MoveResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.MoveRequest]) *connect.Response[filesystem.MoveResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.MoveResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.MoveRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_Move_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Move'
type MockFilesystemHandler_Move_Call struct {
	*mock.Call
}

// Move is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.MoveRequest]
func (_e *MockFilesystemHandler_Expecter) Move(context1 interface{}, request interface{}) *MockFilesystemHandler_Move_Call {
	return &MockFilesystemHandler_Move_Call{Call: _e.mock.On("Move", context1, request)}
}

func (_c *MockFilesystemHandler_Move_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.MoveRequest])) *MockFilesystemHandler_Move_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.MoveRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.MoveRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_Move_Call) Return(response *connect.Response[filesystem.MoveResponse], err error) *MockFilesystemHandler_Move_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_Move_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.MoveRequest]) (*connect.Response[filesystem.MoveResponse], error)) *MockFilesystemHandler_Move_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) Remove(context1 context.Context, request *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 *connect.Response[filesystem.RemoveResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.RemoveRequest]) *connect.Response[filesystem.RemoveResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.RemoveResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.RemoveRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockFilesystemHandler_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.RemoveRequest]
func (_e *MockFilesystemHandler_Expecter) Remove(context1 interface{}, request interface{}) *MockFilesystemHandler_Remove_Call {
	return &MockFilesystemHandler_Remove_Call{Call: _e.mock.On("Remove", context1, request)}
}

func (_c *MockFilesystemHandler_Remove_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.RemoveRequest])) *MockFilesystemHandler_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.RemoveRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.RemoveRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_Remove_Call) Return(response *connect.Response[filesystem.RemoveResponse], err error) *MockFilesystemHandler_Remove_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_Remove_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.RemoveRequest]) (*connect.Response[filesystem.RemoveResponse], error)) *MockFilesystemHandler_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveWatcher provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) RemoveWatcher(context1 context.Context, request *connect.Request[filesystem.RemoveWatcherRequest]) (*connect.Response[filesystem.RemoveWatcherResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for RemoveWatcher")
	}

	var r0 *connect.Response[filesystem.RemoveWatcherResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.RemoveWatcherRequest]) (*connect.Response[filesystem.RemoveWatcherResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.RemoveWatcherRequest]) *connect.Response[filesystem.RemoveWatcherResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.RemoveWatcherResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.RemoveWatcherRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_RemoveWatcher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveWatcher'
type MockFilesystemHandler_RemoveWatcher_Call struct {
	*mock.Call
}

// RemoveWatcher is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.RemoveWatcherRequest]
func (_e *MockFilesystemHandler_Expecter) RemoveWatcher(context1 interface{}, request interface{}) *MockFilesystemHandler_RemoveWatcher_Call {
	return &MockFilesystemHandler_RemoveWatcher_Call{Call: _e.mock.On("RemoveWatcher", context1, request)}
}

func (_c *MockFilesystemHandler_RemoveWatcher_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.RemoveWatcherRequest])) *MockFilesystemHandler_RemoveWatcher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.RemoveWatcherRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.RemoveWatcherRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_RemoveWatcher_Call) Return(response *connect.Response[filesystem.RemoveWatcherResponse], err error) *MockFilesystemHandler_RemoveWatcher_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_RemoveWatcher_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.RemoveWatcherRequest]) (*connect.Response[filesystem.RemoveWatcherResponse], error)) *MockFilesystemHandler_RemoveWatcher_Call {
	_c.Call.Return(run)
	return _c
}

// Stat provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) Stat(context1 context.Context, request *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error) {
	ret := _mock.Called(context1, request)

	if len(ret) == 0 {
		panic("no return value specified for Stat")
	}

	var r0 *connect.Response[filesystem.StatResponse]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error)); ok {
		return returnFunc(context1, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.StatRequest]) *connect.Response[filesystem.StatResponse]); ok {
		r0 = returnFunc(context1, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.Response[filesystem.StatResponse])
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *connect.Request[filesystem.StatRequest]) error); ok {
		r1 = returnFunc(context1, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFilesystemHandler_Stat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stat'
type MockFilesystemHandler_Stat_Call struct {
	*mock.Call
}

// Stat is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.StatRequest]
func (_e *MockFilesystemHandler_Expecter) Stat(context1 interface{}, request interface{}) *MockFilesystemHandler_Stat_Call {
	return &MockFilesystemHandler_Stat_Call{Call: _e.mock.On("Stat", context1, request)}
}

func (_c *MockFilesystemHandler_Stat_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.StatRequest])) *MockFilesystemHandler_Stat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.StatRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.StatRequest])
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_Stat_Call) Return(response *connect.Response[filesystem.StatResponse], err error) *MockFilesystemHandler_Stat_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockFilesystemHandler_Stat_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.StatRequest]) (*connect.Response[filesystem.StatResponse], error)) *MockFilesystemHandler_Stat_Call {
	_c.Call.Return(run)
	return _c
}

// WatchDir provides a mock function for the type MockFilesystemHandler
func (_mock *MockFilesystemHandler) WatchDir(context1 context.Context, request *connect.Request[filesystem.WatchDirRequest], serverStream *connect.ServerStream[filesystem.WatchDirResponse]) error {
	ret := _mock.Called(context1, request, serverStream)

	if len(ret) == 0 {
		panic("no return value specified for WatchDir")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *connect.Request[filesystem.WatchDirRequest], *connect.ServerStream[filesystem.WatchDirResponse]) error); ok {
		r0 = returnFunc(context1, request, serverStream)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFilesystemHandler_WatchDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchDir'
type MockFilesystemHandler_WatchDir_Call struct {
	*mock.Call
}

// WatchDir is a helper method to define mock.On call
//   - context1 context.Context
//   - request *connect.Request[filesystem.WatchDirRequest]
//   - serverStream *connect.ServerStream[filesystem.WatchDirResponse]
func (_e *MockFilesystemHandler_Expecter) WatchDir(context1 interface{}, request interface{}, serverStream interface{}) *MockFilesystemHandler_WatchDir_Call {
	return &MockFilesystemHandler_WatchDir_Call{Call: _e.mock.On("WatchDir", context1, request, serverStream)}
}

func (_c *MockFilesystemHandler_WatchDir_Call) Run(run func(context1 context.Context, request *connect.Request[filesystem.WatchDirRequest], serverStream *connect.ServerStream[filesystem.WatchDirResponse])) *MockFilesystemHandler_WatchDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *connect.Request[filesystem.WatchDirRequest]
		if args[1] != nil {
			arg1 = args[1].(*connect.Request[filesystem.WatchDirRequest])
		}
		var arg2 *connect.ServerStream[filesystem.WatchDirResponse]
		if args[2] != nil {
			arg2 = args[2].(*connect.ServerStream[filesystem.WatchDirResponse])
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFilesystemHandler_WatchDir_Call) Return(err error) *MockFilesystemHandler_WatchDir_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFilesystemHandler_WatchDir_Call) RunAndReturn(run func(context1 context.Context, request *connect.Request[filesystem.WatchDirRequest], serverStream *connect.ServerStream[filesystem.WatchDirResponse]) error) *MockFilesystemHandler_WatchDir_Call {
	_c.Call.Return(run)
	return _c
}
