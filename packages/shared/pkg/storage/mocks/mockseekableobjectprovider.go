// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storagemocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageSeekableObjectProvider creates a new instance of MockStorageSeekableObjectProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageSeekableObjectProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageSeekableObjectProvider {
	mock := &MockStorageSeekableObjectProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageSeekableObjectProvider is an autogenerated mock type for the StorageSeekableObjectProvider type
type MockStorageSeekableObjectProvider struct {
	mock.Mock
}

type MockStorageSeekableObjectProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageSeekableObjectProvider) EXPECT() *MockStorageSeekableObjectProvider_Expecter {
	return &MockStorageSeekableObjectProvider_Expecter{mock: &_m.Mock}
}

// ReadAt provides a mock function for the type MockStorageSeekableObjectProvider
func (_mock *MockStorageSeekableObjectProvider) ReadAt(ctx context.Context, p []byte, off int64) (int, error) {
	ret := _mock.Called(ctx, p, off)

	if len(ret) == 0 {
		panic("no return value specified for ReadAt")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, int64) (int, error)); ok {
		return returnFunc(ctx, p, off)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, int64) int); ok {
		r0 = returnFunc(ctx, p, off)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, int64) error); ok {
		r1 = returnFunc(ctx, p, off)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageSeekableObjectProvider_ReadAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAt'
type MockStorageSeekableObjectProvider_ReadAt_Call struct {
	*mock.Call
}

// ReadAt is a helper method to define mock.On call
//   - ctx context.Context
//   - p []byte
//   - off int64
func (_e *MockStorageSeekableObjectProvider_Expecter) ReadAt(ctx interface{}, p interface{}, off interface{}) *MockStorageSeekableObjectProvider_ReadAt_Call {
	return &MockStorageSeekableObjectProvider_ReadAt_Call{Call: _e.mock.On("ReadAt", ctx, p, off)}
}

func (_c *MockStorageSeekableObjectProvider_ReadAt_Call) Run(run func(ctx context.Context, p []byte, off int64)) *MockStorageSeekableObjectProvider_ReadAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageSeekableObjectProvider_ReadAt_Call) Return(n int, err error) *MockStorageSeekableObjectProvider_ReadAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageSeekableObjectProvider_ReadAt_Call) RunAndReturn(run func(ctx context.Context, p []byte, off int64) (int, error)) *MockStorageSeekableObjectProvider_ReadAt_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function for the type MockStorageSeekableObjectProvider
func (_mock *MockStorageSeekableObjectProvider) Size(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageSeekableObjectProvider_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockStorageSeekableObjectProvider_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageSeekableObjectProvider_Expecter) Size(ctx interface{}) *MockStorageSeekableObjectProvider_Size_Call {
	return &MockStorageSeekableObjectProvider_Size_Call{Call: _e.mock.On("Size", ctx)}
}

func (_c *MockStorageSeekableObjectProvider_Size_Call) Run(run func(ctx context.Context)) *MockStorageSeekableObjectProvider_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorageSeekableObjectProvider_Size_Call) Return(n int64, err error) *MockStorageSeekableObjectProvider_Size_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageSeekableObjectProvider_Size_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockStorageSeekableObjectProvider_Size_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFromFileSystem provides a mock function for the type MockStorageSeekableObjectProvider
func (_mock *MockStorageSeekableObjectProvider) WriteFromFileSystem(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for WriteFromFileSystem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageSeekableObjectProvider_WriteFromFileSystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFromFileSystem'
type MockStorageSeekableObjectProvider_WriteFromFileSystem_Call struct {
	*mock.Call
}

// WriteFromFileSystem is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockStorageSeekableObjectProvider_Expecter) WriteFromFileSystem(ctx interface{}, path interface{}) *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call {
	return &MockStorageSeekableObjectProvider_WriteFromFileSystem_Call{Call: _e.mock.On("WriteFromFileSystem", ctx, path)}
}

func (_c *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call) Run(run func(ctx context.Context, path string)) *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call) Return(err error) *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockStorageSeekableObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(run)
	return _c
}
