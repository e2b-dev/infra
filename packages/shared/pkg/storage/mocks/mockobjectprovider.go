// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storagemocks

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockObjectProvider creates a new instance of MockObjectProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectProvider {
	mock := &MockObjectProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockObjectProvider is an autogenerated mock type for the ObjectProvider type
type MockObjectProvider struct {
	mock.Mock
}

type MockObjectProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectProvider) EXPECT() *MockObjectProvider_Expecter {
	return &MockObjectProvider_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function for the type MockObjectProvider
func (_mock *MockObjectProvider) Exists(ctx context.Context) (bool, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockObjectProvider_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type MockObjectProvider_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockObjectProvider_Expecter) Exists(ctx interface{}) *MockObjectProvider_Exists_Call {
	return &MockObjectProvider_Exists_Call{Call: _e.mock.On("Exists", ctx)}
}

func (_c *MockObjectProvider_Exists_Call) Run(run func(ctx context.Context)) *MockObjectProvider_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockObjectProvider_Exists_Call) Return(b bool, err error) *MockObjectProvider_Exists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockObjectProvider_Exists_Call) RunAndReturn(run func(ctx context.Context) (bool, error)) *MockObjectProvider_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockObjectProvider
func (_mock *MockObjectProvider) Write(ctx context.Context, p []byte) (int, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (int, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) int); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockObjectProvider_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockObjectProvider_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - p []byte
func (_e *MockObjectProvider_Expecter) Write(ctx interface{}, p interface{}) *MockObjectProvider_Write_Call {
	return &MockObjectProvider_Write_Call{Call: _e.mock.On("Write", ctx, p)}
}

func (_c *MockObjectProvider_Write_Call) Run(run func(ctx context.Context, p []byte)) *MockObjectProvider_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockObjectProvider_Write_Call) Return(n int, err error) *MockObjectProvider_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockObjectProvider_Write_Call) RunAndReturn(run func(ctx context.Context, p []byte) (int, error)) *MockObjectProvider_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFromFileSystem provides a mock function for the type MockObjectProvider
func (_mock *MockObjectProvider) WriteFromFileSystem(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for WriteFromFileSystem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockObjectProvider_WriteFromFileSystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFromFileSystem'
type MockObjectProvider_WriteFromFileSystem_Call struct {
	*mock.Call
}

// WriteFromFileSystem is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockObjectProvider_Expecter) WriteFromFileSystem(ctx interface{}, path interface{}) *MockObjectProvider_WriteFromFileSystem_Call {
	return &MockObjectProvider_WriteFromFileSystem_Call{Call: _e.mock.On("WriteFromFileSystem", ctx, path)}
}

func (_c *MockObjectProvider_WriteFromFileSystem_Call) Run(run func(ctx context.Context, path string)) *MockObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockObjectProvider_WriteFromFileSystem_Call) Return(err error) *MockObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockObjectProvider_WriteFromFileSystem_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function for the type MockObjectProvider
func (_mock *MockObjectProvider) WriteTo(ctx context.Context, w io.Writer) (int64, error) {
	ret := _mock.Called(ctx, w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Writer) (int64, error)); ok {
		return returnFunc(ctx, w)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Writer) int64); ok {
		r0 = returnFunc(ctx, w)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, io.Writer) error); ok {
		r1 = returnFunc(ctx, w)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockObjectProvider_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockObjectProvider_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - ctx context.Context
//   - w io.Writer
func (_e *MockObjectProvider_Expecter) WriteTo(ctx interface{}, w interface{}) *MockObjectProvider_WriteTo_Call {
	return &MockObjectProvider_WriteTo_Call{Call: _e.mock.On("WriteTo", ctx, w)}
}

func (_c *MockObjectProvider_WriteTo_Call) Run(run func(ctx context.Context, w io.Writer)) *MockObjectProvider_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Writer
		if args[1] != nil {
			arg1 = args[1].(io.Writer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockObjectProvider_WriteTo_Call) Return(n int64, err error) *MockObjectProvider_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockObjectProvider_WriteTo_Call) RunAndReturn(run func(ctx context.Context, w io.Writer) (int64, error)) *MockObjectProvider_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}
