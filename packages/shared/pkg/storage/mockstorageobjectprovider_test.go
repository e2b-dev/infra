// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"
	"io"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageObjectProvider creates a new instance of MockStorageObjectProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageObjectProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageObjectProvider {
	mock := &MockStorageObjectProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageObjectProvider is an autogenerated mock type for the StorageObjectProvider type
type MockStorageObjectProvider struct {
	mock.Mock
}

type MockStorageObjectProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageObjectProvider) EXPECT() *MockStorageObjectProvider_Expecter {
	return &MockStorageObjectProvider_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) Delete(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageObjectProvider_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockStorageObjectProvider_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageObjectProvider_Expecter) Delete(ctx interface{}) *MockStorageObjectProvider_Delete_Call {
	return &MockStorageObjectProvider_Delete_Call{Call: _e.mock.On("Delete", ctx)}
}

func (_c *MockStorageObjectProvider_Delete_Call) Run(run func(ctx context.Context)) *MockStorageObjectProvider_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_Delete_Call) Return(err error) *MockStorageObjectProvider_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageObjectProvider_Delete_Call) RunAndReturn(run func(ctx context.Context) error) *MockStorageObjectProvider_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAt provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) ReadAt(ctx context.Context, p []byte, off int64) (int, error) {
	ret := _mock.Called(ctx, p, off)

	if len(ret) == 0 {
		panic("no return value specified for ReadAt")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, int64) (int, error)); ok {
		return returnFunc(ctx, p, off)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte, int64) int); ok {
		r0 = returnFunc(ctx, p, off)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte, int64) error); ok {
		r1 = returnFunc(ctx, p, off)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageObjectProvider_ReadAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAt'
type MockStorageObjectProvider_ReadAt_Call struct {
	*mock.Call
}

// ReadAt is a helper method to define mock.On call
//   - ctx context.Context
//   - p []byte
//   - off int64
func (_e *MockStorageObjectProvider_Expecter) ReadAt(ctx interface{}, p interface{}, off interface{}) *MockStorageObjectProvider_ReadAt_Call {
	return &MockStorageObjectProvider_ReadAt_Call{Call: _e.mock.On("ReadAt", ctx, p, off)}
}

func (_c *MockStorageObjectProvider_ReadAt_Call) Run(run func(ctx context.Context, p []byte, off int64)) *MockStorageObjectProvider_ReadAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		var arg2 int64
		if args[2] != nil {
			arg2 = args[2].(int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_ReadAt_Call) Return(n int, err error) *MockStorageObjectProvider_ReadAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageObjectProvider_ReadAt_Call) RunAndReturn(run func(ctx context.Context, p []byte, off int64) (int, error)) *MockStorageObjectProvider_ReadAt_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) Size(ctx context.Context) (int64, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageObjectProvider_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockStorageObjectProvider_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockStorageObjectProvider_Expecter) Size(ctx interface{}) *MockStorageObjectProvider_Size_Call {
	return &MockStorageObjectProvider_Size_Call{Call: _e.mock.On("Size", ctx)}
}

func (_c *MockStorageObjectProvider_Size_Call) Run(run func(ctx context.Context)) *MockStorageObjectProvider_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_Size_Call) Return(n int64, err error) *MockStorageObjectProvider_Size_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageObjectProvider_Size_Call) RunAndReturn(run func(ctx context.Context) (int64, error)) *MockStorageObjectProvider_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) Write(ctx context.Context, p []byte) (int, error) {
	ret := _mock.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) (int, error)); ok {
		return returnFunc(ctx, p)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []byte) int); ok {
		r0 = returnFunc(ctx, p)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = returnFunc(ctx, p)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageObjectProvider_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockStorageObjectProvider_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - p []byte
func (_e *MockStorageObjectProvider_Expecter) Write(ctx interface{}, p interface{}) *MockStorageObjectProvider_Write_Call {
	return &MockStorageObjectProvider_Write_Call{Call: _e.mock.On("Write", ctx, p)}
}

func (_c *MockStorageObjectProvider_Write_Call) Run(run func(ctx context.Context, p []byte)) *MockStorageObjectProvider_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_Write_Call) Return(n int, err error) *MockStorageObjectProvider_Write_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageObjectProvider_Write_Call) RunAndReturn(run func(ctx context.Context, p []byte) (int, error)) *MockStorageObjectProvider_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFromFileSystem provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) WriteFromFileSystem(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for WriteFromFileSystem")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageObjectProvider_WriteFromFileSystem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFromFileSystem'
type MockStorageObjectProvider_WriteFromFileSystem_Call struct {
	*mock.Call
}

// WriteFromFileSystem is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockStorageObjectProvider_Expecter) WriteFromFileSystem(ctx interface{}, path interface{}) *MockStorageObjectProvider_WriteFromFileSystem_Call {
	return &MockStorageObjectProvider_WriteFromFileSystem_Call{Call: _e.mock.On("WriteFromFileSystem", ctx, path)}
}

func (_c *MockStorageObjectProvider_WriteFromFileSystem_Call) Run(run func(ctx context.Context, path string)) *MockStorageObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_WriteFromFileSystem_Call) Return(err error) *MockStorageObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageObjectProvider_WriteFromFileSystem_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockStorageObjectProvider_WriteFromFileSystem_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTo provides a mock function for the type MockStorageObjectProvider
func (_mock *MockStorageObjectProvider) WriteTo(ctx context.Context, w io.Writer) (int64, error) {
	ret := _mock.Called(ctx, w)

	if len(ret) == 0 {
		panic("no return value specified for WriteTo")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Writer) (int64, error)); ok {
		return returnFunc(ctx, w)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, io.Writer) int64); ok {
		r0 = returnFunc(ctx, w)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, io.Writer) error); ok {
		r1 = returnFunc(ctx, w)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageObjectProvider_WriteTo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTo'
type MockStorageObjectProvider_WriteTo_Call struct {
	*mock.Call
}

// WriteTo is a helper method to define mock.On call
//   - ctx context.Context
//   - w io.Writer
func (_e *MockStorageObjectProvider_Expecter) WriteTo(ctx interface{}, w interface{}) *MockStorageObjectProvider_WriteTo_Call {
	return &MockStorageObjectProvider_WriteTo_Call{Call: _e.mock.On("WriteTo", ctx, w)}
}

func (_c *MockStorageObjectProvider_WriteTo_Call) Run(run func(ctx context.Context, w io.Writer)) *MockStorageObjectProvider_WriteTo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 io.Writer
		if args[1] != nil {
			arg1 = args[1].(io.Writer)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageObjectProvider_WriteTo_Call) Return(n int64, err error) *MockStorageObjectProvider_WriteTo_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockStorageObjectProvider_WriteTo_Call) RunAndReturn(run func(ctx context.Context, w io.Writer) (int64, error)) *MockStorageObjectProvider_WriteTo_Call {
	_c.Call.Return(run)
	return _c
}
