// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package storage

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMockStorageProvider creates a new instance of MockStorageProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageProvider {
	mock := &MockStorageProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStorageProvider is an autogenerated mock type for the StorageProvider type
type MockStorageProvider struct {
	mock.Mock
}

type MockStorageProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStorageProvider) EXPECT() *MockStorageProvider_Expecter {
	return &MockStorageProvider_Expecter{mock: &_m.Mock}
}

// DeleteObjectsWithPrefix provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) DeleteObjectsWithPrefix(ctx context.Context, prefix string) error {
	ret := _mock.Called(ctx, prefix)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObjectsWithPrefix")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, prefix)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStorageProvider_DeleteObjectsWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteObjectsWithPrefix'
type MockStorageProvider_DeleteObjectsWithPrefix_Call struct {
	*mock.Call
}

// DeleteObjectsWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - prefix string
func (_e *MockStorageProvider_Expecter) DeleteObjectsWithPrefix(ctx interface{}, prefix interface{}) *MockStorageProvider_DeleteObjectsWithPrefix_Call {
	return &MockStorageProvider_DeleteObjectsWithPrefix_Call{Call: _e.mock.On("DeleteObjectsWithPrefix", ctx, prefix)}
}

func (_c *MockStorageProvider_DeleteObjectsWithPrefix_Call) Run(run func(ctx context.Context, prefix string)) *MockStorageProvider_DeleteObjectsWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_DeleteObjectsWithPrefix_Call) Return(err error) *MockStorageProvider_DeleteObjectsWithPrefix_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStorageProvider_DeleteObjectsWithPrefix_Call) RunAndReturn(run func(ctx context.Context, prefix string) error) *MockStorageProvider_DeleteObjectsWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetDetails provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) GetDetails() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDetails")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockStorageProvider_GetDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDetails'
type MockStorageProvider_GetDetails_Call struct {
	*mock.Call
}

// GetDetails is a helper method to define mock.On call
func (_e *MockStorageProvider_Expecter) GetDetails() *MockStorageProvider_GetDetails_Call {
	return &MockStorageProvider_GetDetails_Call{Call: _e.mock.On("GetDetails")}
}

func (_c *MockStorageProvider_GetDetails_Call) Run(run func()) *MockStorageProvider_GetDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStorageProvider_GetDetails_Call) Return(s string) *MockStorageProvider_GetDetails_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockStorageProvider_GetDetails_Call) RunAndReturn(run func() string) *MockStorageProvider_GetDetails_Call {
	_c.Call.Return(run)
	return _c
}

// OpenObject provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) OpenObject(ctx context.Context, path string) (StorageObjectProvider, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for OpenObject")
	}

	var r0 StorageObjectProvider
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (StorageObjectProvider, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) StorageObjectProvider); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(StorageObjectProvider)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_OpenObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenObject'
type MockStorageProvider_OpenObject_Call struct {
	*mock.Call
}

// OpenObject is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockStorageProvider_Expecter) OpenObject(ctx interface{}, path interface{}) *MockStorageProvider_OpenObject_Call {
	return &MockStorageProvider_OpenObject_Call{Call: _e.mock.On("OpenObject", ctx, path)}
}

func (_c *MockStorageProvider_OpenObject_Call) Run(run func(ctx context.Context, path string)) *MockStorageProvider_OpenObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockStorageProvider_OpenObject_Call) Return(storageObjectProvider StorageObjectProvider, err error) *MockStorageProvider_OpenObject_Call {
	_c.Call.Return(storageObjectProvider, err)
	return _c
}

func (_c *MockStorageProvider_OpenObject_Call) RunAndReturn(run func(ctx context.Context, path string) (StorageObjectProvider, error)) *MockStorageProvider_OpenObject_Call {
	_c.Call.Return(run)
	return _c
}

// UploadSignedURL provides a mock function for the type MockStorageProvider
func (_mock *MockStorageProvider) UploadSignedURL(ctx context.Context, path string, ttl time.Duration) (string, error) {
	ret := _mock.Called(ctx, path, ttl)

	if len(ret) == 0 {
		panic("no return value specified for UploadSignedURL")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return returnFunc(ctx, path, ttl)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = returnFunc(ctx, path, ttl)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = returnFunc(ctx, path, ttl)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStorageProvider_UploadSignedURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadSignedURL'
type MockStorageProvider_UploadSignedURL_Call struct {
	*mock.Call
}

// UploadSignedURL is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - ttl time.Duration
func (_e *MockStorageProvider_Expecter) UploadSignedURL(ctx interface{}, path interface{}, ttl interface{}) *MockStorageProvider_UploadSignedURL_Call {
	return &MockStorageProvider_UploadSignedURL_Call{Call: _e.mock.On("UploadSignedURL", ctx, path, ttl)}
}

func (_c *MockStorageProvider_UploadSignedURL_Call) Run(run func(ctx context.Context, path string, ttl time.Duration)) *MockStorageProvider_UploadSignedURL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockStorageProvider_UploadSignedURL_Call) Return(s string, err error) *MockStorageProvider_UploadSignedURL_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockStorageProvider_UploadSignedURL_Call) RunAndReturn(run func(ctx context.Context, path string, ttl time.Duration) (string, error)) *MockStorageProvider_UploadSignedURL_Call {
	_c.Call.Return(run)
	return _c
}
