// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /health)
	HealthCheck(c *gin.Context)

	// (GET /health/machine)
	HealthCheckMachine(c *gin.Context)

	// (GET /health/traffic)
	HealthCheckTraffic(c *gin.Context)

	// (GET /v1/info)
	V1Info(c *gin.Context)
	// Delete a sandbox catalog entry
	// (DELETE /v1/sandboxes/catalog)
	V1SandboxCatalogDelete(c *gin.Context)
	// Create a sandbox catalog entry
	// (POST /v1/sandboxes/catalog)
	V1SandboxCatalogCreate(c *gin.Context)

	// (GET /v1/service-discovery/nodes)
	V1ServiceDiscoveryNodes(c *gin.Context)

	// (POST /v1/service-discovery/nodes/drain)
	V1ServiceDiscoveryNodeDrain(c *gin.Context)

	// (POST /v1/service-discovery/nodes/kill)
	V1ServiceDiscoveryNodeKill(c *gin.Context)
	// Get the orchestrators
	// (GET /v1/service-discovery/nodes/orchestrators)
	V1ServiceDiscoveryGetOrchestrators(c *gin.Context)
	// Template build logs
	// (GET /v1/templates/builds/{buildID}/logs)
	V1TemplateBuildLogs(c *gin.Context, buildID string, params V1TemplateBuildLogsParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheck(c)
}

// HealthCheckMachine operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckMachine(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckMachine(c)
}

// HealthCheckTraffic operation middleware
func (siw *ServerInterfaceWrapper) HealthCheckTraffic(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.HealthCheckTraffic(c)
}

// V1Info operation middleware
func (siw *ServerInterfaceWrapper) V1Info(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1Info(c)
}

// V1SandboxCatalogDelete operation middleware
func (siw *ServerInterfaceWrapper) V1SandboxCatalogDelete(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1SandboxCatalogDelete(c)
}

// V1SandboxCatalogCreate operation middleware
func (siw *ServerInterfaceWrapper) V1SandboxCatalogCreate(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1SandboxCatalogCreate(c)
}

// V1ServiceDiscoveryNodes operation middleware
func (siw *ServerInterfaceWrapper) V1ServiceDiscoveryNodes(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1ServiceDiscoveryNodes(c)
}

// V1ServiceDiscoveryNodeDrain operation middleware
func (siw *ServerInterfaceWrapper) V1ServiceDiscoveryNodeDrain(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1ServiceDiscoveryNodeDrain(c)
}

// V1ServiceDiscoveryNodeKill operation middleware
func (siw *ServerInterfaceWrapper) V1ServiceDiscoveryNodeKill(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1ServiceDiscoveryNodeKill(c)
}

// V1ServiceDiscoveryGetOrchestrators operation middleware
func (siw *ServerInterfaceWrapper) V1ServiceDiscoveryGetOrchestrators(c *gin.Context) {

	c.Set(ApiKeyAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1ServiceDiscoveryGetOrchestrators(c)
}

// V1TemplateBuildLogs operation middleware
func (siw *ServerInterfaceWrapper) V1TemplateBuildLogs(c *gin.Context) {

	var err error

	// ------------- Path parameter "buildID" -------------
	var buildID string

	err = runtime.BindStyledParameterWithOptions("simple", "buildID", c.Param("buildID"), &buildID, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter buildID: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1TemplateBuildLogsParams

	// ------------- Required query parameter "orchestratorID" -------------

	if paramValue := c.Query("orchestratorID"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument orchestratorID is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "orchestratorID", c.Request.URL.Query(), &params.OrchestratorID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter orchestratorID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "templateID" -------------

	if paramValue := c.Query("templateID"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument templateID is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "templateID", c.Request.URL.Query(), &params.TemplateID)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter templateID: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.V1TemplateBuildLogs(c, buildID, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/health", wrapper.HealthCheck)
	router.GET(options.BaseURL+"/health/machine", wrapper.HealthCheckMachine)
	router.GET(options.BaseURL+"/health/traffic", wrapper.HealthCheckTraffic)
	router.GET(options.BaseURL+"/v1/info", wrapper.V1Info)
	router.DELETE(options.BaseURL+"/v1/sandboxes/catalog", wrapper.V1SandboxCatalogDelete)
	router.POST(options.BaseURL+"/v1/sandboxes/catalog", wrapper.V1SandboxCatalogCreate)
	router.GET(options.BaseURL+"/v1/service-discovery/nodes", wrapper.V1ServiceDiscoveryNodes)
	router.POST(options.BaseURL+"/v1/service-discovery/nodes/drain", wrapper.V1ServiceDiscoveryNodeDrain)
	router.POST(options.BaseURL+"/v1/service-discovery/nodes/kill", wrapper.V1ServiceDiscoveryNodeKill)
	router.GET(options.BaseURL+"/v1/service-discovery/nodes/orchestrators", wrapper.V1ServiceDiscoveryGetOrchestrators)
	router.GET(options.BaseURL+"/v1/templates/builds/:buildID/logs", wrapper.V1TemplateBuildLogs)
}
