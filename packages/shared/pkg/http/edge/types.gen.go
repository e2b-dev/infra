// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ClusterNodeStatus.
const (
	Draining  ClusterNodeStatus = "draining"
	Healthy   ClusterNodeStatus = "healthy"
	Unhealthy ClusterNodeStatus = "unhealthy"
)

// Defines values for ClusterNodeType.
const (
	ClusterNodeTypeEdge         ClusterNodeType = "edge"
	ClusterNodeTypeOrchestrator ClusterNodeType = "orchestrator"
)

// Defines values for ClusterOrchestratorRole.
const (
	ClusterOrchestratorRoleOrchestrator    ClusterOrchestratorRole = "orchestrator"
	ClusterOrchestratorRoleTemplateManager ClusterOrchestratorRole = "templateManager"
)

// ClusterNode defines model for ClusterNode.
type ClusterNode struct {
	// Commit Source code version of the node
	Commit string `json:"commit"`

	// Host Node private host address and service port
	Host string `json:"host"`

	// Id Service ID
	Id string `json:"id"`

	// NodeId Node ID
	NodeId string `json:"nodeId"`

	// StartedAt Time when the node was registered
	StartedAt time.Time `json:"startedAt"`

	// Status State of the cluster node
	Status ClusterNodeStatus `json:"status"`

	// Type Cluster node type
	Type ClusterNodeType `json:"type"`

	// Version Version of the node
	Version string `json:"version"`
}

// ClusterNodeInfo defines model for ClusterNodeInfo.
type ClusterNodeInfo struct {
	// Commit Version of the node
	Commit string `json:"commit"`

	// Id Service ID
	Id string `json:"id"`

	// NodeId Node ID
	NodeId string `json:"nodeId"`

	// Startup Time when the node started
	Startup time.Time `json:"startup"`

	// Status State of the cluster node
	Status ClusterNodeStatus `json:"status"`

	// Version Version of the node
	Version string `json:"version"`
}

// ClusterNodeStatus State of the cluster node
type ClusterNodeStatus string

// ClusterNodeType Cluster node type
type ClusterNodeType string

// ClusterOrchestratorNode defines model for ClusterOrchestratorNode.
type ClusterOrchestratorNode struct {
	// Commit Service Version
	Commit string `json:"commit"`

	// Host Node private host address and service port
	Host string `json:"host"`

	// Id Service ID
	Id string `json:"id"`

	// MetricDiskMBUsed Amount of disk space currently used in MB
	MetricDiskMBUsed int64 `json:"metricDiskMBUsed"`

	// MetricRamMBUsed Amount of RAM currently used in MB
	MetricRamMBUsed int64 `json:"metricRamMBUsed"`

	// MetricSandboxesRunning Amount of disk space currently used in MB
	MetricSandboxesRunning int64 `json:"metricSandboxesRunning"`

	// MetricVCpuUsed Number of vCPUs currently in use
	MetricVCpuUsed int64 `json:"metricVCpuUsed"`

	// NodeId Node ID
	NodeId string                    `json:"nodeId"`
	Roles  []ClusterOrchestratorRole `json:"roles"`

	// StartedAt Time when the node was registered
	StartedAt time.Time `json:"startedAt"`

	// Status State of the cluster node
	Status ClusterNodeStatus `json:"status"`

	// Version Service Version
	Version string `json:"version"`
}

// ClusterOrchestratorRole Capability of the orchestrator
type ClusterOrchestratorRole string

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error
	Message string `json:"message"`
}

// SandboxCreateCatalogRequest defines model for SandboxCreateCatalogRequest.
type SandboxCreateCatalogRequest struct {
	ExecutionId string `json:"executionId"`

	// OrchestratorId Orchestrator where the sandbox is placed
	OrchestratorId string `json:"orchestratorId"`
	SandboxId      string `json:"sandboxId"`

	// SandboxMaxLength Maximum duration in hours
	SandboxMaxLength int64     `json:"sandboxMaxLength"`
	SandboxStartTime Timestamp `json:"sandboxStartTime"`
}

// SandboxDeleteCatalogRequest defines model for SandboxDeleteCatalogRequest.
type SandboxDeleteCatalogRequest struct {
	ExecutionId string `json:"executionId"`
	SandboxId   string `json:"sandboxId"`
}

// TemplateBuildLogsResponse defines model for TemplateBuildLogsResponse.
type TemplateBuildLogsResponse struct {
	// Logs Build logs
	Logs []string `json:"logs"`
}

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// V1TemplateBuildLogsParams defines parameters for V1TemplateBuildLogs.
type V1TemplateBuildLogsParams struct {
	OrchestratorId string `form:"orchestrator_id" json:"orchestrator_id"`
	TemplateId     string `form:"template_id" json:"template_id"`

	// Offset Index of the starting build log that should be returned with the template
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// V1SandboxCatalogDeleteJSONRequestBody defines body for V1SandboxCatalogDelete for application/json ContentType.
type V1SandboxCatalogDeleteJSONRequestBody = SandboxDeleteCatalogRequest

// V1SandboxCatalogCreateJSONRequestBody defines body for V1SandboxCatalogCreate for application/json ContentType.
type V1SandboxCatalogCreateJSONRequestBody = SandboxCreateCatalogRequest
