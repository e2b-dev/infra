// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"time"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for ClusterNodeStatus.
const (
	Draining  ClusterNodeStatus = "draining"
	Healthy   ClusterNodeStatus = "healthy"
	Unhealthy ClusterNodeStatus = "unhealthy"
)

// Defines values for ClusterNodeType.
const (
	ClusterNodeTypeEdge         ClusterNodeType = "edge"
	ClusterNodeTypeOrchestrator ClusterNodeType = "orchestrator"
)

// Defines values for ClusterOrchestratorRole.
const (
	ClusterOrchestratorRoleOrchestrator    ClusterOrchestratorRole = "orchestrator"
	ClusterOrchestratorRoleTemplateBuilder ClusterOrchestratorRole = "template-builder"
)

// Defines values for LogLevel.
const (
	LogLevelDebug LogLevel = "debug"
	LogLevelError LogLevel = "error"
	LogLevelInfo  LogLevel = "info"
	LogLevelWarn  LogLevel = "warn"
)

// BuildLogEntry defines model for BuildLogEntry.
type BuildLogEntry struct {
	// Level State of the sandbox
	Level LogLevel `json:"level"`

	// Message Log message content
	Message string `json:"message"`

	// Timestamp Timestamp of the log entry
	Timestamp time.Time `json:"timestamp"`
}

// ClusterNode defines model for ClusterNode.
type ClusterNode struct {
	// NodeID Node ID
	NodeID string `json:"nodeID"`

	// ServiceHost Node private host address and service port
	ServiceHost string `json:"serviceHost"`

	// ServiceInstanceID Service instance ID
	ServiceInstanceID string `json:"serviceInstanceID"`

	// ServiceStartedAt Time when the node was registered
	ServiceStartedAt time.Time `json:"serviceStartedAt"`

	// ServiceStatus State of the cluster node
	ServiceStatus ClusterNodeStatus `json:"serviceStatus"`

	// ServiceType Cluster node type
	ServiceType ClusterNodeType `json:"serviceType"`

	// ServiceVersion Version of the service
	ServiceVersion string `json:"serviceVersion"`

	// ServiceVersionCommit Source code version of the service
	ServiceVersionCommit string `json:"serviceVersionCommit"`
}

// ClusterNodeInfo defines model for ClusterNodeInfo.
type ClusterNodeInfo struct {
	// NodeID Node ID
	NodeID string `json:"nodeID"`

	// ServiceInstanceID Service ID
	ServiceInstanceID string `json:"serviceInstanceID"`

	// ServiceStartup Time when the node started
	ServiceStartup time.Time `json:"serviceStartup"`

	// ServiceStatus State of the cluster node
	ServiceStatus ClusterNodeStatus `json:"serviceStatus"`

	// ServiceVersion Version of the service
	ServiceVersion string `json:"serviceVersion"`

	// ServiceVersionCommit Version of the service
	ServiceVersionCommit string `json:"serviceVersionCommit"`
}

// ClusterNodeStatus State of the cluster node
type ClusterNodeStatus string

// ClusterNodeType Cluster node type
type ClusterNodeType string

// ClusterOrchestratorNode defines model for ClusterOrchestratorNode.
type ClusterOrchestratorNode struct {
	// MetricDiskMBUsed Amount of disk space currently used in MB
	MetricDiskMBUsed int64 `json:"metricDiskMBUsed"`

	// MetricRamMBUsed Amount of RAM currently used in MB
	MetricRamMBUsed int64 `json:"metricRamMBUsed"`

	// MetricSandboxesRunning Amount of disk space currently used in MB
	MetricSandboxesRunning int64 `json:"metricSandboxesRunning"`

	// MetricVCpuUsed Number of vCPUs currently in use
	MetricVCpuUsed int64 `json:"metricVCpuUsed"`

	// NodeID Node ID
	NodeID string                    `json:"nodeID"`
	Roles  []ClusterOrchestratorRole `json:"roles"`

	// ServiceHost Node private host address and service port
	ServiceHost string `json:"serviceHost"`

	// ServiceInstanceID Service instance ID
	ServiceInstanceID string `json:"serviceInstanceID"`

	// ServiceStartedAt Time when the node was registered
	ServiceStartedAt time.Time `json:"serviceStartedAt"`

	// ServiceStatus State of the cluster node
	ServiceStatus ClusterNodeStatus `json:"serviceStatus"`

	// ServiceVersion Service Version
	ServiceVersion string `json:"serviceVersion"`

	// ServiceVersionCommit Service Version
	ServiceVersionCommit string `json:"serviceVersionCommit"`
}

// ClusterOrchestratorRole Capability of the orchestrator
type ClusterOrchestratorRole string

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error
	Message string `json:"message"`
}

// LogLevel State of the sandbox
type LogLevel string

// SandboxCreateCatalogRequest defines model for SandboxCreateCatalogRequest.
type SandboxCreateCatalogRequest struct {
	ExecutionID string `json:"executionID"`

	// OrchestratorID Orchestrator where the sandbox is placed
	OrchestratorID string `json:"orchestratorID"`
	SandboxID      string `json:"sandboxID"`

	// SandboxMaxLength Maximum duration in hours
	SandboxMaxLength int64     `json:"sandboxMaxLength"`
	SandboxStartTime Timestamp `json:"sandboxStartTime"`
}

// SandboxDeleteCatalogRequest defines model for SandboxDeleteCatalogRequest.
type SandboxDeleteCatalogRequest struct {
	ExecutionID string `json:"executionID"`
	SandboxID   string `json:"sandboxID"`
}

// SandboxLog Log entry with timestamp and line
type SandboxLog struct {
	// Line Log line content
	Line string `json:"line"`

	// Timestamp Timestamp of the log entry
	Timestamp time.Time `json:"timestamp"`
}

// SandboxLogEntry defines model for SandboxLogEntry.
type SandboxLogEntry struct {
	Fields map[string]string `json:"fields"`

	// Level State of the sandbox
	Level LogLevel `json:"level"`

	// Message Log message content
	Message string `json:"message"`

	// Timestamp Timestamp of the log entry
	Timestamp time.Time `json:"timestamp"`
}

// SandboxLogsResponse defines model for SandboxLogsResponse.
type SandboxLogsResponse struct {
	// LogEntries Structured logs of the sandbox
	LogEntries []SandboxLogEntry `json:"logEntries"`

	// Logs Sandbox logs
	Logs []SandboxLog `json:"logs"`
}

// ServiceDiscoveryNodeStatusRequest defines model for ServiceDiscoveryNodeStatusRequest.
type ServiceDiscoveryNodeStatusRequest struct {
	// ServiceInstanceID Service instance ID that should be handled by the request
	ServiceInstanceID string `json:"serviceInstanceID"`

	// ServiceType Cluster node type
	ServiceType ClusterNodeType `json:"serviceType"`
}

// TemplateBuildLogsResponse defines model for TemplateBuildLogsResponse.
type TemplateBuildLogsResponse struct {
	// LogEntries Build logs structured
	LogEntries []BuildLogEntry `json:"logEntries"`

	// Logs Build logs
	Logs []string `json:"logs"`
}

// Timestamp defines model for Timestamp.
type Timestamp = time.Time

// N400 defines model for 400.
type N400 = Error

// N401 defines model for 401.
type N401 = Error

// N404 defines model for 404.
type N404 = Error

// N500 defines model for 500.
type N500 = Error

// V1SandboxLogsParams defines parameters for V1SandboxLogs.
type V1SandboxLogsParams struct {
	TeamID string `form:"teamID" json:"teamID"`

	// Start Starting timestamp of the logs that should be returned in milliseconds
	Start *int64 `form:"start,omitempty" json:"start,omitempty"`

	// Limit Maximum number of logs that should be returned
	Limit *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// V1TemplateBuildLogsParams defines parameters for V1TemplateBuildLogs.
type V1TemplateBuildLogsParams struct {
	OrchestratorID string `form:"orchestratorID" json:"orchestratorID"`
	TemplateID     string `form:"templateID" json:"templateID"`

	// Offset Index of the starting build log that should be returned with the template
	Offset *int32    `form:"offset,omitempty" json:"offset,omitempty"`
	Level  *LogLevel `form:"level,omitempty" json:"level,omitempty"`
}

// V1SandboxCatalogDeleteJSONRequestBody defines body for V1SandboxCatalogDelete for application/json ContentType.
type V1SandboxCatalogDeleteJSONRequestBody = SandboxDeleteCatalogRequest

// V1SandboxCatalogCreateJSONRequestBody defines body for V1SandboxCatalogCreate for application/json ContentType.
type V1SandboxCatalogCreateJSONRequestBody = SandboxCreateCatalogRequest

// V1ServiceDiscoveryNodeDrainJSONRequestBody defines body for V1ServiceDiscoveryNodeDrain for application/json ContentType.
type V1ServiceDiscoveryNodeDrainJSONRequestBody = ServiceDiscoveryNodeStatusRequest

// V1ServiceDiscoveryNodeKillJSONRequestBody defines body for V1ServiceDiscoveryNodeKill for application/json ContentType.
type V1ServiceDiscoveryNodeKillJSONRequestBody = ServiceDiscoveryNodeStatusRequest
