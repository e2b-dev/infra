// Code generated by ent, DO NOT EDIT.

package accesstoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the accesstoken type in the database.
	Label = "access_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "access_token"
	// FieldUniqueID holds the string denoting the unique_id field in the database.
	FieldUniqueID = "id"
	// FieldAccessTokenHash holds the string denoting the access_token_hash field in the database.
	FieldAccessTokenHash = "access_token_hash"
	// FieldAccessTokenMask holds the string denoting the access_token_mask field in the database.
	FieldAccessTokenMask = "access_token_mask"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// Table holds the table name of the accesstoken in the database.
	Table = "access_tokens"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "access_tokens"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
)

// Columns holds all SQL columns for accesstoken fields.
var Columns = []string{
	FieldID,
	FieldUniqueID,
	FieldAccessTokenHash,
	FieldAccessTokenMask,
	FieldName,
	FieldUserID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
)

// OrderOption defines the ordering options for the AccessToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUniqueID orders the results by the unique_id field.
func ByUniqueID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUniqueID, opts...).ToFunc()
}

// ByAccessTokenHash orders the results by the access_token_hash field.
func ByAccessTokenHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessTokenHash, opts...).ToFunc()
}

// ByAccessTokenMask orders the results by the access_token_mask field.
func ByAccessTokenMask(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessTokenMask, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
