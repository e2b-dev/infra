// Code generated by ent, DO NOT EDIT.

package models

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/cluster"
	"github.com/google/uuid"
)

// Cluster is the model entity for the Cluster schema.
type Cluster struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// EndpointTLS holds the value of the "endpoint_tls" field.
	EndpointTLS bool `json:"endpoint_tls,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// SandboxProxyDomain holds the value of the "sandbox_proxy_domain" field.
	SandboxProxyDomain string `json:"sandbox_proxy_domain,omitempty"`
	selectValues       sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cluster) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cluster.FieldEndpointTLS:
			values[i] = new(sql.NullBool)
		case cluster.FieldEndpoint, cluster.FieldToken, cluster.FieldSandboxProxyDomain:
			values[i] = new(sql.NullString)
		case cluster.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cluster fields.
func (c *Cluster) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cluster.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cluster.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				c.Endpoint = value.String
			}
		case cluster.FieldEndpointTLS:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint_tls", values[i])
			} else if value.Valid {
				c.EndpointTLS = value.Bool
			}
		case cluster.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				c.Token = value.String
			}
		case cluster.FieldSandboxProxyDomain:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sandbox_proxy_domain", values[i])
			} else if value.Valid {
				c.SandboxProxyDomain = value.String
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cluster.
// This includes values selected through modifiers, order, etc.
func (c *Cluster) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Cluster.
// Note that you need to call Cluster.Unwrap() before calling this method if this Cluster
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cluster) Update() *ClusterUpdateOne {
	return NewClusterClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cluster entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cluster) Unwrap() *Cluster {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("models: Cluster is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cluster) String() string {
	var builder strings.Builder
	builder.WriteString("Cluster(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("endpoint=")
	builder.WriteString(c.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("endpoint_tls=")
	builder.WriteString(fmt.Sprintf("%v", c.EndpointTLS))
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("sandbox_proxy_domain=")
	builder.WriteString(c.SandboxProxyDomain)
	builder.WriteByte(')')
	return builder.String()
}

// Clusters is a parsable slice of Cluster.
type Clusters []*Cluster
