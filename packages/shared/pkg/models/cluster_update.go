// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/cluster"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/predicate"
)

// ClusterUpdate is the builder for updating Cluster entities.
type ClusterUpdate struct {
	config
	hooks     []Hook
	mutation  *ClusterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ClusterUpdate builder.
func (cu *ClusterUpdate) Where(ps ...predicate.Cluster) *ClusterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetEndpoint sets the "endpoint" field.
func (cu *ClusterUpdate) SetEndpoint(s string) *ClusterUpdate {
	cu.mutation.SetEndpoint(s)
	return cu
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (cu *ClusterUpdate) SetNillableEndpoint(s *string) *ClusterUpdate {
	if s != nil {
		cu.SetEndpoint(*s)
	}
	return cu
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (cu *ClusterUpdate) SetEndpointTLS(b bool) *ClusterUpdate {
	cu.mutation.SetEndpointTLS(b)
	return cu
}

// SetNillableEndpointTLS sets the "endpoint_tls" field if the given value is not nil.
func (cu *ClusterUpdate) SetNillableEndpointTLS(b *bool) *ClusterUpdate {
	if b != nil {
		cu.SetEndpointTLS(*b)
	}
	return cu
}

// SetToken sets the "token" field.
func (cu *ClusterUpdate) SetToken(s string) *ClusterUpdate {
	cu.mutation.SetToken(s)
	return cu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (cu *ClusterUpdate) SetNillableToken(s *string) *ClusterUpdate {
	if s != nil {
		cu.SetToken(*s)
	}
	return cu
}

// SetSandboxProxyDomain sets the "sandbox_proxy_domain" field.
func (cu *ClusterUpdate) SetSandboxProxyDomain(s string) *ClusterUpdate {
	cu.mutation.SetSandboxProxyDomain(s)
	return cu
}

// SetNillableSandboxProxyDomain sets the "sandbox_proxy_domain" field if the given value is not nil.
func (cu *ClusterUpdate) SetNillableSandboxProxyDomain(s *string) *ClusterUpdate {
	if s != nil {
		cu.SetSandboxProxyDomain(*s)
	}
	return cu
}

// Mutation returns the ClusterMutation object of the builder.
func (cu *ClusterUpdate) Mutation() *ClusterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ClusterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClusterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClusterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClusterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ClusterUpdate) check() error {
	if v, ok := cu.mutation.Endpoint(); ok {
		if err := cluster.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`models: validator failed for field "Cluster.endpoint": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Token(); ok {
		if err := cluster.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`models: validator failed for field "Cluster.token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cu *ClusterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ClusterUpdate {
	cu.modifiers = append(cu.modifiers, modifiers...)
	return cu
}

func (cu *ClusterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cluster.Table, cluster.Columns, sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Endpoint(); ok {
		_spec.SetField(cluster.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := cu.mutation.EndpointTLS(); ok {
		_spec.SetField(cluster.FieldEndpointTLS, field.TypeBool, value)
	}
	if value, ok := cu.mutation.Token(); ok {
		_spec.SetField(cluster.FieldToken, field.TypeString, value)
	}
	if value, ok := cu.mutation.SandboxProxyDomain(); ok {
		_spec.SetField(cluster.FieldSandboxProxyDomain, field.TypeString, value)
	}
	_spec.Node.Schema = cu.schemaConfig.Cluster
	ctx = internal.NewSchemaConfigContext(ctx, cu.schemaConfig)
	_spec.AddModifiers(cu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cluster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ClusterUpdateOne is the builder for updating a single Cluster entity.
type ClusterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ClusterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEndpoint sets the "endpoint" field.
func (cuo *ClusterUpdateOne) SetEndpoint(s string) *ClusterUpdateOne {
	cuo.mutation.SetEndpoint(s)
	return cuo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (cuo *ClusterUpdateOne) SetNillableEndpoint(s *string) *ClusterUpdateOne {
	if s != nil {
		cuo.SetEndpoint(*s)
	}
	return cuo
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (cuo *ClusterUpdateOne) SetEndpointTLS(b bool) *ClusterUpdateOne {
	cuo.mutation.SetEndpointTLS(b)
	return cuo
}

// SetNillableEndpointTLS sets the "endpoint_tls" field if the given value is not nil.
func (cuo *ClusterUpdateOne) SetNillableEndpointTLS(b *bool) *ClusterUpdateOne {
	if b != nil {
		cuo.SetEndpointTLS(*b)
	}
	return cuo
}

// SetToken sets the "token" field.
func (cuo *ClusterUpdateOne) SetToken(s string) *ClusterUpdateOne {
	cuo.mutation.SetToken(s)
	return cuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (cuo *ClusterUpdateOne) SetNillableToken(s *string) *ClusterUpdateOne {
	if s != nil {
		cuo.SetToken(*s)
	}
	return cuo
}

// SetSandboxProxyDomain sets the "sandbox_proxy_domain" field.
func (cuo *ClusterUpdateOne) SetSandboxProxyDomain(s string) *ClusterUpdateOne {
	cuo.mutation.SetSandboxProxyDomain(s)
	return cuo
}

// SetNillableSandboxProxyDomain sets the "sandbox_proxy_domain" field if the given value is not nil.
func (cuo *ClusterUpdateOne) SetNillableSandboxProxyDomain(s *string) *ClusterUpdateOne {
	if s != nil {
		cuo.SetSandboxProxyDomain(*s)
	}
	return cuo
}

// Mutation returns the ClusterMutation object of the builder.
func (cuo *ClusterUpdateOne) Mutation() *ClusterMutation {
	return cuo.mutation
}

// Where appends a list predicates to the ClusterUpdate builder.
func (cuo *ClusterUpdateOne) Where(ps ...predicate.Cluster) *ClusterUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ClusterUpdateOne) Select(field string, fields ...string) *ClusterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cluster entity.
func (cuo *ClusterUpdateOne) Save(ctx context.Context) (*Cluster, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClusterUpdateOne) SaveX(ctx context.Context) *Cluster {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ClusterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClusterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ClusterUpdateOne) check() error {
	if v, ok := cuo.mutation.Endpoint(); ok {
		if err := cluster.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`models: validator failed for field "Cluster.endpoint": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Token(); ok {
		if err := cluster.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`models: validator failed for field "Cluster.token": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cuo *ClusterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ClusterUpdateOne {
	cuo.modifiers = append(cuo.modifiers, modifiers...)
	return cuo
}

func (cuo *ClusterUpdateOne) sqlSave(ctx context.Context) (_node *Cluster, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cluster.Table, cluster.Columns, sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "Cluster.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cluster.FieldID)
		for _, f := range fields {
			if !cluster.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != cluster.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Endpoint(); ok {
		_spec.SetField(cluster.FieldEndpoint, field.TypeString, value)
	}
	if value, ok := cuo.mutation.EndpointTLS(); ok {
		_spec.SetField(cluster.FieldEndpointTLS, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.Token(); ok {
		_spec.SetField(cluster.FieldToken, field.TypeString, value)
	}
	if value, ok := cuo.mutation.SandboxProxyDomain(); ok {
		_spec.SetField(cluster.FieldSandboxProxyDomain, field.TypeString, value)
	}
	_spec.Node.Schema = cuo.schemaConfig.Cluster
	ctx = internal.NewSchemaConfigContext(ctx, cuo.schemaConfig)
	_spec.AddModifiers(cuo.modifiers...)
	_node = &Cluster{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cluster.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
