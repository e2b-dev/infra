// Code generated by ent, DO NOT EDIT.

package cluster

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cluster type in the database.
	Label = "cluster"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldEndpointTLS holds the string denoting the endpoint_tls field in the database.
	FieldEndpointTLS = "endpoint_tls"
	// FieldToken holds the string denoting the token field in the database.
	FieldToken = "token"
	// FieldSandboxProxyDomain holds the string denoting the sandbox_proxy_domain field in the database.
	FieldSandboxProxyDomain = "sandbox_proxy_domain"
	// Table holds the table name of the cluster in the database.
	Table = "clusters"
)

// Columns holds all SQL columns for cluster fields.
var Columns = []string{
	FieldID,
	FieldEndpoint,
	FieldEndpointTLS,
	FieldToken,
	FieldSandboxProxyDomain,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EndpointValidator is a validator for the "endpoint" field. It is called by the builders before save.
	EndpointValidator func(string) error
	// DefaultEndpointTLS holds the default value on creation for the "endpoint_tls" field.
	DefaultEndpointTLS bool
	// TokenValidator is a validator for the "token" field. It is called by the builders before save.
	TokenValidator func(string) error
)

// OrderOption defines the ordering options for the Cluster queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByEndpointTLS orders the results by the endpoint_tls field.
func ByEndpointTLS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpointTLS, opts...).ToFunc()
}

// ByToken orders the results by the token field.
func ByToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldToken, opts...).ToFunc()
}

// BySandboxProxyDomain orders the results by the sandbox_proxy_domain field.
func BySandboxProxyDomain(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSandboxProxyDomain, opts...).ToFunc()
}
