// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/shared/pkg/models/cluster"
	"github.com/google/uuid"
)

// ClusterCreate is the builder for creating a Cluster entity.
type ClusterCreate struct {
	config
	mutation *ClusterMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEndpoint sets the "endpoint" field.
func (cc *ClusterCreate) SetEndpoint(s string) *ClusterCreate {
	cc.mutation.SetEndpoint(s)
	return cc
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (cc *ClusterCreate) SetEndpointTLS(b bool) *ClusterCreate {
	cc.mutation.SetEndpointTLS(b)
	return cc
}

// SetNillableEndpointTLS sets the "endpoint_tls" field if the given value is not nil.
func (cc *ClusterCreate) SetNillableEndpointTLS(b *bool) *ClusterCreate {
	if b != nil {
		cc.SetEndpointTLS(*b)
	}
	return cc
}

// SetToken sets the "token" field.
func (cc *ClusterCreate) SetToken(s string) *ClusterCreate {
	cc.mutation.SetToken(s)
	return cc
}

// SetID sets the "id" field.
func (cc *ClusterCreate) SetID(u uuid.UUID) *ClusterCreate {
	cc.mutation.SetID(u)
	return cc
}

// Mutation returns the ClusterMutation object of the builder.
func (cc *ClusterCreate) Mutation() *ClusterMutation {
	return cc.mutation
}

// Save creates the Cluster in the database.
func (cc *ClusterCreate) Save(ctx context.Context) (*Cluster, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ClusterCreate) SaveX(ctx context.Context) *Cluster {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ClusterCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ClusterCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ClusterCreate) defaults() {
	if _, ok := cc.mutation.EndpointTLS(); !ok {
		v := cluster.DefaultEndpointTLS
		cc.mutation.SetEndpointTLS(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ClusterCreate) check() error {
	if _, ok := cc.mutation.Endpoint(); !ok {
		return &ValidationError{Name: "endpoint", err: errors.New(`models: missing required field "Cluster.endpoint"`)}
	}
	if v, ok := cc.mutation.Endpoint(); ok {
		if err := cluster.EndpointValidator(v); err != nil {
			return &ValidationError{Name: "endpoint", err: fmt.Errorf(`models: validator failed for field "Cluster.endpoint": %w`, err)}
		}
	}
	if _, ok := cc.mutation.EndpointTLS(); !ok {
		return &ValidationError{Name: "endpoint_tls", err: errors.New(`models: missing required field "Cluster.endpoint_tls"`)}
	}
	if _, ok := cc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`models: missing required field "Cluster.token"`)}
	}
	if v, ok := cc.mutation.Token(); ok {
		if err := cluster.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`models: validator failed for field "Cluster.token": %w`, err)}
		}
	}
	return nil
}

func (cc *ClusterCreate) sqlSave(ctx context.Context) (*Cluster, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ClusterCreate) createSpec() (*Cluster, *sqlgraph.CreateSpec) {
	var (
		_node = &Cluster{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cluster.Table, sqlgraph.NewFieldSpec(cluster.FieldID, field.TypeUUID))
	)
	_spec.Schema = cc.schemaConfig.Cluster
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.Endpoint(); ok {
		_spec.SetField(cluster.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := cc.mutation.EndpointTLS(); ok {
		_spec.SetField(cluster.FieldEndpointTLS, field.TypeBool, value)
		_node.EndpointTLS = value
	}
	if value, ok := cc.mutation.Token(); ok {
		_spec.SetField(cluster.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cluster.Create().
//		SetEndpoint(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClusterUpsert) {
//			SetEndpoint(v+v).
//		}).
//		Exec(ctx)
func (cc *ClusterCreate) OnConflict(opts ...sql.ConflictOption) *ClusterUpsertOne {
	cc.conflict = opts
	return &ClusterUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cluster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ClusterCreate) OnConflictColumns(columns ...string) *ClusterUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ClusterUpsertOne{
		create: cc,
	}
}

type (
	// ClusterUpsertOne is the builder for "upsert"-ing
	//  one Cluster node.
	ClusterUpsertOne struct {
		create *ClusterCreate
	}

	// ClusterUpsert is the "OnConflict" setter.
	ClusterUpsert struct {
		*sql.UpdateSet
	}
)

// SetEndpoint sets the "endpoint" field.
func (u *ClusterUpsert) SetEndpoint(v string) *ClusterUpsert {
	u.Set(cluster.FieldEndpoint, v)
	return u
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ClusterUpsert) UpdateEndpoint() *ClusterUpsert {
	u.SetExcluded(cluster.FieldEndpoint)
	return u
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (u *ClusterUpsert) SetEndpointTLS(v bool) *ClusterUpsert {
	u.Set(cluster.FieldEndpointTLS, v)
	return u
}

// UpdateEndpointTLS sets the "endpoint_tls" field to the value that was provided on create.
func (u *ClusterUpsert) UpdateEndpointTLS() *ClusterUpsert {
	u.SetExcluded(cluster.FieldEndpointTLS)
	return u
}

// SetToken sets the "token" field.
func (u *ClusterUpsert) SetToken(v string) *ClusterUpsert {
	u.Set(cluster.FieldToken, v)
	return u
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ClusterUpsert) UpdateToken() *ClusterUpsert {
	u.SetExcluded(cluster.FieldToken)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Cluster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cluster.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClusterUpsertOne) UpdateNewValues() *ClusterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cluster.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cluster.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ClusterUpsertOne) Ignore() *ClusterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClusterUpsertOne) DoNothing() *ClusterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClusterCreate.OnConflict
// documentation for more info.
func (u *ClusterUpsertOne) Update(set func(*ClusterUpsert)) *ClusterUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClusterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *ClusterUpsertOne) SetEndpoint(v string) *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ClusterUpsertOne) UpdateEndpoint() *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateEndpoint()
	})
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (u *ClusterUpsertOne) SetEndpointTLS(v bool) *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.SetEndpointTLS(v)
	})
}

// UpdateEndpointTLS sets the "endpoint_tls" field to the value that was provided on create.
func (u *ClusterUpsertOne) UpdateEndpointTLS() *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateEndpointTLS()
	})
}

// SetToken sets the "token" field.
func (u *ClusterUpsertOne) SetToken(v string) *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ClusterUpsertOne) UpdateToken() *ClusterUpsertOne {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateToken()
	})
}

// Exec executes the query.
func (u *ClusterUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for ClusterCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClusterUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ClusterUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("models: ClusterUpsertOne.ID is not supported by MySQL driver. Use ClusterUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ClusterUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ClusterCreateBulk is the builder for creating many Cluster entities in bulk.
type ClusterCreateBulk struct {
	config
	err      error
	builders []*ClusterCreate
	conflict []sql.ConflictOption
}

// Save creates the Cluster entities in the database.
func (ccb *ClusterCreateBulk) Save(ctx context.Context) ([]*Cluster, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cluster, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ClusterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ClusterCreateBulk) SaveX(ctx context.Context) []*Cluster {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ClusterCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ClusterCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cluster.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ClusterUpsert) {
//			SetEndpoint(v+v).
//		}).
//		Exec(ctx)
func (ccb *ClusterCreateBulk) OnConflict(opts ...sql.ConflictOption) *ClusterUpsertBulk {
	ccb.conflict = opts
	return &ClusterUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cluster.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ClusterCreateBulk) OnConflictColumns(columns ...string) *ClusterUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ClusterUpsertBulk{
		create: ccb,
	}
}

// ClusterUpsertBulk is the builder for "upsert"-ing
// a bulk of Cluster nodes.
type ClusterUpsertBulk struct {
	create *ClusterCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cluster.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cluster.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ClusterUpsertBulk) UpdateNewValues() *ClusterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cluster.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cluster.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ClusterUpsertBulk) Ignore() *ClusterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ClusterUpsertBulk) DoNothing() *ClusterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ClusterCreateBulk.OnConflict
// documentation for more info.
func (u *ClusterUpsertBulk) Update(set func(*ClusterUpsert)) *ClusterUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ClusterUpsert{UpdateSet: update})
	}))
	return u
}

// SetEndpoint sets the "endpoint" field.
func (u *ClusterUpsertBulk) SetEndpoint(v string) *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.SetEndpoint(v)
	})
}

// UpdateEndpoint sets the "endpoint" field to the value that was provided on create.
func (u *ClusterUpsertBulk) UpdateEndpoint() *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateEndpoint()
	})
}

// SetEndpointTLS sets the "endpoint_tls" field.
func (u *ClusterUpsertBulk) SetEndpointTLS(v bool) *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.SetEndpointTLS(v)
	})
}

// UpdateEndpointTLS sets the "endpoint_tls" field to the value that was provided on create.
func (u *ClusterUpsertBulk) UpdateEndpointTLS() *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateEndpointTLS()
	})
}

// SetToken sets the "token" field.
func (u *ClusterUpsertBulk) SetToken(v string) *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.SetToken(v)
	})
}

// UpdateToken sets the "token" field to the value that was provided on create.
func (u *ClusterUpsertBulk) UpdateToken() *ClusterUpsertBulk {
	return u.Update(func(s *ClusterUpsert) {
		s.UpdateToken()
	})
}

// Exec executes the query.
func (u *ClusterUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("models: OnConflict was set for builder %d. Set it on the ClusterCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for ClusterCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ClusterUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
