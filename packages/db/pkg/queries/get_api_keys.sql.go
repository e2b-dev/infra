// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_api_keys.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getTeamAPIKeysWithCreator = `-- name: GetTeamAPIKeysWithCreator :many
SELECT
    tak.id,
    tak.name,
    tak.api_key_prefix,
    tak.api_key_length,
    tak.api_key_mask_prefix,
    tak.api_key_mask_suffix,
    tak.created_by as created_by_id,
    tak.created_at,
    tak.last_used,
    u.email AS created_by_email
FROM "public"."team_api_keys" tak
LEFT JOIN "auth"."users" u ON tak.created_by = u.id
WHERE tak.team_id = $1
`

type GetTeamAPIKeysWithCreatorRow struct {
	ID               uuid.UUID
	Name             string
	ApiKeyPrefix     string
	ApiKeyLength     int32
	ApiKeyMaskPrefix string
	ApiKeyMaskSuffix string
	CreatedByID      *uuid.UUID
	CreatedAt        time.Time
	LastUsed         *time.Time
	CreatedByEmail   *string
}

func (q *Queries) GetTeamAPIKeysWithCreator(ctx context.Context, teamID uuid.UUID) ([]GetTeamAPIKeysWithCreatorRow, error) {
	rows, err := q.db.Query(ctx, getTeamAPIKeysWithCreator, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamAPIKeysWithCreatorRow
	for rows.Next() {
		var i GetTeamAPIKeysWithCreatorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ApiKeyPrefix,
			&i.ApiKeyLength,
			&i.ApiKeyMaskPrefix,
			&i.ApiKeyMaskSuffix,
			&i.CreatedByID,
			&i.CreatedAt,
			&i.LastUsed,
			&i.CreatedByEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
