// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_access_token.sql

package queries

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccessToken = `-- name: CreateAccessToken :one
INSERT INTO "public"."access_tokens"(
    id,
    user_id,
    access_token_hash,
    access_token_prefix,
    access_token_length,
    access_token_mask_prefix,
    access_token_mask_suffix,
    name
)
    VALUES
(
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
$8
) RETURNING id, user_id, access_token_hash, access_token_prefix, access_token_length, access_token_mask_prefix, access_token_mask_suffix, name, created_at
`

type CreateAccessTokenParams struct {
	ID                    uuid.UUID
	UserID                uuid.UUID
	AccessTokenHash       string
	AccessTokenPrefix     string
	AccessTokenLength     int32
	AccessTokenMaskPrefix string
	AccessTokenMaskSuffix string
	Name                  string
}

type CreateAccessTokenRow struct {
	ID                    uuid.UUID
	UserID                uuid.UUID
	AccessTokenHash       string
	AccessTokenPrefix     string
	AccessTokenLength     int32
	AccessTokenMaskPrefix string
	AccessTokenMaskSuffix string
	Name                  string
	CreatedAt             time.Time
}

func (q *Queries) CreateAccessToken(ctx context.Context, arg CreateAccessTokenParams) (CreateAccessTokenRow, error) {
	row := q.db.QueryRow(ctx, createAccessToken,
		arg.ID,
		arg.UserID,
		arg.AccessTokenHash,
		arg.AccessTokenPrefix,
		arg.AccessTokenLength,
		arg.AccessTokenMaskPrefix,
		arg.AccessTokenMaskSuffix,
		arg.Name,
	)
	var i CreateAccessTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.AccessTokenHash,
		&i.AccessTokenPrefix,
		&i.AccessTokenLength,
		&i.AccessTokenMaskPrefix,
		&i.AccessTokenMaskSuffix,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
