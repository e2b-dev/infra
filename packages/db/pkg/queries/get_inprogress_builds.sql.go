// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_inprogress_builds.sql

package queries

import (
	"context"
)

const getInProgressTemplateBuilds = `-- name: GetInProgressTemplateBuilds :many
SELECT t.id, t.created_at, t.is_blocked, t.name, t.tier, t.email, t.is_banned, t.blocked_reason, t.cluster_id, e.id, e.created_at, e.updated_at, e.public, e.build_count, e.spawn_count, e.last_spawned_at, e.team_id, e.created_by, e.cluster_id, b.id, b.created_at, b.updated_at, b.finished_at, b.status, b.dockerfile, b.start_cmd, b.vcpu, b.ram_mb, b.free_disk_size_mb, b.total_disk_size_mb, b.kernel_version, b.firecracker_version, b.env_id, b.envd_version, b.ready_cmd, b.cluster_node_id, b.reason
FROM public.env_builds b
JOIN public.envs e ON e.id = b.env_id
JOIN public.teams t ON e.team_id = t.id
WHERE b.status = 'waiting' OR b.status = 'building'
ORDER BY b.created_at DESC
`

type GetInProgressTemplateBuildsRow struct {
	Team     Team
	Env      Env
	EnvBuild EnvBuild
}

func (q *Queries) GetInProgressTemplateBuilds(ctx context.Context) ([]GetInProgressTemplateBuildsRow, error) {
	rows, err := q.db.Query(ctx, getInProgressTemplateBuilds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInProgressTemplateBuildsRow
	for rows.Next() {
		var i GetInProgressTemplateBuildsRow
		if err := rows.Scan(
			&i.Team.ID,
			&i.Team.CreatedAt,
			&i.Team.IsBlocked,
			&i.Team.Name,
			&i.Team.Tier,
			&i.Team.Email,
			&i.Team.IsBanned,
			&i.Team.BlockedReason,
			&i.Team.ClusterID,
			&i.Env.ID,
			&i.Env.CreatedAt,
			&i.Env.UpdatedAt,
			&i.Env.Public,
			&i.Env.BuildCount,
			&i.Env.SpawnCount,
			&i.Env.LastSpawnedAt,
			&i.Env.TeamID,
			&i.Env.CreatedBy,
			&i.Env.ClusterID,
			&i.EnvBuild.ID,
			&i.EnvBuild.CreatedAt,
			&i.EnvBuild.UpdatedAt,
			&i.EnvBuild.FinishedAt,
			&i.EnvBuild.Status,
			&i.EnvBuild.Dockerfile,
			&i.EnvBuild.StartCmd,
			&i.EnvBuild.Vcpu,
			&i.EnvBuild.RamMb,
			&i.EnvBuild.FreeDiskSizeMb,
			&i.EnvBuild.TotalDiskSizeMb,
			&i.EnvBuild.KernelVersion,
			&i.EnvBuild.FirecrackerVersion,
			&i.EnvBuild.EnvID,
			&i.EnvBuild.EnvdVersion,
			&i.EnvBuild.ReadyCmd,
			&i.EnvBuild.ClusterNodeID,
			&i.EnvBuild.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
