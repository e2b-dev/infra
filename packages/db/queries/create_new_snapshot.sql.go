// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: create_new_snapshot.sql

package queries

import (
	"context"

	"github.com/e2b-dev/infra/packages/db/types"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createNewSnapshot = `-- name: CreateNewSnapshot :one
WITH upd AS (
    UPDATE "public"."snapshots" s
        SET metadata = $9,
            sandbox_started_at = $10,
            origin_node_id = $7,
            auto_pause = $11
        FROM "public"."envs" e
        WHERE s.sandbox_id = $12
            AND e.id = $13
            AND e.team_id = $14
        RETURNING s.env_id
),
    ins_env AS (
    INSERT INTO "public"."envs" (id, public, created_by, team_id, updated_at)
        SELECT $13, false, NULL, $14, now()
        WHERE NOT EXISTS (SELECT 1 FROM upd)
        RETURNING id
), ins_snap AS (
    INSERT INTO "public"."snapshots" (
                          sandbox_id, base_env_id, env_id, metadata,
                          sandbox_started_at, env_secure, allow_internet_access,
                          origin_node_id, auto_pause
        )
        SELECT
            $12, $15, id, $9,
            $10, $16, $17,
            $7, $11
        FROM ins_env
        WHERE NOT EXISTS (SELECT 1 FROM upd)
        RETURNING env_id
),
chosen_env AS (
    SELECT env_id FROM upd
    UNION ALL
    SELECT env_id FROM ins_snap
    LIMIT 1
)
INSERT INTO "public"."env_builds" (
    env_id, vcpu, ram_mb, free_disk_size_mb,
    kernel_version, firecracker_version, envd_version,
    status, cluster_node_id, total_disk_size_mb, updated_at
)
SELECT
    env_id, $1, $2, 0,
    $3, $4, $5,
    $6, $7, $8, now()
FROM chosen_env
RETURNING id, env_id
`

type CreateNewSnapshotParams struct {
	Vcpu                int64
	RamMb               int64
	KernelVersion       string
	FirecrackerVersion  string
	EnvdVersion         *string
	Status              string
	OriginNodeID        string
	TotalDiskSizeMb     *int64
	Metadata            types.JSONBStringMap
	StartedAt           pgtype.Timestamptz
	AutoPause           bool
	SandboxID           string
	TemplateID          string
	TeamID              uuid.UUID
	BaseTemplateID      string
	Secure              bool
	AllowInternetAccess *bool
}

type CreateNewSnapshotRow struct {
	ID    uuid.UUID
	EnvID string
}

// Try to update snapshot
// If there's no snapshot WHERE NOT EXISTS (SELECT 1 FROM upd) will trigger following queries to create new env and snapshot
// Get the env id (one of the queries is empty)
// Create a new build
func (q *Queries) CreateNewSnapshot(ctx context.Context, arg CreateNewSnapshotParams) (CreateNewSnapshotRow, error) {
	row := q.db.QueryRow(ctx, createNewSnapshot,
		arg.Vcpu,
		arg.RamMb,
		arg.KernelVersion,
		arg.FirecrackerVersion,
		arg.EnvdVersion,
		arg.Status,
		arg.OriginNodeID,
		arg.TotalDiskSizeMb,
		arg.Metadata,
		arg.StartedAt,
		arg.AutoPause,
		arg.SandboxID,
		arg.TemplateID,
		arg.TeamID,
		arg.BaseTemplateID,
		arg.Secure,
		arg.AllowInternetAccess,
	)
	var i CreateNewSnapshotRow
	err := row.Scan(&i.ID, &i.EnvID)
	return i, err
}
