// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_template_with_builds.sql

package queries

import (
	"context"
)

const getTemplateBuilds = `-- name: GetTemplateBuilds :many
SELECT eb.id, eb.created_at, eb.updated_at, eb.finished_at, eb.status, eb.dockerfile, eb.start_cmd, eb.vcpu, eb.ram_mb, eb.free_disk_size_mb, eb.total_disk_size_mb, eb.kernel_version, eb.firecracker_version, eb.env_id, eb.envd_version, eb.ready_cmd, eb.cluster_node_id, eb.reason, eb.version
FROM public.env_builds eb
WHERE eb.env_id = $1
ORDER BY eb.created_at DESC
`

func (q *Queries) GetTemplateBuilds(ctx context.Context, templateID string) ([]EnvBuild, error) {
	rows, err := q.db.Query(ctx, getTemplateBuilds, templateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnvBuild
	for rows.Next() {
		var i EnvBuild
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FinishedAt,
			&i.Status,
			&i.Dockerfile,
			&i.StartCmd,
			&i.Vcpu,
			&i.RamMb,
			&i.FreeDiskSizeMb,
			&i.TotalDiskSizeMb,
			&i.KernelVersion,
			&i.FirecrackerVersion,
			&i.EnvID,
			&i.EnvdVersion,
			&i.ReadyCmd,
			&i.ClusterNodeID,
			&i.Reason,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
