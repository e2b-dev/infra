// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_template_build.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const getTemplateBuild = `-- name: GetTemplateBuild :one
SELECT e.id, e.created_at, e.updated_at, e.public, e.build_count, e.spawn_count, e.last_spawned_at, e.team_id, e.created_by, e.cluster_id, eb.id, eb.created_at, eb.updated_at, eb.finished_at, eb.status, eb.dockerfile, eb.start_cmd, eb.vcpu, eb.ram_mb, eb.free_disk_size_mb, eb.total_disk_size_mb, eb.kernel_version, eb.firecracker_version, eb.env_id, eb.envd_version, eb.ready_cmd, eb.cluster_node_id, eb.reason
FROM "public"."envs" e
JOIN "public"."env_builds" eb ON eb.env_id = e.id
WHERE e.id = $1 AND eb.id = $2
`

type GetTemplateBuildParams struct {
	TemplateID string
	BuildID    uuid.UUID
}

type GetTemplateBuildRow struct {
	Env      Env
	EnvBuild EnvBuild
}

func (q *Queries) GetTemplateBuild(ctx context.Context, arg GetTemplateBuildParams) (GetTemplateBuildRow, error) {
	row := q.db.QueryRow(ctx, getTemplateBuild, arg.TemplateID, arg.BuildID)
	var i GetTemplateBuildRow
	err := row.Scan(
		&i.Env.ID,
		&i.Env.CreatedAt,
		&i.Env.UpdatedAt,
		&i.Env.Public,
		&i.Env.BuildCount,
		&i.Env.SpawnCount,
		&i.Env.LastSpawnedAt,
		&i.Env.TeamID,
		&i.Env.CreatedBy,
		&i.Env.ClusterID,
		&i.EnvBuild.ID,
		&i.EnvBuild.CreatedAt,
		&i.EnvBuild.UpdatedAt,
		&i.EnvBuild.FinishedAt,
		&i.EnvBuild.Status,
		&i.EnvBuild.Dockerfile,
		&i.EnvBuild.StartCmd,
		&i.EnvBuild.Vcpu,
		&i.EnvBuild.RamMb,
		&i.EnvBuild.FreeDiskSizeMb,
		&i.EnvBuild.TotalDiskSizeMb,
		&i.EnvBuild.KernelVersion,
		&i.EnvBuild.FirecrackerVersion,
		&i.EnvBuild.EnvID,
		&i.EnvBuild.EnvdVersion,
		&i.EnvBuild.ReadyCmd,
		&i.EnvBuild.ClusterNodeID,
		&i.EnvBuild.Reason,
	)
	return i, err
}
