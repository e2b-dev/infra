// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: get_env_with_build.sql

package queries

import (
	"context"
)

const getEnvWithBuild = `-- name: GetEnvWithBuild :one
SELECT
  e.id, e.created_at, e.updated_at, e.public, e.build_count, e.spawn_count, e.last_spawned_at, e.team_id, e.created_by,
  eb.id, eb.created_at, eb.updated_at, eb.finished_at, eb.status, eb.dockerfile, eb.start_cmd, eb.vcpu, eb.ram_mb, eb.free_disk_size_mb, eb.total_disk_size_mb, eb.kernel_version, eb.firecracker_version, eb.env_id, eb.envd_version,
  (
    SELECT array_agg(alias)::text[]
    FROM public.env_aliases
    WHERE env_id = e.id
  ) AS aliases
FROM public.envs e
LEFT JOIN public.env_aliases ea ON ea.env_id = e.id
JOIN public.env_builds eb ON eb.env_id = e.id
WHERE (e.id = $1 OR ea.alias = $1) and eb.status = 'uploaded'
ORDER BY eb.finished_at DESC
LIMIT 1
`

type GetEnvWithBuildRow struct {
	Env      Env
	EnvBuild EnvBuild
	Aliases  []string
}

func (q *Queries) GetEnvWithBuild(ctx context.Context, id string) (GetEnvWithBuildRow, error) {
	row := q.db.QueryRow(ctx, getEnvWithBuild, id)
	var i GetEnvWithBuildRow
	err := row.Scan(
		&i.Env.ID,
		&i.Env.CreatedAt,
		&i.Env.UpdatedAt,
		&i.Env.Public,
		&i.Env.BuildCount,
		&i.Env.SpawnCount,
		&i.Env.LastSpawnedAt,
		&i.Env.TeamID,
		&i.Env.CreatedBy,
		&i.EnvBuild.ID,
		&i.EnvBuild.CreatedAt,
		&i.EnvBuild.UpdatedAt,
		&i.EnvBuild.FinishedAt,
		&i.EnvBuild.Status,
		&i.EnvBuild.Dockerfile,
		&i.EnvBuild.StartCmd,
		&i.EnvBuild.Vcpu,
		&i.EnvBuild.RamMb,
		&i.EnvBuild.FreeDiskSizeMb,
		&i.EnvBuild.TotalDiskSizeMb,
		&i.EnvBuild.KernelVersion,
		&i.EnvBuild.FirecrackerVersion,
		&i.EnvBuild.EnvID,
		&i.EnvBuild.EnvdVersion,
		&i.Aliases,
	)
	return i, err
}
