// Code generated by mockery v2.52.1. DO NOT EDIT.

package sandbox

import (
	header "github.com/e2b-dev/infra/packages/shared/pkg/storage/header"
	mock "github.com/stretchr/testify/mock"
)

// TemplateProvider is an autogenerated mock type for the TemplateProvider type
type TemplateProvider struct {
	mock.Mock
}

type TemplateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *TemplateProvider) EXPECT() *TemplateProvider_Expecter {
	return &TemplateProvider_Expecter{mock: &_m.Mock}
}

// MemfileHeader provides a mock function with no fields
func (_m *TemplateProvider) MemfileHeader() (*header.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MemfileHeader")
	}

	var r0 *header.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*header.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *header.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*header.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateProvider_MemfileHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MemfileHeader'
type TemplateProvider_MemfileHeader_Call struct {
	*mock.Call
}

// MemfileHeader is a helper method to define mock.On call
func (_e *TemplateProvider_Expecter) MemfileHeader() *TemplateProvider_MemfileHeader_Call {
	return &TemplateProvider_MemfileHeader_Call{Call: _e.mock.On("MemfileHeader")}
}

func (_c *TemplateProvider_MemfileHeader_Call) Run(run func()) *TemplateProvider_MemfileHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TemplateProvider_MemfileHeader_Call) Return(_a0 *header.Header, _a1 error) *TemplateProvider_MemfileHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TemplateProvider_MemfileHeader_Call) RunAndReturn(run func() (*header.Header, error)) *TemplateProvider_MemfileHeader_Call {
	_c.Call.Return(run)
	return _c
}

// RootfsHeader provides a mock function with no fields
func (_m *TemplateProvider) RootfsHeader() (*header.Header, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RootfsHeader")
	}

	var r0 *header.Header
	var r1 error
	if rf, ok := ret.Get(0).(func() (*header.Header, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *header.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*header.Header)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TemplateProvider_RootfsHeader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RootfsHeader'
type TemplateProvider_RootfsHeader_Call struct {
	*mock.Call
}

// RootfsHeader is a helper method to define mock.On call
func (_e *TemplateProvider_Expecter) RootfsHeader() *TemplateProvider_RootfsHeader_Call {
	return &TemplateProvider_RootfsHeader_Call{Call: _e.mock.On("RootfsHeader")}
}

func (_c *TemplateProvider_RootfsHeader_Call) Run(run func()) *TemplateProvider_RootfsHeader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TemplateProvider_RootfsHeader_Call) Return(_a0 *header.Header, _a1 error) *TemplateProvider_RootfsHeader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TemplateProvider_RootfsHeader_Call) RunAndReturn(run func() (*header.Header, error)) *TemplateProvider_RootfsHeader_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplateProvider creates a new instance of TemplateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *TemplateProvider {
	mock := &TemplateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
