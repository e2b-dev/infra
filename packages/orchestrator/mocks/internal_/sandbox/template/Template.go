// Code generated by mockery v2.52.1. DO NOT EDIT.

package template

import (
	template "github.com/e2b-dev/infra/packages/orchestrator/internal/sandbox/template"
	storage "github.com/e2b-dev/infra/packages/shared/pkg/storage"
	mock "github.com/stretchr/testify/mock"
)

// Template is an autogenerated mock type for the Template type
type Template struct {
	mock.Mock
}

type Template_Expecter struct {
	mock *mock.Mock
}

func (_m *Template) EXPECT() *Template_Expecter {
	return &Template_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Template) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Template_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Template_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Template_Expecter) Close() *Template_Close_Call {
	return &Template_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Template_Close_Call) Run(run func()) *Template_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Close_Call) Return(_a0 error) *Template_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_Close_Call) RunAndReturn(run func() error) *Template_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Files provides a mock function with no fields
func (_m *Template) Files() *storage.TemplateCacheFiles {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Files")
	}

	var r0 *storage.TemplateCacheFiles
	if rf, ok := ret.Get(0).(func() *storage.TemplateCacheFiles); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.TemplateCacheFiles)
		}
	}

	return r0
}

// Template_Files_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Files'
type Template_Files_Call struct {
	*mock.Call
}

// Files is a helper method to define mock.On call
func (_e *Template_Expecter) Files() *Template_Files_Call {
	return &Template_Files_Call{Call: _e.mock.On("Files")}
}

func (_c *Template_Files_Call) Run(run func()) *Template_Files_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Files_Call) Return(_a0 *storage.TemplateCacheFiles) *Template_Files_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Template_Files_Call) RunAndReturn(run func() *storage.TemplateCacheFiles) *Template_Files_Call {
	_c.Call.Return(run)
	return _c
}

// Memfile provides a mock function with no fields
func (_m *Template) Memfile() (*template.Storage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Memfile")
	}

	var r0 *template.Storage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*template.Storage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *template.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*template.Storage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Memfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Memfile'
type Template_Memfile_Call struct {
	*mock.Call
}

// Memfile is a helper method to define mock.On call
func (_e *Template_Expecter) Memfile() *Template_Memfile_Call {
	return &Template_Memfile_Call{Call: _e.mock.On("Memfile")}
}

func (_c *Template_Memfile_Call) Run(run func()) *Template_Memfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Memfile_Call) Return(_a0 *template.Storage, _a1 error) *Template_Memfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Template_Memfile_Call) RunAndReturn(run func() (*template.Storage, error)) *Template_Memfile_Call {
	_c.Call.Return(run)
	return _c
}

// Rootfs provides a mock function with no fields
func (_m *Template) Rootfs() (*template.Storage, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Rootfs")
	}

	var r0 *template.Storage
	var r1 error
	if rf, ok := ret.Get(0).(func() (*template.Storage, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *template.Storage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*template.Storage)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Rootfs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rootfs'
type Template_Rootfs_Call struct {
	*mock.Call
}

// Rootfs is a helper method to define mock.On call
func (_e *Template_Expecter) Rootfs() *Template_Rootfs_Call {
	return &Template_Rootfs_Call{Call: _e.mock.On("Rootfs")}
}

func (_c *Template_Rootfs_Call) Run(run func()) *Template_Rootfs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Rootfs_Call) Return(_a0 *template.Storage, _a1 error) *Template_Rootfs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Template_Rootfs_Call) RunAndReturn(run func() (*template.Storage, error)) *Template_Rootfs_Call {
	_c.Call.Return(run)
	return _c
}

// Snapfile provides a mock function with no fields
func (_m *Template) Snapfile() (template.File, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Snapfile")
	}

	var r0 template.File
	var r1 error
	if rf, ok := ret.Get(0).(func() (template.File, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() template.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template.File)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Template_Snapfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Snapfile'
type Template_Snapfile_Call struct {
	*mock.Call
}

// Snapfile is a helper method to define mock.On call
func (_e *Template_Expecter) Snapfile() *Template_Snapfile_Call {
	return &Template_Snapfile_Call{Call: _e.mock.On("Snapfile")}
}

func (_c *Template_Snapfile_Call) Run(run func()) *Template_Snapfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Template_Snapfile_Call) Return(_a0 template.File, _a1 error) *Template_Snapfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Template_Snapfile_Call) RunAndReturn(run func() (template.File, error)) *Template_Snapfile_Call {
	_c.Call.Return(run)
	return _c
}

// NewTemplate creates a new instance of Template. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTemplate(t interface {
	mock.TestingT
	Cleanup(func())
}) *Template {
	mock := &Template{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
