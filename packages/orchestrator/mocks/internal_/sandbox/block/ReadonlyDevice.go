// Code generated by mockery v2.52.1. DO NOT EDIT.

package block

import mock "github.com/stretchr/testify/mock"

// ReadonlyDevice is an autogenerated mock type for the ReadonlyDevice type
type ReadonlyDevice struct {
	mock.Mock
}

type ReadonlyDevice_Expecter struct {
	mock *mock.Mock
}

func (_m *ReadonlyDevice) EXPECT() *ReadonlyDevice_Expecter {
	return &ReadonlyDevice_Expecter{mock: &_m.Mock}
}

// ReadAt provides a mock function with given fields: p, off
func (_m *ReadonlyDevice) ReadAt(p []byte, off int64) (int, error) {
	ret := _m.Called(p, off)

	if len(ret) == 0 {
		panic("no return value specified for ReadAt")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte, int64) (int, error)); ok {
		return rf(p, off)
	}
	if rf, ok := ret.Get(0).(func([]byte, int64) int); ok {
		r0 = rf(p, off)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte, int64) error); ok {
		r1 = rf(p, off)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadonlyDevice_ReadAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAt'
type ReadonlyDevice_ReadAt_Call struct {
	*mock.Call
}

// ReadAt is a helper method to define mock.On call
//   - p []byte
//   - off int64
func (_e *ReadonlyDevice_Expecter) ReadAt(p interface{}, off interface{}) *ReadonlyDevice_ReadAt_Call {
	return &ReadonlyDevice_ReadAt_Call{Call: _e.mock.On("ReadAt", p, off)}
}

func (_c *ReadonlyDevice_ReadAt_Call) Run(run func(p []byte, off int64)) *ReadonlyDevice_ReadAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(int64))
	})
	return _c
}

func (_c *ReadonlyDevice_ReadAt_Call) Return(n int, err error) *ReadonlyDevice_ReadAt_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *ReadonlyDevice_ReadAt_Call) RunAndReturn(run func([]byte, int64) (int, error)) *ReadonlyDevice_ReadAt_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *ReadonlyDevice) Size() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadonlyDevice_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type ReadonlyDevice_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *ReadonlyDevice_Expecter) Size() *ReadonlyDevice_Size_Call {
	return &ReadonlyDevice_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *ReadonlyDevice_Size_Call) Run(run func()) *ReadonlyDevice_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ReadonlyDevice_Size_Call) Return(_a0 int64, _a1 error) *ReadonlyDevice_Size_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadonlyDevice_Size_Call) RunAndReturn(run func() (int64, error)) *ReadonlyDevice_Size_Call {
	_c.Call.Return(run)
	return _c
}

// Slice provides a mock function with given fields: off, length
func (_m *ReadonlyDevice) Slice(off int64, length int64) ([]byte, error) {
	ret := _m.Called(off, length)

	if len(ret) == 0 {
		panic("no return value specified for Slice")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) ([]byte, error)); ok {
		return rf(off, length)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) []byte); ok {
		r0 = rf(off, length)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(off, length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadonlyDevice_Slice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Slice'
type ReadonlyDevice_Slice_Call struct {
	*mock.Call
}

// Slice is a helper method to define mock.On call
//   - off int64
//   - length int64
func (_e *ReadonlyDevice_Expecter) Slice(off interface{}, length interface{}) *ReadonlyDevice_Slice_Call {
	return &ReadonlyDevice_Slice_Call{Call: _e.mock.On("Slice", off, length)}
}

func (_c *ReadonlyDevice_Slice_Call) Run(run func(off int64, length int64)) *ReadonlyDevice_Slice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *ReadonlyDevice_Slice_Call) Return(_a0 []byte, _a1 error) *ReadonlyDevice_Slice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReadonlyDevice_Slice_Call) RunAndReturn(run func(int64, int64) ([]byte, error)) *ReadonlyDevice_Slice_Call {
	_c.Call.Return(run)
	return _c
}

// NewReadonlyDevice creates a new instance of ReadonlyDevice. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReadonlyDevice(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReadonlyDevice {
	mock := &ReadonlyDevice{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
