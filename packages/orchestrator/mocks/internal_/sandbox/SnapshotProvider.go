// Code generated by mockery v2.52.1. DO NOT EDIT.

package sandbox

import (
	context "context"

	bitset "github.com/bits-and-blooms/bitset"

	io "io"

	mock "github.com/stretchr/testify/mock"

	trace "go.opentelemetry.io/otel/trace"
)

// SnapshotProvider is an autogenerated mock type for the SnapshotProvider type
type SnapshotProvider struct {
	mock.Mock
}

type SnapshotProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *SnapshotProvider) EXPECT() *SnapshotProvider_Expecter {
	return &SnapshotProvider_Expecter{mock: &_m.Mock}
}

// CreateVMSnapshot provides a mock function with given fields: ctx, tracer, snapfilePath, memfilePath
func (_m *SnapshotProvider) CreateVMSnapshot(ctx context.Context, tracer trace.Tracer, snapfilePath string, memfilePath string) error {
	ret := _m.Called(ctx, tracer, snapfilePath, memfilePath)

	if len(ret) == 0 {
		panic("no return value specified for CreateVMSnapshot")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, trace.Tracer, string, string) error); ok {
		r0 = rf(ctx, tracer, snapfilePath, memfilePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapshotProvider_CreateVMSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVMSnapshot'
type SnapshotProvider_CreateVMSnapshot_Call struct {
	*mock.Call
}

// CreateVMSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - tracer trace.Tracer
//   - snapfilePath string
//   - memfilePath string
func (_e *SnapshotProvider_Expecter) CreateVMSnapshot(ctx interface{}, tracer interface{}, snapfilePath interface{}, memfilePath interface{}) *SnapshotProvider_CreateVMSnapshot_Call {
	return &SnapshotProvider_CreateVMSnapshot_Call{Call: _e.mock.On("CreateVMSnapshot", ctx, tracer, snapfilePath, memfilePath)}
}

func (_c *SnapshotProvider_CreateVMSnapshot_Call) Run(run func(ctx context.Context, tracer trace.Tracer, snapfilePath string, memfilePath string)) *SnapshotProvider_CreateVMSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(trace.Tracer), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SnapshotProvider_CreateVMSnapshot_Call) Return(_a0 error) *SnapshotProvider_CreateVMSnapshot_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_CreateVMSnapshot_Call) RunAndReturn(run func(context.Context, trace.Tracer, string, string) error) *SnapshotProvider_CreateVMSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// DisableUffd provides a mock function with no fields
func (_m *SnapshotProvider) DisableUffd() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DisableUffd")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapshotProvider_DisableUffd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisableUffd'
type SnapshotProvider_DisableUffd_Call struct {
	*mock.Call
}

// DisableUffd is a helper method to define mock.On call
func (_e *SnapshotProvider_Expecter) DisableUffd() *SnapshotProvider_DisableUffd_Call {
	return &SnapshotProvider_DisableUffd_Call{Call: _e.mock.On("DisableUffd")}
}

func (_c *SnapshotProvider_DisableUffd_Call) Run(run func()) *SnapshotProvider_DisableUffd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SnapshotProvider_DisableUffd_Call) Return(_a0 error) *SnapshotProvider_DisableUffd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_DisableUffd_Call) RunAndReturn(run func() error) *SnapshotProvider_DisableUffd_Call {
	_c.Call.Return(run)
	return _c
}

// ExportRootfs provides a mock function with given fields: ctx, out, stopSandbox
func (_m *SnapshotProvider) ExportRootfs(ctx context.Context, out io.Writer, stopSandbox func() error) (*bitset.BitSet, error) {
	ret := _m.Called(ctx, out, stopSandbox)

	if len(ret) == 0 {
		panic("no return value specified for ExportRootfs")
	}

	var r0 *bitset.BitSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Writer, func() error) (*bitset.BitSet, error)); ok {
		return rf(ctx, out, stopSandbox)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Writer, func() error) *bitset.BitSet); ok {
		r0 = rf(ctx, out, stopSandbox)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitset.BitSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Writer, func() error) error); ok {
		r1 = rf(ctx, out, stopSandbox)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SnapshotProvider_ExportRootfs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportRootfs'
type SnapshotProvider_ExportRootfs_Call struct {
	*mock.Call
}

// ExportRootfs is a helper method to define mock.On call
//   - ctx context.Context
//   - out io.Writer
//   - stopSandbox func() error
func (_e *SnapshotProvider_Expecter) ExportRootfs(ctx interface{}, out interface{}, stopSandbox interface{}) *SnapshotProvider_ExportRootfs_Call {
	return &SnapshotProvider_ExportRootfs_Call{Call: _e.mock.On("ExportRootfs", ctx, out, stopSandbox)}
}

func (_c *SnapshotProvider_ExportRootfs_Call) Run(run func(ctx context.Context, out io.Writer, stopSandbox func() error)) *SnapshotProvider_ExportRootfs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Writer), args[2].(func() error))
	})
	return _c
}

func (_c *SnapshotProvider_ExportRootfs_Call) Return(_a0 *bitset.BitSet, _a1 error) *SnapshotProvider_ExportRootfs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SnapshotProvider_ExportRootfs_Call) RunAndReturn(run func(context.Context, io.Writer, func() error) (*bitset.BitSet, error)) *SnapshotProvider_ExportRootfs_Call {
	_c.Call.Return(run)
	return _c
}

// FlushRootfsNBD provides a mock function with no fields
func (_m *SnapshotProvider) FlushRootfsNBD() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FlushRootfsNBD")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapshotProvider_FlushRootfsNBD_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushRootfsNBD'
type SnapshotProvider_FlushRootfsNBD_Call struct {
	*mock.Call
}

// FlushRootfsNBD is a helper method to define mock.On call
func (_e *SnapshotProvider_Expecter) FlushRootfsNBD() *SnapshotProvider_FlushRootfsNBD_Call {
	return &SnapshotProvider_FlushRootfsNBD_Call{Call: _e.mock.On("FlushRootfsNBD")}
}

func (_c *SnapshotProvider_FlushRootfsNBD_Call) Run(run func()) *SnapshotProvider_FlushRootfsNBD_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SnapshotProvider_FlushRootfsNBD_Call) Return(_a0 error) *SnapshotProvider_FlushRootfsNBD_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_FlushRootfsNBD_Call) RunAndReturn(run func() error) *SnapshotProvider_FlushRootfsNBD_Call {
	_c.Call.Return(run)
	return _c
}

// GetDirtyUffd provides a mock function with no fields
func (_m *SnapshotProvider) GetDirtyUffd() *bitset.BitSet {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDirtyUffd")
	}

	var r0 *bitset.BitSet
	if rf, ok := ret.Get(0).(func() *bitset.BitSet); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitset.BitSet)
		}
	}

	return r0
}

// SnapshotProvider_GetDirtyUffd_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDirtyUffd'
type SnapshotProvider_GetDirtyUffd_Call struct {
	*mock.Call
}

// GetDirtyUffd is a helper method to define mock.On call
func (_e *SnapshotProvider_Expecter) GetDirtyUffd() *SnapshotProvider_GetDirtyUffd_Call {
	return &SnapshotProvider_GetDirtyUffd_Call{Call: _e.mock.On("GetDirtyUffd")}
}

func (_c *SnapshotProvider_GetDirtyUffd_Call) Run(run func()) *SnapshotProvider_GetDirtyUffd_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SnapshotProvider_GetDirtyUffd_Call) Return(_a0 *bitset.BitSet) *SnapshotProvider_GetDirtyUffd_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_GetDirtyUffd_Call) RunAndReturn(run func() *bitset.BitSet) *SnapshotProvider_GetDirtyUffd_Call {
	_c.Call.Return(run)
	return _c
}

// GetMemfilePageSize provides a mock function with no fields
func (_m *SnapshotProvider) GetMemfilePageSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMemfilePageSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SnapshotProvider_GetMemfilePageSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMemfilePageSize'
type SnapshotProvider_GetMemfilePageSize_Call struct {
	*mock.Call
}

// GetMemfilePageSize is a helper method to define mock.On call
func (_e *SnapshotProvider_Expecter) GetMemfilePageSize() *SnapshotProvider_GetMemfilePageSize_Call {
	return &SnapshotProvider_GetMemfilePageSize_Call{Call: _e.mock.On("GetMemfilePageSize")}
}

func (_c *SnapshotProvider_GetMemfilePageSize_Call) Run(run func()) *SnapshotProvider_GetMemfilePageSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SnapshotProvider_GetMemfilePageSize_Call) Return(_a0 int64) *SnapshotProvider_GetMemfilePageSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_GetMemfilePageSize_Call) RunAndReturn(run func() int64) *SnapshotProvider_GetMemfilePageSize_Call {
	_c.Call.Return(run)
	return _c
}

// PauseVM provides a mock function with given fields: ctx
func (_m *SnapshotProvider) PauseVM(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for PauseVM")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SnapshotProvider_PauseVM_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PauseVM'
type SnapshotProvider_PauseVM_Call struct {
	*mock.Call
}

// PauseVM is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SnapshotProvider_Expecter) PauseVM(ctx interface{}) *SnapshotProvider_PauseVM_Call {
	return &SnapshotProvider_PauseVM_Call{Call: _e.mock.On("PauseVM", ctx)}
}

func (_c *SnapshotProvider_PauseVM_Call) Run(run func(ctx context.Context)) *SnapshotProvider_PauseVM_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SnapshotProvider_PauseVM_Call) Return(_a0 error) *SnapshotProvider_PauseVM_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SnapshotProvider_PauseVM_Call) RunAndReturn(run func(context.Context) error) *SnapshotProvider_PauseVM_Call {
	_c.Call.Return(run)
	return _c
}

// NewSnapshotProvider creates a new instance of SnapshotProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSnapshotProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *SnapshotProvider {
	mock := &SnapshotProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
