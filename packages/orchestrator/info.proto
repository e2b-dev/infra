syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "https://github.com/e2b-dev/infra/orchestrator";

// needs to be different from the enumeration in the template manager
enum ServiceInfoStatus {
  Healthy = 0;
  Draining = 1;
  Unhealthy = 2;
}

enum ServiceInfoRole {
  TemplateBuilder = 0;
  Orchestrator = 1;
}

message DiskMetrics {
  string mount_point = 1;
  string device = 2;
  string filesystem_type = 3;
  uint64 used_bytes = 4;
  uint64 total_bytes = 5;
}

message ServiceInfoResponse {
  string node_id = 1;
  string service_id = 2;
  string service_version = 3;
  string service_commit = 4;

  ServiceInfoStatus service_status = 51;
  repeated ServiceInfoRole service_roles = 52;
  google.protobuf.Timestamp service_startup = 53;

  int64 metric_vcpu_used = 101 [deprecated = true];
  int64 metric_memory_used_mb = 102 [deprecated = true];
  int64 metric_disk_mb = 103 [deprecated = true];
  uint32 metric_sandboxes_running = 104;
  
  // Host system usage metrics
  uint32 metric_cpu_percent = 105;
  uint64 metric_memory_used_bytes = 106;

  // Host system total resources
  uint32 metric_cpu_count = 108;
  uint64 metric_memory_total_bytes = 109;

  // Allocated resources to sandboxes
  uint32 metric_cpu_allocated = 110;
  uint64 metric_memory_allocated_bytes = 111;
  uint64 metric_disk_allocated_bytes = 112;
  
  // Detailed disk metrics for each mount point
  repeated DiskMetrics metric_disks = 113;
}

message ServiceStatusChangeRequest {
  ServiceInfoStatus service_status = 2;
}

service InfoService {
  rpc ServiceInfo(google.protobuf.Empty) returns (ServiceInfoResponse);
  rpc ServiceStatusOverride(ServiceStatusChangeRequest) returns (google.protobuf.Empty);
}
