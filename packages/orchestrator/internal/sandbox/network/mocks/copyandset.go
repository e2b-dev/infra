// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package networkmocks

import (
	"github.com/hashicorp/consul/api"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCopyAndSet creates a new instance of MockCopyAndSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCopyAndSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCopyAndSet {
	mock := &MockCopyAndSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCopyAndSet is an autogenerated mock type for the copyAndSet type
type MockCopyAndSet struct {
	mock.Mock
}

type MockCopyAndSet_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCopyAndSet) EXPECT() *MockCopyAndSet_Expecter {
	return &MockCopyAndSet_Expecter{mock: &_m.Mock}
}

// CAS provides a mock function for the type MockCopyAndSet
func (_mock *MockCopyAndSet) CAS(kv *api.KVPair, opts *api.WriteOptions) (bool, *api.WriteMeta, error) {
	ret := _mock.Called(kv, opts)

	if len(ret) == 0 {
		panic("no return value specified for CAS")
	}

	var r0 bool
	var r1 *api.WriteMeta
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*api.KVPair, *api.WriteOptions) (bool, *api.WriteMeta, error)); ok {
		return returnFunc(kv, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(*api.KVPair, *api.WriteOptions) bool); ok {
		r0 = returnFunc(kv, opts)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*api.KVPair, *api.WriteOptions) *api.WriteMeta); ok {
		r1 = returnFunc(kv, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.WriteMeta)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*api.KVPair, *api.WriteOptions) error); ok {
		r2 = returnFunc(kv, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCopyAndSet_CAS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CAS'
type MockCopyAndSet_CAS_Call struct {
	*mock.Call
}

// CAS is a helper method to define mock.On call
//   - kv *api.KVPair
//   - opts *api.WriteOptions
func (_e *MockCopyAndSet_Expecter) CAS(kv interface{}, opts interface{}) *MockCopyAndSet_CAS_Call {
	return &MockCopyAndSet_CAS_Call{Call: _e.mock.On("CAS", kv, opts)}
}

func (_c *MockCopyAndSet_CAS_Call) Run(run func(kv *api.KVPair, opts *api.WriteOptions)) *MockCopyAndSet_CAS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *api.KVPair
		if args[0] != nil {
			arg0 = args[0].(*api.KVPair)
		}
		var arg1 *api.WriteOptions
		if args[1] != nil {
			arg1 = args[1].(*api.WriteOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCopyAndSet_CAS_Call) Return(b bool, writeMeta *api.WriteMeta, err error) *MockCopyAndSet_CAS_Call {
	_c.Call.Return(b, writeMeta, err)
	return _c
}

func (_c *MockCopyAndSet_CAS_Call) RunAndReturn(run func(kv *api.KVPair, opts *api.WriteOptions) (bool, *api.WriteMeta, error)) *MockCopyAndSet_CAS_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCAS provides a mock function for the type MockCopyAndSet
func (_mock *MockCopyAndSet) DeleteCAS(kv *api.KVPair, opts *api.WriteOptions) (bool, *api.WriteMeta, error) {
	ret := _mock.Called(kv, opts)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCAS")
	}

	var r0 bool
	var r1 *api.WriteMeta
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*api.KVPair, *api.WriteOptions) (bool, *api.WriteMeta, error)); ok {
		return returnFunc(kv, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(*api.KVPair, *api.WriteOptions) bool); ok {
		r0 = returnFunc(kv, opts)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*api.KVPair, *api.WriteOptions) *api.WriteMeta); ok {
		r1 = returnFunc(kv, opts)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.WriteMeta)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*api.KVPair, *api.WriteOptions) error); ok {
		r2 = returnFunc(kv, opts)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCopyAndSet_DeleteCAS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCAS'
type MockCopyAndSet_DeleteCAS_Call struct {
	*mock.Call
}

// DeleteCAS is a helper method to define mock.On call
//   - kv *api.KVPair
//   - opts *api.WriteOptions
func (_e *MockCopyAndSet_Expecter) DeleteCAS(kv interface{}, opts interface{}) *MockCopyAndSet_DeleteCAS_Call {
	return &MockCopyAndSet_DeleteCAS_Call{Call: _e.mock.On("DeleteCAS", kv, opts)}
}

func (_c *MockCopyAndSet_DeleteCAS_Call) Run(run func(kv *api.KVPair, opts *api.WriteOptions)) *MockCopyAndSet_DeleteCAS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *api.KVPair
		if args[0] != nil {
			arg0 = args[0].(*api.KVPair)
		}
		var arg1 *api.WriteOptions
		if args[1] != nil {
			arg1 = args[1].(*api.WriteOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCopyAndSet_DeleteCAS_Call) Return(b bool, writeMeta *api.WriteMeta, err error) *MockCopyAndSet_DeleteCAS_Call {
	_c.Call.Return(b, writeMeta, err)
	return _c
}

func (_c *MockCopyAndSet_DeleteCAS_Call) RunAndReturn(run func(kv *api.KVPair, opts *api.WriteOptions) (bool, *api.WriteMeta, error)) *MockCopyAndSet_DeleteCAS_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCopyAndSet
func (_mock *MockCopyAndSet) Get(key string, q *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error) {
	ret := _mock.Called(key, q)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *api.KVPair
	var r1 *api.QueryMeta
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error)); ok {
		return returnFunc(key, q)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *api.QueryOptions) *api.KVPair); ok {
		r0 = returnFunc(key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KVPair)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = returnFunc(key, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, *api.QueryOptions) error); ok {
		r2 = returnFunc(key, q)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCopyAndSet_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCopyAndSet_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
//   - q *api.QueryOptions
func (_e *MockCopyAndSet_Expecter) Get(key interface{}, q interface{}) *MockCopyAndSet_Get_Call {
	return &MockCopyAndSet_Get_Call{Call: _e.mock.On("Get", key, q)}
}

func (_c *MockCopyAndSet_Get_Call) Run(run func(key string, q *api.QueryOptions)) *MockCopyAndSet_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *api.QueryOptions
		if args[1] != nil {
			arg1 = args[1].(*api.QueryOptions)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCopyAndSet_Get_Call) Return(kVPair *api.KVPair, queryMeta *api.QueryMeta, err error) *MockCopyAndSet_Get_Call {
	_c.Call.Return(kVPair, queryMeta, err)
	return _c
}

func (_c *MockCopyAndSet_Get_Call) RunAndReturn(run func(key string, q *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error)) *MockCopyAndSet_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function for the type MockCopyAndSet
func (_mock *MockCopyAndSet) Keys(prefix string, separator string, q *api.QueryOptions) ([]string, *api.QueryMeta, error) {
	ret := _mock.Called(prefix, separator, q)

	if len(ret) == 0 {
		panic("no return value specified for Keys")
	}

	var r0 []string
	var r1 *api.QueryMeta
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, *api.QueryOptions) ([]string, *api.QueryMeta, error)); ok {
		return returnFunc(prefix, separator, q)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, *api.QueryOptions) []string); ok {
		r0 = returnFunc(prefix, separator, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = returnFunc(prefix, separator, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, *api.QueryOptions) error); ok {
		r2 = returnFunc(prefix, separator, q)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCopyAndSet_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type MockCopyAndSet_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
//   - prefix string
//   - separator string
//   - q *api.QueryOptions
func (_e *MockCopyAndSet_Expecter) Keys(prefix interface{}, separator interface{}, q interface{}) *MockCopyAndSet_Keys_Call {
	return &MockCopyAndSet_Keys_Call{Call: _e.mock.On("Keys", prefix, separator, q)}
}

func (_c *MockCopyAndSet_Keys_Call) Run(run func(prefix string, separator string, q *api.QueryOptions)) *MockCopyAndSet_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *api.QueryOptions
		if args[2] != nil {
			arg2 = args[2].(*api.QueryOptions)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCopyAndSet_Keys_Call) Return(strings []string, queryMeta *api.QueryMeta, err error) *MockCopyAndSet_Keys_Call {
	_c.Call.Return(strings, queryMeta, err)
	return _c
}

func (_c *MockCopyAndSet_Keys_Call) RunAndReturn(run func(prefix string, separator string, q *api.QueryOptions) ([]string, *api.QueryMeta, error)) *MockCopyAndSet_Keys_Call {
	_c.Call.Return(run)
	return _c
}
