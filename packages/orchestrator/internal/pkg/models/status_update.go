// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/internal"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/predicate"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/status"
)

// StatusUpdate is the builder for updating Status entities.
type StatusUpdate struct {
	config
	hooks     []Hook
	mutation  *StatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the StatusUpdate builder.
func (su *StatusUpdate) Where(ps ...predicate.Status) *StatusUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetVersion sets the "version" field.
func (su *StatusUpdate) SetVersion(i int64) *StatusUpdate {
	su.mutation.ResetVersion()
	su.mutation.SetVersion(i)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *StatusUpdate) SetNillableVersion(i *int64) *StatusUpdate {
	if i != nil {
		su.SetVersion(*i)
	}
	return su
}

// AddVersion adds i to the "version" field.
func (su *StatusUpdate) AddVersion(i int64) *StatusUpdate {
	su.mutation.AddVersion(i)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StatusUpdate) SetUpdatedAt(t time.Time) *StatusUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (su *StatusUpdate) SetNillableUpdatedAt(t *time.Time) *StatusUpdate {
	if t != nil {
		su.SetUpdatedAt(*t)
	}
	return su
}

// SetStatus sets the "status" field.
func (su *StatusUpdate) SetStatus(s status.Status) *StatusUpdate {
	su.mutation.SetStatus(s)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *StatusUpdate) SetNillableStatus(s *status.Status) *StatusUpdate {
	if s != nil {
		su.SetStatus(*s)
	}
	return su
}

// Mutation returns the StatusMutation object of the builder.
func (su *StatusUpdate) Mutation() *StatusMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatusUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatusUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatusUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatusUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StatusUpdate) check() error {
	if v, ok := su.mutation.Version(); ok {
		if err := status.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`models: validator failed for field "Status.version": %w`, err)}
		}
	}
	if v, ok := su.mutation.Status(); ok {
		if err := status.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`models: validator failed for field "Status.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *StatusUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatusUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *StatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(status.Table, status.Columns, sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(status.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := su.mutation.AddedVersion(); ok {
		_spec.AddField(status.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(status.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.SetField(status.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = su.schemaConfig.Status
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatusUpdateOne is the builder for updating a single Status entity.
type StatusUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *StatusMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersion sets the "version" field.
func (suo *StatusUpdateOne) SetVersion(i int64) *StatusUpdateOne {
	suo.mutation.ResetVersion()
	suo.mutation.SetVersion(i)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableVersion(i *int64) *StatusUpdateOne {
	if i != nil {
		suo.SetVersion(*i)
	}
	return suo
}

// AddVersion adds i to the "version" field.
func (suo *StatusUpdateOne) AddVersion(i int64) *StatusUpdateOne {
	suo.mutation.AddVersion(i)
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StatusUpdateOne) SetUpdatedAt(t time.Time) *StatusUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableUpdatedAt(t *time.Time) *StatusUpdateOne {
	if t != nil {
		suo.SetUpdatedAt(*t)
	}
	return suo
}

// SetStatus sets the "status" field.
func (suo *StatusUpdateOne) SetStatus(s status.Status) *StatusUpdateOne {
	suo.mutation.SetStatus(s)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *StatusUpdateOne) SetNillableStatus(s *status.Status) *StatusUpdateOne {
	if s != nil {
		suo.SetStatus(*s)
	}
	return suo
}

// Mutation returns the StatusMutation object of the builder.
func (suo *StatusUpdateOne) Mutation() *StatusMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatusUpdate builder.
func (suo *StatusUpdateOne) Where(ps ...predicate.Status) *StatusUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatusUpdateOne) Select(field string, fields ...string) *StatusUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Status entity.
func (suo *StatusUpdateOne) Save(ctx context.Context) (*Status, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatusUpdateOne) SaveX(ctx context.Context) *Status {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatusUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatusUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StatusUpdateOne) check() error {
	if v, ok := suo.mutation.Version(); ok {
		if err := status.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`models: validator failed for field "Status.version": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Status(); ok {
		if err := status.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`models: validator failed for field "Status.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *StatusUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *StatusUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *StatusUpdateOne) sqlSave(ctx context.Context) (_node *Status, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(status.Table, status.Columns, sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`models: missing "Status.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, status.FieldID)
		for _, f := range fields {
			if !status.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("models: invalid field %q for query", f)}
			}
			if f != status.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(status.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.AddedVersion(); ok {
		_spec.AddField(status.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(status.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.SetField(status.FieldStatus, field.TypeEnum, value)
	}
	_spec.Node.Schema = suo.schemaConfig.Status
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_spec.AddModifiers(suo.modifiers...)
	_node = &Status{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{status.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
