// Code generated by ent, DO NOT EDIT.

package models

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/sandbox"
)

// Sandbox is the model entity for the Sandbox schema.
type Sandbox struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// TerminatedAt holds the value of the "terminated_at" field.
	TerminatedAt *time.Time `json:"terminated_at,omitempty"`
	// Deadline holds the value of the "deadline" field.
	Deadline *time.Time `json:"deadline,omitempty"`
	// Status holds the value of the "status" field.
	Status sandbox.Status `json:"status,omitempty"`
	// DurationMs holds the value of the "duration_ms" field.
	DurationMs int64 `json:"duration_ms,omitempty"`
	// an incrementing clock of this
	Version int64 `json:"version,omitempty"`
	// a record of the version of the global state of the last modification.
	GlobalVersion int64 `json:"global_version,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Sandbox) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sandbox.FieldDurationMs, sandbox.FieldVersion, sandbox.FieldGlobalVersion:
			values[i] = new(sql.NullInt64)
		case sandbox.FieldID, sandbox.FieldStatus:
			values[i] = new(sql.NullString)
		case sandbox.FieldStartedAt, sandbox.FieldUpdatedAt, sandbox.FieldTerminatedAt, sandbox.FieldDeadline:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Sandbox fields.
func (s *Sandbox) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sandbox.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case sandbox.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				s.StartedAt = value.Time
			}
		case sandbox.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case sandbox.FieldTerminatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field terminated_at", values[i])
			} else if value.Valid {
				s.TerminatedAt = new(time.Time)
				*s.TerminatedAt = value.Time
			}
		case sandbox.FieldDeadline:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deadline", values[i])
			} else if value.Valid {
				s.Deadline = new(time.Time)
				*s.Deadline = value.Time
			}
		case sandbox.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = sandbox.Status(value.String)
			}
		case sandbox.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				s.DurationMs = value.Int64
			}
		case sandbox.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				s.Version = value.Int64
			}
		case sandbox.FieldGlobalVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field global_version", values[i])
			} else if value.Valid {
				s.GlobalVersion = value.Int64
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Sandbox.
// This includes values selected through modifiers, order, etc.
func (s *Sandbox) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Sandbox.
// Note that you need to call Sandbox.Unwrap() before calling this method if this Sandbox
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Sandbox) Update() *SandboxUpdateOne {
	return NewSandboxClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Sandbox entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Sandbox) Unwrap() *Sandbox {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("models: Sandbox is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Sandbox) String() string {
	var builder strings.Builder
	builder.WriteString("Sandbox(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("started_at=")
	builder.WriteString(s.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := s.TerminatedAt; v != nil {
		builder.WriteString("terminated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := s.Deadline; v != nil {
		builder.WriteString("deadline=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", s.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", s.Version))
	builder.WriteString(", ")
	builder.WriteString("global_version=")
	builder.WriteString(fmt.Sprintf("%v", s.GlobalVersion))
	builder.WriteByte(')')
	return builder.String()
}

// Sandboxes is a parsable slice of Sandbox.
type Sandboxes []*Sandbox
