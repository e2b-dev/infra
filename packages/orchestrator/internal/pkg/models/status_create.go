// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/status"
)

// StatusCreate is the builder for creating a Status entity.
type StatusCreate struct {
	config
	mutation *StatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVersion sets the "version" field.
func (sc *StatusCreate) SetVersion(i int64) *StatusCreate {
	sc.mutation.SetVersion(i)
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *StatusCreate) SetUpdatedAt(t time.Time) *StatusCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *StatusCreate) SetNillableUpdatedAt(t *time.Time) *StatusCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetStatus sets the "status" field.
func (sc *StatusCreate) SetStatus(s status.Status) *StatusCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *StatusCreate) SetNillableStatus(s *status.Status) *StatusCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// Mutation returns the StatusMutation object of the builder.
func (sc *StatusCreate) Mutation() *StatusMutation {
	return sc.mutation
}

// Save creates the Status in the database.
func (sc *StatusCreate) Save(ctx context.Context) (*Status, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatusCreate) SaveX(ctx context.Context) *Status {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatusCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatusCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatusCreate) defaults() {
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := status.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Status(); !ok {
		v := status.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatusCreate) check() error {
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`models: missing required field "Status.version"`)}
	}
	if v, ok := sc.mutation.Version(); ok {
		if err := status.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`models: validator failed for field "Status.version": %w`, err)}
		}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`models: missing required field "Status.updated_at"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`models: missing required field "Status.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := status.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`models: validator failed for field "Status.status": %w`, err)}
		}
	}
	return nil
}

func (sc *StatusCreate) sqlSave(ctx context.Context) (*Status, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatusCreate) createSpec() (*Status, *sqlgraph.CreateSpec) {
	var (
		_node = &Status{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(status.Table, sqlgraph.NewFieldSpec(status.FieldID, field.TypeInt))
	)
	_spec.Schema = sc.schemaConfig.Status
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(status.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(status.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(status.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Status.Create().
//		SetVersion(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatusUpsert) {
//			SetVersion(v+v).
//		}).
//		Exec(ctx)
func (sc *StatusCreate) OnConflict(opts ...sql.ConflictOption) *StatusUpsertOne {
	sc.conflict = opts
	return &StatusUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Status.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *StatusCreate) OnConflictColumns(columns ...string) *StatusUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &StatusUpsertOne{
		create: sc,
	}
}

type (
	// StatusUpsertOne is the builder for "upsert"-ing
	//  one Status node.
	StatusUpsertOne struct {
		create *StatusCreate
	}

	// StatusUpsert is the "OnConflict" setter.
	StatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetVersion sets the "version" field.
func (u *StatusUpsert) SetVersion(v int64) *StatusUpsert {
	u.Set(status.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *StatusUpsert) UpdateVersion() *StatusUpsert {
	u.SetExcluded(status.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *StatusUpsert) AddVersion(v int64) *StatusUpsert {
	u.Add(status.FieldVersion, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatusUpsert) SetUpdatedAt(v time.Time) *StatusUpsert {
	u.Set(status.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatusUpsert) UpdateUpdatedAt() *StatusUpsert {
	u.SetExcluded(status.FieldUpdatedAt)
	return u
}

// SetStatus sets the "status" field.
func (u *StatusUpsert) SetStatus(v status.Status) *StatusUpsert {
	u.Set(status.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StatusUpsert) UpdateStatus() *StatusUpsert {
	u.SetExcluded(status.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Status.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StatusUpsertOne) UpdateNewValues() *StatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Status.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *StatusUpsertOne) Ignore() *StatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatusUpsertOne) DoNothing() *StatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatusCreate.OnConflict
// documentation for more info.
func (u *StatusUpsertOne) Update(set func(*StatusUpsert)) *StatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersion sets the "version" field.
func (u *StatusUpsertOne) SetVersion(v int64) *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *StatusUpsertOne) AddVersion(v int64) *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *StatusUpsertOne) UpdateVersion() *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatusUpsertOne) SetUpdatedAt(v time.Time) *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatusUpsertOne) UpdateUpdatedAt() *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *StatusUpsertOne) SetStatus(v status.Status) *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StatusUpsertOne) UpdateStatus() *StatusUpsertOne {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *StatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for StatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *StatusUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *StatusUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// StatusCreateBulk is the builder for creating many Status entities in bulk.
type StatusCreateBulk struct {
	config
	err      error
	builders []*StatusCreate
	conflict []sql.ConflictOption
}

// Save creates the Status entities in the database.
func (scb *StatusCreateBulk) Save(ctx context.Context) ([]*Status, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Status, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatusCreateBulk) SaveX(ctx context.Context) []*Status {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatusCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatusCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Status.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.StatusUpsert) {
//			SetVersion(v+v).
//		}).
//		Exec(ctx)
func (scb *StatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *StatusUpsertBulk {
	scb.conflict = opts
	return &StatusUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Status.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *StatusCreateBulk) OnConflictColumns(columns ...string) *StatusUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &StatusUpsertBulk{
		create: scb,
	}
}

// StatusUpsertBulk is the builder for "upsert"-ing
// a bulk of Status nodes.
type StatusUpsertBulk struct {
	create *StatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Status.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *StatusUpsertBulk) UpdateNewValues() *StatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Status.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *StatusUpsertBulk) Ignore() *StatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *StatusUpsertBulk) DoNothing() *StatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the StatusCreateBulk.OnConflict
// documentation for more info.
func (u *StatusUpsertBulk) Update(set func(*StatusUpsert)) *StatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&StatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetVersion sets the "version" field.
func (u *StatusUpsertBulk) SetVersion(v int64) *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *StatusUpsertBulk) AddVersion(v int64) *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *StatusUpsertBulk) UpdateVersion() *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateVersion()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *StatusUpsertBulk) SetUpdatedAt(v time.Time) *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *StatusUpsertBulk) UpdateUpdatedAt() *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetStatus sets the "status" field.
func (u *StatusUpsertBulk) SetStatus(v status.Status) *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *StatusUpsertBulk) UpdateStatus() *StatusUpsertBulk {
	return u.Update(func(s *StatusUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *StatusUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("models: OnConflict was set for builder %d. Set it on the StatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for StatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *StatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
