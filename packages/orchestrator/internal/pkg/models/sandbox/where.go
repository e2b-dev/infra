// Code generated by ent, DO NOT EDIT.

package sandbox

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldContainsFold(FieldID, id))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldStartedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldUpdatedAt, v))
}

// TerminatedAt applies equality check predicate on the "terminated_at" field. It's identical to TerminatedAtEQ.
func TerminatedAt(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldTerminatedAt, v))
}

// Deadline applies equality check predicate on the "deadline" field. It's identical to DeadlineEQ.
func Deadline(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldDeadline, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldDurationMs, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldVersion, v))
}

// GlobalVersion applies equality check predicate on the "global_version" field. It's identical to GlobalVersionEQ.
func GlobalVersion(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldGlobalVersion, v))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldStartedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldUpdatedAt, v))
}

// TerminatedAtEQ applies the EQ predicate on the "terminated_at" field.
func TerminatedAtEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldTerminatedAt, v))
}

// TerminatedAtNEQ applies the NEQ predicate on the "terminated_at" field.
func TerminatedAtNEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldTerminatedAt, v))
}

// TerminatedAtIn applies the In predicate on the "terminated_at" field.
func TerminatedAtIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldTerminatedAt, vs...))
}

// TerminatedAtNotIn applies the NotIn predicate on the "terminated_at" field.
func TerminatedAtNotIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldTerminatedAt, vs...))
}

// TerminatedAtGT applies the GT predicate on the "terminated_at" field.
func TerminatedAtGT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldTerminatedAt, v))
}

// TerminatedAtGTE applies the GTE predicate on the "terminated_at" field.
func TerminatedAtGTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldTerminatedAt, v))
}

// TerminatedAtLT applies the LT predicate on the "terminated_at" field.
func TerminatedAtLT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldTerminatedAt, v))
}

// TerminatedAtLTE applies the LTE predicate on the "terminated_at" field.
func TerminatedAtLTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldTerminatedAt, v))
}

// DeadlineEQ applies the EQ predicate on the "deadline" field.
func DeadlineEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldDeadline, v))
}

// DeadlineNEQ applies the NEQ predicate on the "deadline" field.
func DeadlineNEQ(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldDeadline, v))
}

// DeadlineIn applies the In predicate on the "deadline" field.
func DeadlineIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldDeadline, vs...))
}

// DeadlineNotIn applies the NotIn predicate on the "deadline" field.
func DeadlineNotIn(vs ...time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldDeadline, vs...))
}

// DeadlineGT applies the GT predicate on the "deadline" field.
func DeadlineGT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldDeadline, v))
}

// DeadlineGTE applies the GTE predicate on the "deadline" field.
func DeadlineGTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldDeadline, v))
}

// DeadlineLT applies the LT predicate on the "deadline" field.
func DeadlineLT(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldDeadline, v))
}

// DeadlineLTE applies the LTE predicate on the "deadline" field.
func DeadlineLTE(v time.Time) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldDeadline, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldStatus, vs...))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldDurationMs, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldVersion, v))
}

// GlobalVersionEQ applies the EQ predicate on the "global_version" field.
func GlobalVersionEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldEQ(FieldGlobalVersion, v))
}

// GlobalVersionNEQ applies the NEQ predicate on the "global_version" field.
func GlobalVersionNEQ(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNEQ(FieldGlobalVersion, v))
}

// GlobalVersionIn applies the In predicate on the "global_version" field.
func GlobalVersionIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldIn(FieldGlobalVersion, vs...))
}

// GlobalVersionNotIn applies the NotIn predicate on the "global_version" field.
func GlobalVersionNotIn(vs ...int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldNotIn(FieldGlobalVersion, vs...))
}

// GlobalVersionGT applies the GT predicate on the "global_version" field.
func GlobalVersionGT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGT(FieldGlobalVersion, v))
}

// GlobalVersionGTE applies the GTE predicate on the "global_version" field.
func GlobalVersionGTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldGTE(FieldGlobalVersion, v))
}

// GlobalVersionLT applies the LT predicate on the "global_version" field.
func GlobalVersionLT(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLT(FieldGlobalVersion, v))
}

// GlobalVersionLTE applies the LTE predicate on the "global_version" field.
func GlobalVersionLTE(v int64) predicate.Sandbox {
	return predicate.Sandbox(sql.FieldLTE(FieldGlobalVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Sandbox) predicate.Sandbox {
	return predicate.Sandbox(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Sandbox) predicate.Sandbox {
	return predicate.Sandbox(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Sandbox) predicate.Sandbox {
	return predicate.Sandbox(sql.NotPredicates(p))
}
