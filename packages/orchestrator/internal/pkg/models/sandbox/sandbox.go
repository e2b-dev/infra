// Code generated by ent, DO NOT EDIT.

package sandbox

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the sandbox type in the database.
	Label = "sandbox"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldTerminatedAt holds the string denoting the terminated_at field in the database.
	FieldTerminatedAt = "terminated_at"
	// FieldDeadline holds the string denoting the deadline field in the database.
	FieldDeadline = "deadline"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldGlobalVersion holds the string denoting the global_version field in the database.
	FieldGlobalVersion = "global_version"
	// Table holds the table name of the sandbox in the database.
	Table = "sandboxes"
)

// Columns holds all SQL columns for sandbox fields.
var Columns = []string{
	FieldID,
	FieldStartedAt,
	FieldUpdatedAt,
	FieldTerminatedAt,
	FieldDeadline,
	FieldStatus,
	FieldDurationMs,
	FieldVersion,
	FieldGlobalVersion,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStartedAt holds the default value on creation for the "started_at" field.
	DefaultStartedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// DurationMsValidator is a validator for the "duration_ms" field. It is called by the builders before save.
	DurationMsValidator func(int64) error
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(int64) error
	// GlobalVersionValidator is a validator for the "global_version" field. It is called by the builders before save.
	GlobalVersionValidator func(int64) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending    Status = "pending"
	StatusRunning    Status = "running"
	StatusPaused     Status = "paused"
	StatusTerminated Status = "terminated"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusPaused, StatusTerminated:
		return nil
	default:
		return fmt.Errorf("sandbox: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Sandbox queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTerminatedAt orders the results by the terminated_at field.
func ByTerminatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTerminatedAt, opts...).ToFunc()
}

// ByDeadline orders the results by the deadline field.
func ByDeadline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeadline, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByGlobalVersion orders the results by the global_version field.
func ByGlobalVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGlobalVersion, opts...).ToFunc()
}
