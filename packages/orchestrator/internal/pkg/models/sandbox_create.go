// Code generated by ent, DO NOT EDIT.

package models

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/e2b-dev/infra/packages/orchestrator/internal/pkg/models/sandbox"
)

// SandboxCreate is the builder for creating a Sandbox entity.
type SandboxCreate struct {
	config
	mutation *SandboxMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetStartedAt sets the "started_at" field.
func (sc *SandboxCreate) SetStartedAt(t time.Time) *SandboxCreate {
	sc.mutation.SetStartedAt(t)
	return sc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sc *SandboxCreate) SetNillableStartedAt(t *time.Time) *SandboxCreate {
	if t != nil {
		sc.SetStartedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SandboxCreate) SetUpdatedAt(t time.Time) *SandboxCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SandboxCreate) SetNillableUpdatedAt(t *time.Time) *SandboxCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetTerminatedAt sets the "terminated_at" field.
func (sc *SandboxCreate) SetTerminatedAt(t time.Time) *SandboxCreate {
	sc.mutation.SetTerminatedAt(t)
	return sc
}

// SetDeadline sets the "deadline" field.
func (sc *SandboxCreate) SetDeadline(t time.Time) *SandboxCreate {
	sc.mutation.SetDeadline(t)
	return sc
}

// SetStatus sets the "status" field.
func (sc *SandboxCreate) SetStatus(s sandbox.Status) *SandboxCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetDurationMs sets the "duration_ms" field.
func (sc *SandboxCreate) SetDurationMs(i int64) *SandboxCreate {
	sc.mutation.SetDurationMs(i)
	return sc
}

// SetVersion sets the "version" field.
func (sc *SandboxCreate) SetVersion(i int64) *SandboxCreate {
	sc.mutation.SetVersion(i)
	return sc
}

// SetGlobalVersion sets the "global_version" field.
func (sc *SandboxCreate) SetGlobalVersion(i int64) *SandboxCreate {
	sc.mutation.SetGlobalVersion(i)
	return sc
}

// SetID sets the "id" field.
func (sc *SandboxCreate) SetID(s string) *SandboxCreate {
	sc.mutation.SetID(s)
	return sc
}

// Mutation returns the SandboxMutation object of the builder.
func (sc *SandboxCreate) Mutation() *SandboxMutation {
	return sc.mutation
}

// Save creates the Sandbox in the database.
func (sc *SandboxCreate) Save(ctx context.Context) (*Sandbox, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SandboxCreate) SaveX(ctx context.Context) *Sandbox {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SandboxCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SandboxCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SandboxCreate) defaults() {
	if _, ok := sc.mutation.StartedAt(); !ok {
		v := sandbox.DefaultStartedAt()
		sc.mutation.SetStartedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := sandbox.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SandboxCreate) check() error {
	if _, ok := sc.mutation.StartedAt(); !ok {
		return &ValidationError{Name: "started_at", err: errors.New(`models: missing required field "Sandbox.started_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`models: missing required field "Sandbox.updated_at"`)}
	}
	if _, ok := sc.mutation.TerminatedAt(); !ok {
		return &ValidationError{Name: "terminated_at", err: errors.New(`models: missing required field "Sandbox.terminated_at"`)}
	}
	if _, ok := sc.mutation.Deadline(); !ok {
		return &ValidationError{Name: "deadline", err: errors.New(`models: missing required field "Sandbox.deadline"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`models: missing required field "Sandbox.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := sandbox.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`models: validator failed for field "Sandbox.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`models: missing required field "Sandbox.duration_ms"`)}
	}
	if v, ok := sc.mutation.DurationMs(); ok {
		if err := sandbox.DurationMsValidator(v); err != nil {
			return &ValidationError{Name: "duration_ms", err: fmt.Errorf(`models: validator failed for field "Sandbox.duration_ms": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`models: missing required field "Sandbox.version"`)}
	}
	if v, ok := sc.mutation.Version(); ok {
		if err := sandbox.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`models: validator failed for field "Sandbox.version": %w`, err)}
		}
	}
	if _, ok := sc.mutation.GlobalVersion(); !ok {
		return &ValidationError{Name: "global_version", err: errors.New(`models: missing required field "Sandbox.global_version"`)}
	}
	if v, ok := sc.mutation.GlobalVersion(); ok {
		if err := sandbox.GlobalVersionValidator(v); err != nil {
			return &ValidationError{Name: "global_version", err: fmt.Errorf(`models: validator failed for field "Sandbox.global_version": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := sandbox.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`models: validator failed for field "Sandbox.id": %w`, err)}
		}
	}
	return nil
}

func (sc *SandboxCreate) sqlSave(ctx context.Context) (*Sandbox, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Sandbox.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SandboxCreate) createSpec() (*Sandbox, *sqlgraph.CreateSpec) {
	var (
		_node = &Sandbox{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(sandbox.Table, sqlgraph.NewFieldSpec(sandbox.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Sandbox
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.StartedAt(); ok {
		_spec.SetField(sandbox.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(sandbox.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.TerminatedAt(); ok {
		_spec.SetField(sandbox.FieldTerminatedAt, field.TypeTime, value)
		_node.TerminatedAt = &value
	}
	if value, ok := sc.mutation.Deadline(); ok {
		_spec.SetField(sandbox.FieldDeadline, field.TypeTime, value)
		_node.Deadline = &value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(sandbox.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.DurationMs(); ok {
		_spec.SetField(sandbox.FieldDurationMs, field.TypeInt64, value)
		_node.DurationMs = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(sandbox.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.GlobalVersion(); ok {
		_spec.SetField(sandbox.FieldGlobalVersion, field.TypeInt64, value)
		_node.GlobalVersion = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sandbox.Create().
//		SetStartedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SandboxUpsert) {
//			SetStartedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SandboxCreate) OnConflict(opts ...sql.ConflictOption) *SandboxUpsertOne {
	sc.conflict = opts
	return &SandboxUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SandboxCreate) OnConflictColumns(columns ...string) *SandboxUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SandboxUpsertOne{
		create: sc,
	}
}

type (
	// SandboxUpsertOne is the builder for "upsert"-ing
	//  one Sandbox node.
	SandboxUpsertOne struct {
		create *SandboxCreate
	}

	// SandboxUpsert is the "OnConflict" setter.
	SandboxUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SandboxUpsert) SetUpdatedAt(v time.Time) *SandboxUpsert {
	u.Set(sandbox.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateUpdatedAt() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldUpdatedAt)
	return u
}

// SetTerminatedAt sets the "terminated_at" field.
func (u *SandboxUpsert) SetTerminatedAt(v time.Time) *SandboxUpsert {
	u.Set(sandbox.FieldTerminatedAt, v)
	return u
}

// UpdateTerminatedAt sets the "terminated_at" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateTerminatedAt() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldTerminatedAt)
	return u
}

// SetDeadline sets the "deadline" field.
func (u *SandboxUpsert) SetDeadline(v time.Time) *SandboxUpsert {
	u.Set(sandbox.FieldDeadline, v)
	return u
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateDeadline() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldDeadline)
	return u
}

// SetStatus sets the "status" field.
func (u *SandboxUpsert) SetStatus(v sandbox.Status) *SandboxUpsert {
	u.Set(sandbox.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateStatus() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldStatus)
	return u
}

// SetDurationMs sets the "duration_ms" field.
func (u *SandboxUpsert) SetDurationMs(v int64) *SandboxUpsert {
	u.Set(sandbox.FieldDurationMs, v)
	return u
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateDurationMs() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldDurationMs)
	return u
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *SandboxUpsert) AddDurationMs(v int64) *SandboxUpsert {
	u.Add(sandbox.FieldDurationMs, v)
	return u
}

// SetVersion sets the "version" field.
func (u *SandboxUpsert) SetVersion(v int64) *SandboxUpsert {
	u.Set(sandbox.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateVersion() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *SandboxUpsert) AddVersion(v int64) *SandboxUpsert {
	u.Add(sandbox.FieldVersion, v)
	return u
}

// SetGlobalVersion sets the "global_version" field.
func (u *SandboxUpsert) SetGlobalVersion(v int64) *SandboxUpsert {
	u.Set(sandbox.FieldGlobalVersion, v)
	return u
}

// UpdateGlobalVersion sets the "global_version" field to the value that was provided on create.
func (u *SandboxUpsert) UpdateGlobalVersion() *SandboxUpsert {
	u.SetExcluded(sandbox.FieldGlobalVersion)
	return u
}

// AddGlobalVersion adds v to the "global_version" field.
func (u *SandboxUpsert) AddGlobalVersion(v int64) *SandboxUpsert {
	u.Add(sandbox.FieldGlobalVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sandbox.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SandboxUpsertOne) UpdateNewValues() *SandboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(sandbox.FieldID)
		}
		if _, exists := u.create.mutation.StartedAt(); exists {
			s.SetIgnore(sandbox.FieldStartedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SandboxUpsertOne) Ignore() *SandboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SandboxUpsertOne) DoNothing() *SandboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SandboxCreate.OnConflict
// documentation for more info.
func (u *SandboxUpsertOne) Update(set func(*SandboxUpsert)) *SandboxUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SandboxUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SandboxUpsertOne) SetUpdatedAt(v time.Time) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateUpdatedAt() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTerminatedAt sets the "terminated_at" field.
func (u *SandboxUpsertOne) SetTerminatedAt(v time.Time) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetTerminatedAt(v)
	})
}

// UpdateTerminatedAt sets the "terminated_at" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateTerminatedAt() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateTerminatedAt()
	})
}

// SetDeadline sets the "deadline" field.
func (u *SandboxUpsertOne) SetDeadline(v time.Time) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateDeadline() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateDeadline()
	})
}

// SetStatus sets the "status" field.
func (u *SandboxUpsertOne) SetStatus(v sandbox.Status) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateStatus() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateStatus()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *SandboxUpsertOne) SetDurationMs(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *SandboxUpsertOne) AddDurationMs(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateDurationMs() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateDurationMs()
	})
}

// SetVersion sets the "version" field.
func (u *SandboxUpsertOne) SetVersion(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *SandboxUpsertOne) AddVersion(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateVersion() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateVersion()
	})
}

// SetGlobalVersion sets the "global_version" field.
func (u *SandboxUpsertOne) SetGlobalVersion(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.SetGlobalVersion(v)
	})
}

// AddGlobalVersion adds v to the "global_version" field.
func (u *SandboxUpsertOne) AddGlobalVersion(v int64) *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.AddGlobalVersion(v)
	})
}

// UpdateGlobalVersion sets the "global_version" field to the value that was provided on create.
func (u *SandboxUpsertOne) UpdateGlobalVersion() *SandboxUpsertOne {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateGlobalVersion()
	})
}

// Exec executes the query.
func (u *SandboxUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for SandboxCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SandboxUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SandboxUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("models: SandboxUpsertOne.ID is not supported by MySQL driver. Use SandboxUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SandboxUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SandboxCreateBulk is the builder for creating many Sandbox entities in bulk.
type SandboxCreateBulk struct {
	config
	err      error
	builders []*SandboxCreate
	conflict []sql.ConflictOption
}

// Save creates the Sandbox entities in the database.
func (scb *SandboxCreateBulk) Save(ctx context.Context) ([]*Sandbox, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Sandbox, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SandboxMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SandboxCreateBulk) SaveX(ctx context.Context) []*Sandbox {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SandboxCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SandboxCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Sandbox.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SandboxUpsert) {
//			SetStartedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SandboxCreateBulk) OnConflict(opts ...sql.ConflictOption) *SandboxUpsertBulk {
	scb.conflict = opts
	return &SandboxUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SandboxCreateBulk) OnConflictColumns(columns ...string) *SandboxUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SandboxUpsertBulk{
		create: scb,
	}
}

// SandboxUpsertBulk is the builder for "upsert"-ing
// a bulk of Sandbox nodes.
type SandboxUpsertBulk struct {
	create *SandboxCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(sandbox.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SandboxUpsertBulk) UpdateNewValues() *SandboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(sandbox.FieldID)
			}
			if _, exists := b.mutation.StartedAt(); exists {
				s.SetIgnore(sandbox.FieldStartedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Sandbox.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SandboxUpsertBulk) Ignore() *SandboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SandboxUpsertBulk) DoNothing() *SandboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SandboxCreateBulk.OnConflict
// documentation for more info.
func (u *SandboxUpsertBulk) Update(set func(*SandboxUpsert)) *SandboxUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SandboxUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SandboxUpsertBulk) SetUpdatedAt(v time.Time) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateUpdatedAt() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTerminatedAt sets the "terminated_at" field.
func (u *SandboxUpsertBulk) SetTerminatedAt(v time.Time) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetTerminatedAt(v)
	})
}

// UpdateTerminatedAt sets the "terminated_at" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateTerminatedAt() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateTerminatedAt()
	})
}

// SetDeadline sets the "deadline" field.
func (u *SandboxUpsertBulk) SetDeadline(v time.Time) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetDeadline(v)
	})
}

// UpdateDeadline sets the "deadline" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateDeadline() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateDeadline()
	})
}

// SetStatus sets the "status" field.
func (u *SandboxUpsertBulk) SetStatus(v sandbox.Status) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateStatus() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateStatus()
	})
}

// SetDurationMs sets the "duration_ms" field.
func (u *SandboxUpsertBulk) SetDurationMs(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetDurationMs(v)
	})
}

// AddDurationMs adds v to the "duration_ms" field.
func (u *SandboxUpsertBulk) AddDurationMs(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.AddDurationMs(v)
	})
}

// UpdateDurationMs sets the "duration_ms" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateDurationMs() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateDurationMs()
	})
}

// SetVersion sets the "version" field.
func (u *SandboxUpsertBulk) SetVersion(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *SandboxUpsertBulk) AddVersion(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateVersion() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateVersion()
	})
}

// SetGlobalVersion sets the "global_version" field.
func (u *SandboxUpsertBulk) SetGlobalVersion(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.SetGlobalVersion(v)
	})
}

// AddGlobalVersion adds v to the "global_version" field.
func (u *SandboxUpsertBulk) AddGlobalVersion(v int64) *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.AddGlobalVersion(v)
	})
}

// UpdateGlobalVersion sets the "global_version" field to the value that was provided on create.
func (u *SandboxUpsertBulk) UpdateGlobalVersion() *SandboxUpsertBulk {
	return u.Update(func(s *SandboxUpsert) {
		s.UpdateGlobalVersion()
	})
}

// Exec executes the query.
func (u *SandboxUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("models: OnConflict was set for builder %d. Set it on the SandboxCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("models: missing options for SandboxCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SandboxUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
