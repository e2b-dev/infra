// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package database

import (
	"context"
	"time"
)

const createSandbox = `-- name: CreateSandbox :exec
INSERT INTO sandboxes(id, status, started_at, deadline, duration_ms, config, global_version)
VALUES (
   ?1,
   ?2,
   ?3,
   ?4,
   0,
   ?5,
   (SELECT version FROM status WHERE status.id = 1)
)
`

type CreateSandboxParams struct {
	ID        string
	Status    string
	StartedAt time.Time
	Deadline  time.Time
	Config    []byte
}

func (q *Queries) CreateSandbox(ctx context.Context, arg CreateSandboxParams) error {
	_, err := q.db.ExecContext(ctx, createSandbox,
		arg.ID,
		arg.Status,
		arg.StartedAt,
		arg.Deadline,
		arg.Config,
	)
	return err
}

const globalVersion = `-- name: GlobalVersion :one
SELECT version FROM status WHERE id = 1
`

func (q *Queries) GlobalVersion(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, globalVersion)
	var version int64
	err := row.Scan(&version)
	return version, err
}

const incGlobalVersion = `-- name: IncGlobalVersion :one
UPDATE status
SET
   version = version + 1,
   updated_at = current_timestamp
WHERE
   id = 1 AND status != 'terminated'
RETURNING version
`

func (q *Queries) IncGlobalVersion(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, incGlobalVersion)
	var version int64
	err := row.Scan(&version)
	return version, err
}

const orchestratorStatus = `-- name: OrchestratorStatus :one
SELECT
  status.version AS global_version,
  (SELECT count(*) FROM sandboxes) AS num_sandboxes,
  (SELECT count(*) FROM sandboxes WHERE status = 'pending') AS pending_sandboxes,
  (SELECT count(*) FROM sandboxes WHERE status = 'terminated') AS terminated_sandboxes,
  (SELECT count(*) FROM sandboxes WHERE status = 'running') AS running_sandboxes,
  (SELECT min(started_at) FROM sandboxes WHERE status = 'running') AS earliest_running_sandbox_started_at,
  (SELECT max(updated_at) FROM sandboxes WHERE status = 'running') AS most_recent_running_sandbox_updated_at,
  status.updated_at,
  status.status
FROM
  status
`

type OrchestratorStatusRow struct {
	GlobalVersion                     int64
	NumSandboxes                      int64
	PendingSandboxes                  int64
	TerminatedSandboxes               int64
	RunningSandboxes                  int64
	EarliestRunningSandboxStartedAt   interface{}
	MostRecentRunningSandboxUpdatedAt interface{}
	UpdatedAt                         time.Time
	Status                            string
}

func (q *Queries) OrchestratorStatus(ctx context.Context) (OrchestratorStatusRow, error) {
	row := q.db.QueryRowContext(ctx, orchestratorStatus)
	var i OrchestratorStatusRow
	err := row.Scan(
		&i.GlobalVersion,
		&i.NumSandboxes,
		&i.PendingSandboxes,
		&i.TerminatedSandboxes,
		&i.RunningSandboxes,
		&i.EarliestRunningSandboxStartedAt,
		&i.MostRecentRunningSandboxUpdatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const setOrchestratorStatusRunning = `-- name: SetOrchestratorStatusRunning :exec
UPDATE status
SET
   version = version + 1,
   updated_at = current_timestamp,
   status = 'running'
WHERE
   id = 1 AND status = 'initializing'
`

func (q *Queries) SetOrchestratorStatusRunning(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setOrchestratorStatusRunning)
	return err
}

const setOrchestratorStatusTerminated = `-- name: SetOrchestratorStatusTerminated :exec
UPDATE status
SET
   version = version + 1,
   updated_at = current_timestamp,
   status = 'terminated'
WHERE
   id = 1 AND status != 'terminated'
`

func (q *Queries) SetOrchestratorStatusTerminated(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, setOrchestratorStatusTerminated)
	return err
}

const shutdownSandbox = `-- name: ShutdownSandbox :exec
UPDATE sandboxes
SET
  version = version + 1,
  global_version = (SELECT version FROM status WHERE status.id = 1),
  updated_at = current_timestamp,
  duration_ms = ?1,
  status = ?2
WHERE
  sandboxes.id = ?3
`

type ShutdownSandboxParams struct {
	DurationMs int64
	Status     string
	ID         string
}

func (q *Queries) ShutdownSandbox(ctx context.Context, arg ShutdownSandboxParams) error {
	_, err := q.db.ExecContext(ctx, shutdownSandbox, arg.DurationMs, arg.Status, arg.ID)
	return err
}

const updateSandboxDeadline = `-- name: UpdateSandboxDeadline :exec
UPDATE sandboxes
SET
  version = version + 1,
  global_version = (SELECT version FROM status WHERE status.id = 1),
  udpated_at = current_timestamp,
  deadline = ?1,
  status = 'running'
WHERE
  sandboxes.id = ?2
`

type UpdateSandboxDeadlineParams struct {
	Deadline time.Time
	ID       string
}

func (q *Queries) UpdateSandboxDeadline(ctx context.Context, arg UpdateSandboxDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, updateSandboxDeadline, arg.Deadline, arg.ID)
	return err
}
