// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: basic.sql

package queries

import (
	"context"
)

const acquire = `-- name: Acquire :one
INSERT INTO counts(key, count, setID) VALUES (?1, 1, ?2)
ON CONFLICT(key) DO UPDATE SET
    count = count + excluded.count,
	setID = excluded.setID
WHERE count < 5
RETURNING key, count, setID
`

type AcquireParams struct {
	Key   string
	Setid string
}

func (q *Queries) Acquire(ctx context.Context, arg AcquireParams) (Count, error) {
	row := q.db.QueryRowContext(ctx, acquire, arg.Key, arg.Setid)
	var i Count
	err := row.Scan(&i.Key, &i.Count, &i.Setid)
	return i, err
}

const release = `-- name: Release :exec
UPDATE counts
SET count = min(count - 1, 0)
WHERE key = ?1
`

func (q *Queries) Release(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, release, key)
	return err
}
