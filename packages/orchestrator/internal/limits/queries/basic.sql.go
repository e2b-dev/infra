// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: basic.sql

package queries

import (
	"context"
	"database/sql"
)

const acquire = `-- name: Acquire :execresult
INSERT INTO counts(key, count, setID) VALUES (?1, 1, ?2)
ON CONFLICT(key) DO UPDATE SET
    count = count + excluded.count,
	setID = excluded.setID
WHERE count < 5
`

type AcquireParams struct {
	Key   string
	Setid string
}

func (q *Queries) Acquire(ctx context.Context, arg AcquireParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, acquire, arg.Key, arg.Setid)
}

const release = `-- name: Release :exec
UPDATE counts
SET count = min(count - 1, 0)
WHERE key = ?1
`

func (q *Queries) Release(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, release, key)
	return err
}
