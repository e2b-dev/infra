syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option go_package = "https://github.com/e2b-dev/infra/orchestrator";

message SandboxConfig {
  // Data required for creating a new sandbox.
  string template_id = 1;
  string build_id = 2;
  
  string kernel_version = 3;
  string firecracker_version = 4;
  
  bool huge_pages = 5;
  
  string sandbox_id = 6;
  map<string, string> env_vars = 7;
  
  // Metadata about the sandbox.
  map<string, string> metadata = 8;
  optional string alias = 9;
  string envd_version = 10;
  
  int64 vcpu = 11;
  int64 ram_mb = 12;

  string team_id = 13;
  // Maximum length of the sandbox in Hours.
  int64 max_sandbox_length = 14;

  int64 total_disk_size_mb = 15;

  bool snapshot = 16;
  string base_template_id = 17;

  bool auto_pause = 18;

  optional string envd_access_token = 19;
  string execution_id = 20;

  // Whether the sandbox should have access to the internet.
  // This is optional only for backwards compatibility.
  // After migration, the optional keyword can be removed.
  optional bool allow_internet_access = 21;
}

message StorageConfig {
  oneof kind {
    LocalStorageConfig local = 1;
    ObjectStorageConfig object = 2;
  }
}

message LocalStorageConfig {
  // Local directory path to be used for storage
  string path = 1;
}

message ObjectStorageConfig {
  // Name of the bucket/container, e.g., for S3 or GCS
  string bucket = 1;
  // Prefix or path within the bucket
  string prefix = 2;
}

message StorageOverlay {
  StorageConfig storage = 1;
}

message SandboxCreateRequest {
  SandboxConfig sandbox = 1;

  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;

  repeated StorageOverlay overlay = 4;
}

message SandboxCreateResponse {
  string client_id = 1;
}

message SandboxUpdateRequest {
  string sandbox_id = 1;

  google.protobuf.Timestamp end_time = 2;
}

message SandboxDeleteRequest {
  string sandbox_id = 1;
}

message SandboxPauseRequest {
  string sandbox_id = 1;
  string template_id = 2;
  string build_id = 3;
}

message RunningSandbox {
  SandboxConfig config = 1;
  string client_id = 2;

  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
}

message SandboxListResponse {
  repeated RunningSandbox sandboxes = 1;
}

message CachedBuildInfo {
  string build_id = 1;
  google.protobuf.Timestamp expiration_time = 2;
}

message SandboxListCachedBuildsResponse {
  repeated CachedBuildInfo builds = 1;
}

message SandboxSaveRequest {
  string sandbox_id = 1;

  StorageConfig storage = 2;
}

message SandboxSaveResponse {
  oneof event {
    SandboxEvent sandbox = 1;
    StorageEvent storage = 2;
  }

  message SandboxEvent {
    bool resumed = 1;
  }

  message StorageEvent {
    bool upload_finished = 1;
  }
}

service SandboxService {
  rpc Create(SandboxCreateRequest) returns (SandboxCreateResponse);
  rpc Update(SandboxUpdateRequest) returns (google.protobuf.Empty);
  rpc List(google.protobuf.Empty) returns (SandboxListResponse);
  rpc Delete(SandboxDeleteRequest) returns (google.protobuf.Empty);
  rpc Pause(SandboxPauseRequest) returns (google.protobuf.Empty);
  rpc Save(SandboxSaveRequest) returns (stream SandboxSaveResponse);

  rpc ListCachedBuilds(google.protobuf.Empty) returns (SandboxListCachedBuildsResponse);
}
